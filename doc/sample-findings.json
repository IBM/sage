{"py/object": "ansible_risk_insight.findings.Findings", "metadata": {"type": "project", "name": "/tmp/ansible-rabbitmq", "version": "", "source": "", "download_url": "", "hash": "", "time_records": {"scandata_init": {"begin": "2023-07-18T08:17:16.577745", "end": "2023-07-18T08:17:16.578345", "elapsed": 0.0006}, "metadata_load": {"begin": "2023-07-18T08:17:16.578357", "end": "2023-07-18T08:17:16.578871", "elapsed": 0.000514}, "dependency_load": {"begin": "2023-07-18T08:17:16.578879", "end": "2023-07-18T08:17:16.578882", "elapsed": 3e-06}, "prm_load": {"begin": "2023-07-18T08:17:16.578885", "end": "2023-07-18T08:17:16.578887", "elapsed": 2e-06}, "target_load": {"begin": "2023-07-18T08:17:16.578889", "end": "2023-07-18T08:17:16.578919", "elapsed": 3e-05}, "apply_spec_rules": {"begin": "2023-07-18T08:17:16.943264", "end": "2023-07-18T08:17:16.943275", "elapsed": 1.1e-05}, "tree_construction": {"begin": "2023-07-18T08:17:16.943283", "end": "2023-07-18T08:17:17.025391", "elapsed": 0.082108}, "variable_resolution": {"begin": "2023-07-18T08:17:17.025409", "end": "2023-07-18T08:17:17.030053", "elapsed": 0.004644}, "module_annotators": {"begin": "2023-07-18T08:17:17.030064", "end": "2023-07-18T08:17:17.053422", "elapsed": 0.023358}, "apply_rules": {"begin": "2023-07-18T08:17:17.053442", "end": "2023-07-18T08:17:18.162980", "elapsed": 1.109538}}}, "dependencies": [], "root_definitions": {"definitions": {"collections": [], "projects": [{"py/object": "ansible_risk_insight.models.Repository", "type": "repository", "key": "", "name": "ansible-rabbitmq", "path": "ansible-rabbitmq/", "local_key": "", "my_collection_name": "", "playbooks": ["playbook playbook:molecule/centos7/verify.yml", "playbook playbook:molecule/centos8/verify.yml", "playbook playbook:molecule/debian10/verify.yml", "playbook playbook:molecule/debian8/verify.yml", "playbook playbook:molecule/debian9/verify.yml", "playbook playbook:molecule/fedora/verify.yml", "playbook playbook:molecule/shared/converge.yml", "playbook playbook:molecule/shared/verify.yml", "playbook playbook:molecule/ubuntu1604/verify.yml", "playbook playbook:molecule/ubuntu1804/verify.yml", "playbook playbook:molecule/ubuntu2004/converge.yml", "playbook playbook:molecule/ubuntu2004/verify.yml", "playbook playbook:playbook.yml"], "roles": ["role role:ansible-rabbitmq"], "target_playbook_path": "", "target_taskfile_path": "", "requirements": null, "installed_collections_path": "", "installed_collections": [], "installed_roles_path": "", "installed_roles": [], "modules": [], "taskfiles": ["taskfile taskfile:tasks/config.yml", "taskfile taskfile:tasks/debian.yml", "taskfile taskfile:tasks/fedora.yml", "taskfile taskfile:tasks/rabbitmq_clustering.yml", "taskfile taskfile:tasks/rabbitmq_ha_config.yml", "taskfile taskfile:tasks/rabbitmq_users.yml", "taskfile taskfile:tasks/rabbitmq_vhosts.yml", "taskfile taskfile:tasks/redhat.yml"], "inventories": [], "version": "", "annotations": {}}], "roles": [{"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:ansible-rabbitmq", "name": "ansible-rabbitmq", "defined_in": "", "local_key": "role role:", "fqcn": "ansible-rabbitmq", "metadata": {"galaxy_info": {"author": "Larry Smith Jr.", "description": "Ansible role to install/configure RabbitMQ", "license": "MIT", "min_ansible_version": 1.2, "platforms": [{"name": "EL", "versions": [8]}, {"name": "Fedora", "versions": [24, 25, 26, 27, 28, 29]}, {"name": "Ubuntu", "versions": ["focal", "bionic"]}, {"name": "Debian", "versions": ["buster", "stretch"]}], "galaxy_tags": ["clustering", "system"]}, "dependencies": []}, "collection": "", "playbooks": ["playbook playbook:molecule/centos7/verify.yml", "playbook playbook:molecule/centos8/verify.yml", "playbook playbook:molecule/debian10/verify.yml", "playbook playbook:molecule/debian8/verify.yml", "playbook playbook:molecule/debian9/verify.yml", "playbook playbook:molecule/fedora/verify.yml", "playbook playbook:molecule/shared/converge.yml", "playbook playbook:molecule/shared/verify.yml", "playbook playbook:molecule/ubuntu1604/verify.yml", "playbook playbook:molecule/ubuntu1804/verify.yml", "playbook playbook:molecule/ubuntu2004/converge.yml", "playbook playbook:molecule/ubuntu2004/verify.yml", "playbook playbook:playbook.yml"], "taskfiles": ["taskfile role:ansible-rabbitmq#taskfile:tasks/config.yml", "taskfile role:ansible-rabbitmq#taskfile:tasks/debian.yml", "taskfile role:ansible-rabbitmq#taskfile:tasks/fedora.yml", "taskfile role:ansible-rabbitmq#taskfile:tasks/main.yml", "taskfile role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml", "taskfile role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml", "taskfile role:ansible-rabbitmq#taskfile:tasks/rabbitmq_users.yml", "taskfile role:ansible-rabbitmq#taskfile:tasks/rabbitmq_vhosts.yml", "taskfile role:ansible-rabbitmq#taskfile:tasks/redhat.yml"], "handlers": [{"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:ansible-rabbitmq#taskfile:handlers/main.yml", "name": "main.yml", "defined_in": "handlers/main.yml", "local_key": "taskfile taskfile:handlers/main.yml", "tasks": [{"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:handlers/main.yml#task:[0]", "name": "restart rabbitmq-server", "module": "service", "index": 0, "play_index": -1, "defined_in": "handlers/main.yml", "local_key": "task taskfile:handlers/main.yml#task:[0]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "restart rabbitmq-server", "become": true}, "module_options": {"name": "rabbitmq-server", "state": "restarted"}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: restart rabbitmq-server\n  service:\n    name: rabbitmq-server\n    state: restarted\n  become: true", "line_num_in_file": [3, 8], "resolved_name": "", "possible_candidates": []}], "role": "ansible-rabbitmq", "collection": "", "yaml_lines": "---\n# handlers file for ansible-rabbitmq\n- name: restart rabbitmq-server\n  service:\n    name: rabbitmq-server\n    state: restarted\n  become: true\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}], "modules": [], "dependency": {"roles": [], "collections": []}, "requirements": null, "source": "", "annotations": {}, "default_variables": {"rabbitmq_config": [], "rabbitmq_config_ha": false, "rabbitmq_config_service": false, "rabbitmq_config_file": "etc/rabbitmq/rabbitmq.config.j2", "rabbitmq_config_env_file": "etc/rabbitmq/rabbitmq-env.conf.j2", "rabbitmq_env_config": {}, "rabbitmq_debian_repo": "deb https://dl.bintray.com/rabbitmq/debian {{ ansible_distribution_release }} main #bintray", "rabbitmq_debian_repo_key": "https://bintray.com/user/downloadSubjectPublicKey?username=rabbitmq", "rabbitmq_debian_erlang_from_rabbit": true, "rabbitmq_debian_version_defined": true, "rabbitmq_debian_version": "3.8.11-1", "rabbitmq_enable_clustering": false, "rabbitmq_master": "None", "rabbitmq_erlang_cookie_file": "/var/lib/rabbitmq/.erlang.cookie", "rabbitmq_listen_port": 5672, "rabbitmq_listeners": [], "rabbitmq_ssl_enable": false, "rabbitmq_ssl_port": 5671, "rabbitmq_ssl_listeners": [], "rabitmq_ssl_options": {}, "rabbitmq_redhat_repo_key": "https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc", "rabbitmq_redhat_package": "rabbitmq-server-{{ rabbitmq_redhat_version }}-1.el{{ ansible_distribution_major_version }}.noarch.rpm", "rabbitmq_redhat_url": "https://dl.bintray.com/rabbitmq/rpm/rabbitmq-server/v3.8.x/el/{{ ansible_distribution_major_version }}/noarch", "rabbitmq_redhat_version": "3.8.11", "rabbitmq_extra_vhosts": [], "rabbitmq_users": [{"name": "rabbitmqadmin", "password": "rabbitmqadmin", "vhost": "/", "configure_priv": ".*", "read_priv": ".*", "write_priv": ".*", "tags": "administrator"}]}, "variables": {}, "loop": {}, "options": {}}], "taskfiles": [{"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:ansible-rabbitmq#taskfile:tasks/redhat.yml", "name": "redhat.yml", "defined_in": "tasks/redhat.yml", "local_key": "taskfile taskfile:tasks/redhat.yml", "tasks": ["task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[0]", "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[1]", "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[2]", "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[3]", "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[4]", "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[5]", "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[6]"], "role": "ansible-rabbitmq", "collection": "", "yaml_lines": "---\n- name: redhat | installing pre-reqs\n  yum:\n    name: ['epel-release', 'wget']\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: redhat | installing erlang\n  yum:\n    name: erlang\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: redhat | adding RabbitMQ public GPG key\n  rpm_key:\n    key: \"{{ rabbitmq_redhat_repo_key }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: redhat | downloading RabbitMQ\n  get_url:\n    url: \"{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}\"\n    dest: \"/opt/{{ rabbitmq_redhat_package }}\"\n  become: true\n\n- name: redhat | installing RabbitMQ\n  yum:\n    name: \"/opt/{{ rabbitmq_redhat_package }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: redhat | starting and enabling RabbitMQ service\n  service:\n    name: rabbitmq-server\n    state: started\n    enabled: yes\n  become: true\n\n- name: redhat | enabling the RabbitMQ Management Console\n  rabbitmq_plugin:\n    names: rabbitmq_management\n    state: enabled\n  notify: restart rabbitmq-server\n  become: true\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:ansible-rabbitmq#taskfile:tasks/rabbitmq_users.yml", "name": "rabbitmq_users.yml", "defined_in": "tasks/rabbitmq_users.yml", "local_key": "taskfile taskfile:tasks/rabbitmq_users.yml", "tasks": ["task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_users.yml#task:[0]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_users.yml#task:[1]"], "role": "ansible-rabbitmq", "collection": "", "yaml_lines": "---\n- name: rabbitmq_users | creating rabbitmq users\n  rabbitmq_user:\n    name: \"{{ item['name'] }}\"\n    password: \"{{ item['password'] }}\"\n    vhost: \"{{ item['vhost']|default(omit) }}\"\n    configure_priv: \"{{ item['configure_priv']|default(omit) }}\"\n    read_priv: \"{{ item['read_priv']|default(omit) }}\"\n    write_priv: \"{{ item['write_priv']|default(omit) }}\"\n    tags: \"{{ item['tags']|default(omit) }}\"\n    permissions: \"{{ item['permissions']|default(omit) }}\"\n    state: present\n  become: true\n  with_items: \"{{ rabbitmq_users }}\"\n  when: >\n        (rabbitmq_enable_clustering is defined and\n          not rabbitmq_enable_clustering) or\n          rabbitmq_enable_clustering is not defined\n\n- name: rabbitmq_users | creating rabbitmq users\n  rabbitmq_user:\n    name: \"{{ item['name'] }}\"\n    password: \"{{ item['password'] }}\"\n    vhost: \"{{ item['vhost']|default(omit) }}\"\n    configure_priv: \"{{ item['configure_priv']|default(omit) }}\"\n    read_priv: \"{{ item['read_priv']|default(omit) }}\"\n    write_priv: \"{{ item['write_priv']|default(omit) }}\"\n    tags: \"{{ item['tags']|default(omit) }}\"\n    permissions: \"{{ item['permissions']|default(omit) }}\"\n    state: present\n  run_once: yes\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  with_items: \"{{ rabbitmq_users }}\"\n  when: >\n        rabbitmq_enable_clustering is defined and\n          rabbitmq_enable_clustering\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:ansible-rabbitmq#taskfile:tasks/fedora.yml", "name": "fedora.yml", "defined_in": "tasks/fedora.yml", "local_key": "taskfile taskfile:tasks/fedora.yml", "tasks": ["task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[0]", "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[1]", "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[2]", "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[3]", "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[4]", "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[5]", "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[6]"], "role": "ansible-rabbitmq", "collection": "", "yaml_lines": "---\n- name: fedora | installing pre-reqs\n  dnf:\n    name: ['wget']\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: fedora | installing erlang\n  dnf:\n    name: ['erlang']\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: fedora | adding RabbitMQ public GPG key\n  rpm_key:\n    key: \"{{ rabbitmq_redhat_repo_key }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: fedora | downloading RabbitMQ\n  get_url:\n    url: \"{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}\"\n    dest: \"/opt/{{ rabbitmq_redhat_package }}\"\n  become: true\n\n- name: fedora | installing RabbitMQ\n  dnf:\n    name: \"/opt/{{ rabbitmq_redhat_package }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: fedora | starting and enabling RabbitMQ service\n  service:\n    name: rabbitmq-server\n    state: started\n    enabled: true\n  become: true\n\n- name: fedora | enabling the RabbitMQ Management Console\n  rabbitmq_plugin:\n    names: rabbitmq_management\n    state: enabled\n  notify: restart rabbitmq-server\n  become: true\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml", "name": "rabbitmq_clustering.yml", "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "taskfile taskfile:tasks/rabbitmq_clustering.yml", "tasks": ["task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[0]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[1]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[2]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[3]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[4]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[5]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[6]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[7]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[8]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[9]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[10]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[11]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[12]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[13]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[14]"], "role": "ansible-rabbitmq", "collection": "", "yaml_lines": "---\n- name: rabbitmq_clustering | stopping rabbitmq app\n  command: rabbitmqctl stop_app\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | resetting rabbitmq app\n  command: rabbitmqctl reset\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | stopping rabbitmq-server\n  service:\n    name: rabbitmq-server\n    state: stopped\n  become: true\n\n- name: rabbitmq_clustering | Capturing Erlang Cookie On Master\n  command: \"cat {{ rabbitmq_erlang_cookie_file }}\"\n  become: true\n  register: \"rabbitmq_erlang_cookie\"\n  when: inventory_hostname == rabbitmq_master\n\n- name: rabbitmq_clustering | Setting Erlang Cookie Of Master on Non-Master\n  set_fact:\n    rabbitmq_erlang_cookie: \"{{ hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout'] }}\"\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | copy erlang cookie\n  template:\n    src: erlang.cookie.j2\n    dest: \"{{ rabbitmq_erlang_cookie_file }}\"\n    owner: rabbitmq\n    group: rabbitmq\n    mode: 0400\n    # backing up in case the need to recover\n    backup: yes\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | restarting rabbitmq-server on master\n  service:\n    name: rabbitmq-server\n    state: restarted\n  become: true\n  when: inventory_hostname == rabbitmq_master\n\n- name: rabbitmq_clustering | starting rabbitmq app on master\n  command: rabbitmqctl start_app\n  register: cluster_master\n  become: true\n  when: inventory_hostname == rabbitmq_master\n\n- name: rabbitmq_clustering | sending sigterm to any running rabbitmq processes\n  shell: pkill -u rabbitmq || true\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | restarting rabbitmq-server\n  service:\n    name: rabbitmq-server\n    state: restarted\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | stopping rabbitmq app\n  command: rabbitmqctl stop_app\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | resetting rabbitmq app\n  command: rabbitmqctl reset\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | joining rabbitmq cluster\n  command: rabbitmqctl join_cluster \"rabbit@{{ hostvars[rabbitmq_master]['ansible_hostname'] }}\"\n  register: cluster_joined\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | starting rabbitmq app\n  command: rabbitmqctl start_app\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | marking as clustered # noqa 503\n  file:\n    path: /etc/rabbitmq/clustered\n    state: touch\n  become: true\n  when: >\n    cluster_master['changed'] or\n    cluster_joined['changed']\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:ansible-rabbitmq#taskfile:tasks/rabbitmq_vhosts.yml", "name": "rabbitmq_vhosts.yml", "defined_in": "tasks/rabbitmq_vhosts.yml", "local_key": "taskfile taskfile:tasks/rabbitmq_vhosts.yml", "tasks": ["task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_vhosts.yml#task:[0]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_vhosts.yml#task:[1]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_vhosts.yml#task:[2]"], "role": "ansible-rabbitmq", "collection": "", "yaml_lines": "---\n- name: rabbitmq_extra_vhosts | Create vhosts\n  rabbitmq_vhost:\n    name: \"{{ item['name'] }}\"\n    state: \"{{ item['state'] }}\"\n  with_items: \"{{ rabbitmq_extra_vhosts }}\"\n  run_once: \"{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}\"\n  register: rabbitmq_created_vhosts\n\n- name: rabbitmq_extra_vhosts | Check guest administrator is present # noqa 503\n  command: rabbitmqctl -q list_users\n  become: true\n  run_once: \"{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}\"\n  when: rabbitmq_created_vhosts.changed\n  changed_when: false\n  register: rabbitmq_existing_users\n\n- name: rabbitmq_extra_vhosts | Give access to new vhosts to guest administrator\n  command: \"rabbitmqctl -q set_permissions -p {{ item['name'] }} guest '.*' '.*' '.*'\"\n  become: true\n  run_once: \"{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}\"\n  with_items: \"{{ rabbitmq_created_vhosts.results|selectattr('changed')|list }}\"\n  when:\n    - item['state'] == 'present'\n    - rabbitmq_existing_users.stdout_lines | map('regex_search', '^guest\\\\s\\\\[.*administrator.*\\\\]$') | list | difference([None]) | length > 0\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:ansible-rabbitmq#taskfile:tasks/debian.yml", "name": "debian.yml", "defined_in": "tasks/debian.yml", "local_key": "taskfile taskfile:tasks/debian.yml", "tasks": ["task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[0]", "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[1]", "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[2]", "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[3]", "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[4]", "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[5]", "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[6]", "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[7]"], "role": "ansible-rabbitmq", "collection": "", "yaml_lines": "---\n- name: debian | Adding Pre-Reqs\n  apt:\n    name:\n      - gnupg2\n      - apt-transport-https\n    state: present\n    update_cache: true\n  become: true\n  register: result\n  until: result is successful\n\n- name: debian | adding RabbitMQ public GPG key to the apt repo\n  apt_key:\n    url: \"{{ rabbitmq_debian_repo_key }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: debian | adding RabbitMQ repo\n  apt_repository:\n    repo: \"{{ rabbitmq_debian_repo }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: debian | add Rabbitmq erlang repo key\n  apt_key:\n    url: https://bintray.com/user/downloadSubjectPublicKey?username=rabbitmq-erlang\n    state: present\n  become: true\n  register: result\n  until: result is successful\n  when: rabbitmq_debian_erlang_from_rabbit\n\n- name: debian | add Rabbitmq erlang repo\n  apt_repository:\n    repo: deb https://dl.bintray.com/rabbitmq-erlang/debian {{ ansible_distribution_release }} erlang\n    state: present\n  become: true\n  when: rabbitmq_debian_erlang_from_rabbit\n\n- name: debian | installing RabbitMQ server\n  apt:\n    name:\n      - rabbitmq-server{{ (rabbitmq_debian_version_defined and rabbitmq_debian_version is defined) | ternary(['=',rabbitmq_debian_version] | join(''),'') }}\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: debian | ensuring that the RabbitMQ service is running\n  service:\n    name: rabbitmq-server\n    state: started\n    enabled: yes\n  become: true\n\n- name: debian | enabling the RabbitMQ Management Console\n  rabbitmq_plugin:\n    names: rabbitmq_management\n    state: enabled\n  become: true\n  notify: restart rabbitmq-server", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml", "name": "rabbitmq_ha_config.yml", "defined_in": "tasks/rabbitmq_ha_config.yml", "local_key": "taskfile taskfile:tasks/rabbitmq_ha_config.yml", "tasks": ["task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml#task:[0]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml#task:[1]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml#task:[2]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml#task:[3]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml#task:[4]", "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml#task:[5]"], "role": "ansible-rabbitmq", "collection": "", "yaml_lines": "---\n- name: rabbitmq_ha_config | checking if rabbitmqadmin is installed\n  stat:\n    path: /usr/sbin/rabbitmqadmin\n  register: rabbitmqadmin_check\n\n- name: rabbit_ha_config | Installing rabbitMQ admin\n  get_url:\n    url: http://guest:guest@localhost:15672/cli/rabbitmqadmin\n    dest: /usr/sbin/rabbitmqadmin\n    mode: u=rwx,g=rw,o=rw\n  become: true\n  notify: restart rabbitmq-server\n  when: not rabbitmqadmin_check['stat']['exists']\n\n- name: rabbitmq_ha_config | creating exchange(s)\n  command: rabbitmqadmin declare exchange name={{ item['exchange_name'] }} type={{ item['type'] }} --vhost={{ item['vhost'] | default('/') }}\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  with_items: \"{{ rabbitmq_config }}\"\n  when: item['exchange_name'] is defined\n\n- name: rabbitmq_ha_config | creating queue(s)\n  command: rabbitmqadmin declare queue name={{ item['queue_name'] }} durable={{ item['durable']|lower }} --vhost={{ item['vhost'] | default('/') }}\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  when:\n    - item['queue_name'] is defined\n  with_items: \"{{ rabbitmq_config }}\"\n\n- name: rabbitmq_ha_config | setting up ha on queue(s)\n  rabbitmq_policy:\n    name: \"ha-all{{ policy_name }}\"\n    pattern: \"{{ item.queue_name | default(item.policy_pattern) }}\"\n    vhost: \"{{ item.vhost | default('/') }}\"\n    tags: \"{{ item.tags }}\"\n    state: present\n  vars:\n    policy_vhost: \"{{ item.vhost | default('/') }}\"\n    policy_name: \"{{ item.policy_pattern is defined | ternary(policy_vhost + item.policy_pattern|default(''),item.queue_name|default('')) }}\"\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  when: item.queue_name is defined or item.policy_pattern is defined\n  with_items: \"{{ rabbitmq_config }}\"\n\n- name: rabbitmq_ha_config | creating binding(s)\n  command: rabbitmqadmin declare binding source={{ item['exchange_name'] }} destination_type=\"queue\" destination={{ item['queue_name'] }} routing_key={{ item['routing_key'] }} --vhost={{ item['vhost'] | default('/') }} # noqa 204\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  with_items: \"{{ rabbitmq_config }}\"\n  when: item['exchange_name'] is defined\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:ansible-rabbitmq#taskfile:tasks/config.yml", "name": "config.yml", "defined_in": "tasks/config.yml", "local_key": "taskfile taskfile:tasks/config.yml", "tasks": ["task role:ansible-rabbitmq#taskfile:tasks/config.yml#task:[0]", "task role:ansible-rabbitmq#taskfile:tasks/config.yml#task:[1]"], "role": "ansible-rabbitmq", "collection": "", "yaml_lines": "---\n- name: config | Configuring RabbitMQ\n  template:\n    src: \"{{ rabbitmq_config_file }}\"\n    dest: \"/etc/rabbitmq/rabbitmq.config\"\n  become: true\n  notify: \"restart rabbitmq-server\"\n\n- name: config | Configuring RabbitMQ environemnt\n  template:\n    src: \"{{ rabbitmq_config_env_file }}\"\n    dest: \"/etc/rabbitmq/rabbitmq-env.conf\"\n  become: true\n  notify: \"restart rabbitmq-server\"\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:ansible-rabbitmq#taskfile:tasks/main.yml", "name": "main.yml", "defined_in": "tasks/main.yml", "local_key": "taskfile taskfile:tasks/main.yml", "tasks": ["task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[0]", "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[1]", "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[2]", "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[3]", "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[4]", "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[5]", "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[6]", "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[7]", "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[8]"], "role": "ansible-rabbitmq", "collection": "", "yaml_lines": "---\n# tasks file for ansible-rabbitmq\n- include: debian.yml\n  when: ansible_os_family == \"Debian\"\n\n- include: redhat.yml\n  when: >\n        ansible_distribution == \"CentOS\" or\n        ansible_distribution == \"Red Hat Enterprise Linux\" or\n        ansible_distribution == \"OracleLinux\"\n\n- include: fedora.yml\n  when: ansible_distribution == \"Fedora\"\n\n- include: config.yml\n  when: rabbitmq_config_service\n\n- name: checking to see if already clustered\n  stat:\n    path: /etc/rabbitmq/clustered\n  become: true\n  register: clustered\n\n- include: rabbitmq_clustering.yml\n  when: >\n        rabbitmq_enable_clustering and\n        not clustered['stat']['exists']\n\n- include: rabbitmq_vhosts.yml\n  when: rabbitmq_extra_vhosts is defined\n\n- include: rabbitmq_ha_config.yml\n  when: >\n        rabbitmq_config_ha and\n        rabbitmq_enable_clustering and\n        rabbitmq_config is defined\n\n- include: rabbitmq_users.yml\n  when: rabbitmq_users is defined\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile taskfile:tasks/config.yml", "name": "config.yml", "defined_in": "tasks/config.yml", "local_key": "taskfile taskfile:tasks/config.yml", "tasks": ["task taskfile:tasks/config.yml#task:[0]", "task taskfile:tasks/config.yml#task:[1]"], "role": "", "collection": "", "yaml_lines": "---\n- name: config | Configuring RabbitMQ\n  template:\n    src: \"{{ rabbitmq_config_file }}\"\n    dest: \"/etc/rabbitmq/rabbitmq.config\"\n  become: true\n  notify: \"restart rabbitmq-server\"\n\n- name: config | Configuring RabbitMQ environemnt\n  template:\n    src: \"{{ rabbitmq_config_env_file }}\"\n    dest: \"/etc/rabbitmq/rabbitmq-env.conf\"\n  become: true\n  notify: \"restart rabbitmq-server\"\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile taskfile:tasks/debian.yml", "name": "debian.yml", "defined_in": "tasks/debian.yml", "local_key": "taskfile taskfile:tasks/debian.yml", "tasks": ["task taskfile:tasks/debian.yml#task:[0]", "task taskfile:tasks/debian.yml#task:[1]", "task taskfile:tasks/debian.yml#task:[2]", "task taskfile:tasks/debian.yml#task:[3]", "task taskfile:tasks/debian.yml#task:[4]", "task taskfile:tasks/debian.yml#task:[5]", "task taskfile:tasks/debian.yml#task:[6]", "task taskfile:tasks/debian.yml#task:[7]"], "role": "", "collection": "", "yaml_lines": "---\n- name: debian | Adding Pre-Reqs\n  apt:\n    name:\n      - gnupg2\n      - apt-transport-https\n    state: present\n    update_cache: true\n  become: true\n  register: result\n  until: result is successful\n\n- name: debian | adding RabbitMQ public GPG key to the apt repo\n  apt_key:\n    url: \"{{ rabbitmq_debian_repo_key }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: debian | adding RabbitMQ repo\n  apt_repository:\n    repo: \"{{ rabbitmq_debian_repo }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: debian | add Rabbitmq erlang repo key\n  apt_key:\n    url: https://bintray.com/user/downloadSubjectPublicKey?username=rabbitmq-erlang\n    state: present\n  become: true\n  register: result\n  until: result is successful\n  when: rabbitmq_debian_erlang_from_rabbit\n\n- name: debian | add Rabbitmq erlang repo\n  apt_repository:\n    repo: deb https://dl.bintray.com/rabbitmq-erlang/debian {{ ansible_distribution_release }} erlang\n    state: present\n  become: true\n  when: rabbitmq_debian_erlang_from_rabbit\n\n- name: debian | installing RabbitMQ server\n  apt:\n    name:\n      - rabbitmq-server{{ (rabbitmq_debian_version_defined and rabbitmq_debian_version is defined) | ternary(['=',rabbitmq_debian_version] | join(''),'') }}\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: debian | ensuring that the RabbitMQ service is running\n  service:\n    name: rabbitmq-server\n    state: started\n    enabled: yes\n  become: true\n\n- name: debian | enabling the RabbitMQ Management Console\n  rabbitmq_plugin:\n    names: rabbitmq_management\n    state: enabled\n  become: true\n  notify: restart rabbitmq-server", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile taskfile:tasks/fedora.yml", "name": "fedora.yml", "defined_in": "tasks/fedora.yml", "local_key": "taskfile taskfile:tasks/fedora.yml", "tasks": ["task taskfile:tasks/fedora.yml#task:[0]", "task taskfile:tasks/fedora.yml#task:[1]", "task taskfile:tasks/fedora.yml#task:[2]", "task taskfile:tasks/fedora.yml#task:[3]", "task taskfile:tasks/fedora.yml#task:[4]", "task taskfile:tasks/fedora.yml#task:[5]", "task taskfile:tasks/fedora.yml#task:[6]"], "role": "", "collection": "", "yaml_lines": "---\n- name: fedora | installing pre-reqs\n  dnf:\n    name: ['wget']\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: fedora | installing erlang\n  dnf:\n    name: ['erlang']\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: fedora | adding RabbitMQ public GPG key\n  rpm_key:\n    key: \"{{ rabbitmq_redhat_repo_key }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: fedora | downloading RabbitMQ\n  get_url:\n    url: \"{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}\"\n    dest: \"/opt/{{ rabbitmq_redhat_package }}\"\n  become: true\n\n- name: fedora | installing RabbitMQ\n  dnf:\n    name: \"/opt/{{ rabbitmq_redhat_package }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: fedora | starting and enabling RabbitMQ service\n  service:\n    name: rabbitmq-server\n    state: started\n    enabled: true\n  become: true\n\n- name: fedora | enabling the RabbitMQ Management Console\n  rabbitmq_plugin:\n    names: rabbitmq_management\n    state: enabled\n  notify: restart rabbitmq-server\n  become: true\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile taskfile:tasks/rabbitmq_clustering.yml", "name": "rabbitmq_clustering.yml", "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "taskfile taskfile:tasks/rabbitmq_clustering.yml", "tasks": ["task taskfile:tasks/rabbitmq_clustering.yml#task:[0]", "task taskfile:tasks/rabbitmq_clustering.yml#task:[1]", "task taskfile:tasks/rabbitmq_clustering.yml#task:[2]", "task taskfile:tasks/rabbitmq_clustering.yml#task:[3]", "task taskfile:tasks/rabbitmq_clustering.yml#task:[4]", "task taskfile:tasks/rabbitmq_clustering.yml#task:[5]", "task taskfile:tasks/rabbitmq_clustering.yml#task:[6]", "task taskfile:tasks/rabbitmq_clustering.yml#task:[7]", "task taskfile:tasks/rabbitmq_clustering.yml#task:[8]", "task taskfile:tasks/rabbitmq_clustering.yml#task:[9]", "task taskfile:tasks/rabbitmq_clustering.yml#task:[10]", "task taskfile:tasks/rabbitmq_clustering.yml#task:[11]", "task taskfile:tasks/rabbitmq_clustering.yml#task:[12]", "task taskfile:tasks/rabbitmq_clustering.yml#task:[13]", "task taskfile:tasks/rabbitmq_clustering.yml#task:[14]"], "role": "", "collection": "", "yaml_lines": "---\n- name: rabbitmq_clustering | stopping rabbitmq app\n  command: rabbitmqctl stop_app\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | resetting rabbitmq app\n  command: rabbitmqctl reset\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | stopping rabbitmq-server\n  service:\n    name: rabbitmq-server\n    state: stopped\n  become: true\n\n- name: rabbitmq_clustering | Capturing Erlang Cookie On Master\n  command: \"cat {{ rabbitmq_erlang_cookie_file }}\"\n  become: true\n  register: \"rabbitmq_erlang_cookie\"\n  when: inventory_hostname == rabbitmq_master\n\n- name: rabbitmq_clustering | Setting Erlang Cookie Of Master on Non-Master\n  set_fact:\n    rabbitmq_erlang_cookie: \"{{ hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout'] }}\"\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | copy erlang cookie\n  template:\n    src: erlang.cookie.j2\n    dest: \"{{ rabbitmq_erlang_cookie_file }}\"\n    owner: rabbitmq\n    group: rabbitmq\n    mode: 0400\n    # backing up in case the need to recover\n    backup: yes\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | restarting rabbitmq-server on master\n  service:\n    name: rabbitmq-server\n    state: restarted\n  become: true\n  when: inventory_hostname == rabbitmq_master\n\n- name: rabbitmq_clustering | starting rabbitmq app on master\n  command: rabbitmqctl start_app\n  register: cluster_master\n  become: true\n  when: inventory_hostname == rabbitmq_master\n\n- name: rabbitmq_clustering | sending sigterm to any running rabbitmq processes\n  shell: pkill -u rabbitmq || true\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | restarting rabbitmq-server\n  service:\n    name: rabbitmq-server\n    state: restarted\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | stopping rabbitmq app\n  command: rabbitmqctl stop_app\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | resetting rabbitmq app\n  command: rabbitmqctl reset\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | joining rabbitmq cluster\n  command: rabbitmqctl join_cluster \"rabbit@{{ hostvars[rabbitmq_master]['ansible_hostname'] }}\"\n  register: cluster_joined\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | starting rabbitmq app\n  command: rabbitmqctl start_app\n  become: true\n  when: inventory_hostname != rabbitmq_master\n\n- name: rabbitmq_clustering | marking as clustered # noqa 503\n  file:\n    path: /etc/rabbitmq/clustered\n    state: touch\n  become: true\n  when: >\n    cluster_master['changed'] or\n    cluster_joined['changed']\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile taskfile:tasks/rabbitmq_ha_config.yml", "name": "rabbitmq_ha_config.yml", "defined_in": "tasks/rabbitmq_ha_config.yml", "local_key": "taskfile taskfile:tasks/rabbitmq_ha_config.yml", "tasks": ["task taskfile:tasks/rabbitmq_ha_config.yml#task:[0]", "task taskfile:tasks/rabbitmq_ha_config.yml#task:[1]", "task taskfile:tasks/rabbitmq_ha_config.yml#task:[2]", "task taskfile:tasks/rabbitmq_ha_config.yml#task:[3]", "task taskfile:tasks/rabbitmq_ha_config.yml#task:[4]", "task taskfile:tasks/rabbitmq_ha_config.yml#task:[5]"], "role": "", "collection": "", "yaml_lines": "---\n- name: rabbitmq_ha_config | checking if rabbitmqadmin is installed\n  stat:\n    path: /usr/sbin/rabbitmqadmin\n  register: rabbitmqadmin_check\n\n- name: rabbit_ha_config | Installing rabbitMQ admin\n  get_url:\n    url: http://guest:guest@localhost:15672/cli/rabbitmqadmin\n    dest: /usr/sbin/rabbitmqadmin\n    mode: u=rwx,g=rw,o=rw\n  become: true\n  notify: restart rabbitmq-server\n  when: not rabbitmqadmin_check['stat']['exists']\n\n- name: rabbitmq_ha_config | creating exchange(s)\n  command: rabbitmqadmin declare exchange name={{ item['exchange_name'] }} type={{ item['type'] }} --vhost={{ item['vhost'] | default('/') }}\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  with_items: \"{{ rabbitmq_config }}\"\n  when: item['exchange_name'] is defined\n\n- name: rabbitmq_ha_config | creating queue(s)\n  command: rabbitmqadmin declare queue name={{ item['queue_name'] }} durable={{ item['durable']|lower }} --vhost={{ item['vhost'] | default('/') }}\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  when:\n    - item['queue_name'] is defined\n  with_items: \"{{ rabbitmq_config }}\"\n\n- name: rabbitmq_ha_config | setting up ha on queue(s)\n  rabbitmq_policy:\n    name: \"ha-all{{ policy_name }}\"\n    pattern: \"{{ item.queue_name | default(item.policy_pattern) }}\"\n    vhost: \"{{ item.vhost | default('/') }}\"\n    tags: \"{{ item.tags }}\"\n    state: present\n  vars:\n    policy_vhost: \"{{ item.vhost | default('/') }}\"\n    policy_name: \"{{ item.policy_pattern is defined | ternary(policy_vhost + item.policy_pattern|default(''),item.queue_name|default('')) }}\"\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  when: item.queue_name is defined or item.policy_pattern is defined\n  with_items: \"{{ rabbitmq_config }}\"\n\n- name: rabbitmq_ha_config | creating binding(s)\n  command: rabbitmqadmin declare binding source={{ item['exchange_name'] }} destination_type=\"queue\" destination={{ item['queue_name'] }} routing_key={{ item['routing_key'] }} --vhost={{ item['vhost'] | default('/') }} # noqa 204\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  with_items: \"{{ rabbitmq_config }}\"\n  when: item['exchange_name'] is defined\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile taskfile:tasks/rabbitmq_users.yml", "name": "rabbitmq_users.yml", "defined_in": "tasks/rabbitmq_users.yml", "local_key": "taskfile taskfile:tasks/rabbitmq_users.yml", "tasks": ["task taskfile:tasks/rabbitmq_users.yml#task:[0]", "task taskfile:tasks/rabbitmq_users.yml#task:[1]"], "role": "", "collection": "", "yaml_lines": "---\n- name: rabbitmq_users | creating rabbitmq users\n  rabbitmq_user:\n    name: \"{{ item['name'] }}\"\n    password: \"{{ item['password'] }}\"\n    vhost: \"{{ item['vhost']|default(omit) }}\"\n    configure_priv: \"{{ item['configure_priv']|default(omit) }}\"\n    read_priv: \"{{ item['read_priv']|default(omit) }}\"\n    write_priv: \"{{ item['write_priv']|default(omit) }}\"\n    tags: \"{{ item['tags']|default(omit) }}\"\n    permissions: \"{{ item['permissions']|default(omit) }}\"\n    state: present\n  become: true\n  with_items: \"{{ rabbitmq_users }}\"\n  when: >\n        (rabbitmq_enable_clustering is defined and\n          not rabbitmq_enable_clustering) or\n          rabbitmq_enable_clustering is not defined\n\n- name: rabbitmq_users | creating rabbitmq users\n  rabbitmq_user:\n    name: \"{{ item['name'] }}\"\n    password: \"{{ item['password'] }}\"\n    vhost: \"{{ item['vhost']|default(omit) }}\"\n    configure_priv: \"{{ item['configure_priv']|default(omit) }}\"\n    read_priv: \"{{ item['read_priv']|default(omit) }}\"\n    write_priv: \"{{ item['write_priv']|default(omit) }}\"\n    tags: \"{{ item['tags']|default(omit) }}\"\n    permissions: \"{{ item['permissions']|default(omit) }}\"\n    state: present\n  run_once: yes\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  with_items: \"{{ rabbitmq_users }}\"\n  when: >\n        rabbitmq_enable_clustering is defined and\n          rabbitmq_enable_clustering\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile taskfile:tasks/rabbitmq_vhosts.yml", "name": "rabbitmq_vhosts.yml", "defined_in": "tasks/rabbitmq_vhosts.yml", "local_key": "taskfile taskfile:tasks/rabbitmq_vhosts.yml", "tasks": ["task taskfile:tasks/rabbitmq_vhosts.yml#task:[0]", "task taskfile:tasks/rabbitmq_vhosts.yml#task:[1]", "task taskfile:tasks/rabbitmq_vhosts.yml#task:[2]"], "role": "", "collection": "", "yaml_lines": "---\n- name: rabbitmq_extra_vhosts | Create vhosts\n  rabbitmq_vhost:\n    name: \"{{ item['name'] }}\"\n    state: \"{{ item['state'] }}\"\n  with_items: \"{{ rabbitmq_extra_vhosts }}\"\n  run_once: \"{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}\"\n  register: rabbitmq_created_vhosts\n\n- name: rabbitmq_extra_vhosts | Check guest administrator is present # noqa 503\n  command: rabbitmqctl -q list_users\n  become: true\n  run_once: \"{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}\"\n  when: rabbitmq_created_vhosts.changed\n  changed_when: false\n  register: rabbitmq_existing_users\n\n- name: rabbitmq_extra_vhosts | Give access to new vhosts to guest administrator\n  command: \"rabbitmqctl -q set_permissions -p {{ item['name'] }} guest '.*' '.*' '.*'\"\n  become: true\n  run_once: \"{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}\"\n  with_items: \"{{ rabbitmq_created_vhosts.results|selectattr('changed')|list }}\"\n  when:\n    - item['state'] == 'present'\n    - rabbitmq_existing_users.stdout_lines | map('regex_search', '^guest\\\\s\\\\[.*administrator.*\\\\]$') | list | difference([None]) | length > 0\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile taskfile:tasks/redhat.yml", "name": "redhat.yml", "defined_in": "tasks/redhat.yml", "local_key": "taskfile taskfile:tasks/redhat.yml", "tasks": ["task taskfile:tasks/redhat.yml#task:[0]", "task taskfile:tasks/redhat.yml#task:[1]", "task taskfile:tasks/redhat.yml#task:[2]", "task taskfile:tasks/redhat.yml#task:[3]", "task taskfile:tasks/redhat.yml#task:[4]", "task taskfile:tasks/redhat.yml#task:[5]", "task taskfile:tasks/redhat.yml#task:[6]"], "role": "", "collection": "", "yaml_lines": "---\n- name: redhat | installing pre-reqs\n  yum:\n    name: ['epel-release', 'wget']\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: redhat | installing erlang\n  yum:\n    name: erlang\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: redhat | adding RabbitMQ public GPG key\n  rpm_key:\n    key: \"{{ rabbitmq_redhat_repo_key }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: redhat | downloading RabbitMQ\n  get_url:\n    url: \"{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}\"\n    dest: \"/opt/{{ rabbitmq_redhat_package }}\"\n  become: true\n\n- name: redhat | installing RabbitMQ\n  yum:\n    name: \"/opt/{{ rabbitmq_redhat_package }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n\n- name: redhat | starting and enabling RabbitMQ service\n  service:\n    name: rabbitmq-server\n    state: started\n    enabled: yes\n  become: true\n\n- name: redhat | enabling the RabbitMQ Management Console\n  rabbitmq_plugin:\n    names: rabbitmq_management\n    state: enabled\n  notify: restart rabbitmq-server\n  become: true\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}], "modules": [], "playbooks": [{"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbook.yml", "name": "playbook.yml", "defined_in": "playbook.yml", "local_key": "playbook playbook:playbook.yml", "yaml_lines": "---\n- name: Example Playbook\n  hosts: all\n  tasks:\n    - name: Include ansible-rabbitmq\n      include_role:\n        name: ansible-rabbitmq\n", "role": "", "collection": "", "plays": ["play playbook:playbook.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:molecule/ubuntu1804/verify.yml", "name": "verify.yml", "defined_in": "molecule/ubuntu1804/verify.yml", "local_key": "playbook playbook:molecule/ubuntu1804/verify.yml", "yaml_lines": "---\n# This is an example playbook to execute Ansible tests.\n\n- name: Verify\n  hosts: all\n  tasks:\n  - name: Example assertion\n    assert:\n      that: true\n", "role": "", "collection": "", "plays": ["play playbook:molecule/ubuntu1804/verify.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:molecule/ubuntu1604/verify.yml", "name": "verify.yml", "defined_in": "molecule/ubuntu1604/verify.yml", "local_key": "playbook playbook:molecule/ubuntu1604/verify.yml", "yaml_lines": "---\n# This is an example playbook to execute Ansible tests.\n\n- name: Verify\n  hosts: all\n  tasks:\n  - name: Example assertion\n    assert:\n      that: true\n", "role": "", "collection": "", "plays": ["play playbook:molecule/ubuntu1604/verify.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:molecule/ubuntu2004/verify.yml", "name": "verify.yml", "defined_in": "molecule/ubuntu2004/verify.yml", "local_key": "playbook playbook:molecule/ubuntu2004/verify.yml", "yaml_lines": "---\n# This is an example playbook to execute Ansible tests.\n\n- name: Verify\n  hosts: all\n  tasks:\n  - name: Example assertion\n    assert:\n      that: true\n", "role": "", "collection": "", "plays": ["play playbook:molecule/ubuntu2004/verify.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:molecule/ubuntu2004/converge.yml", "name": "converge.yml", "defined_in": "molecule/ubuntu2004/converge.yml", "local_key": "playbook playbook:molecule/ubuntu2004/converge.yml", "yaml_lines": "---\n- name: Converge\n  hosts: all\n  vars:\n    rabbitmq_debian_version_defined: false\n    rabbitmq_debian_repo: \"deb https://dl.bintray.com/rabbitmq-erlang/debian {{ ansible_distribution_release }} erlang-22.x\"\n  tasks:\n    - name: Include ansible-rabbitmq\n      include_role:\n        name: ansible-rabbitmq\n", "role": "", "collection": "", "plays": ["play playbook:molecule/ubuntu2004/converge.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:molecule/debian10/verify.yml", "name": "verify.yml", "defined_in": "molecule/debian10/verify.yml", "local_key": "playbook playbook:molecule/debian10/verify.yml", "yaml_lines": "---\n# This is an example playbook to execute Ansible tests.\n\n- name: Verify\n  hosts: all\n  tasks:\n  - name: Example assertion\n    assert:\n      that: true\n", "role": "", "collection": "", "plays": ["play playbook:molecule/debian10/verify.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:molecule/shared/verify.yml", "name": "verify.yml", "defined_in": "molecule/shared/verify.yml", "local_key": "playbook playbook:molecule/shared/verify.yml", "yaml_lines": "---\n# This is an example playbook to execute Ansible tests.\n\n- name: Verify\n  hosts: all\n  tasks:\n  - name: Example assertion\n    assert:\n      that: true\n", "role": "", "collection": "", "plays": ["play playbook:molecule/shared/verify.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:molecule/shared/converge.yml", "name": "converge.yml", "defined_in": "molecule/shared/converge.yml", "local_key": "playbook playbook:molecule/shared/converge.yml", "yaml_lines": "---\n- name: Converge\n  hosts: all\n  tasks:\n    - name: Include ansible-rabbitmq\n      include_role:\n        name: ansible-rabbitmq\n", "role": "", "collection": "", "plays": ["play playbook:molecule/shared/converge.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:molecule/fedora/verify.yml", "name": "verify.yml", "defined_in": "molecule/fedora/verify.yml", "local_key": "playbook playbook:molecule/fedora/verify.yml", "yaml_lines": "---\n# This is an example playbook to execute Ansible tests.\n\n- name: Verify\n  hosts: all\n  tasks:\n  - name: Example assertion\n    assert:\n      that: true\n", "role": "", "collection": "", "plays": ["play playbook:molecule/fedora/verify.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:molecule/debian9/verify.yml", "name": "verify.yml", "defined_in": "molecule/debian9/verify.yml", "local_key": "playbook playbook:molecule/debian9/verify.yml", "yaml_lines": "---\n# This is an example playbook to execute Ansible tests.\n\n- name: Verify\n  hosts: all\n  tasks:\n  - name: Example assertion\n    assert:\n      that: true\n", "role": "", "collection": "", "plays": ["play playbook:molecule/debian9/verify.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:molecule/centos7/verify.yml", "name": "verify.yml", "defined_in": "molecule/centos7/verify.yml", "local_key": "playbook playbook:molecule/centos7/verify.yml", "yaml_lines": "---\n# This is an example playbook to execute Ansible tests.\n\n- name: Verify\n  hosts: all\n  tasks:\n  - name: Example assertion\n    assert:\n      that: true\n", "role": "", "collection": "", "plays": ["play playbook:molecule/centos7/verify.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:molecule/debian8/verify.yml", "name": "verify.yml", "defined_in": "molecule/debian8/verify.yml", "local_key": "playbook playbook:molecule/debian8/verify.yml", "yaml_lines": "---\n# This is an example playbook to execute Ansible tests.\n\n- name: Verify\n  hosts: all\n  tasks:\n  - name: Example assertion\n    assert:\n      that: true\n", "role": "", "collection": "", "plays": ["play playbook:molecule/debian8/verify.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:molecule/centos8/verify.yml", "name": "verify.yml", "defined_in": "molecule/centos8/verify.yml", "local_key": "playbook playbook:molecule/centos8/verify.yml", "yaml_lines": "---\n# This is an example playbook to execute Ansible tests.\n\n- name: Verify\n  hosts: all\n  tasks:\n  - name: Example assertion\n    assert:\n      that: true\n", "role": "", "collection": "", "plays": ["play playbook:molecule/centos8/verify.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbook.yml", "name": "playbook.yml", "defined_in": "playbook.yml", "local_key": "playbook playbook:playbook.yml", "yaml_lines": "---\n- name: Example Playbook\n  hosts: all\n  tasks:\n    - name: Include ansible-rabbitmq\n      include_role:\n        name: ansible-rabbitmq\n", "role": "", "collection": "", "plays": ["play playbook:playbook.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}], "plays": [{"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbook.yml#play:[0]", "name": "Example Playbook", "defined_in": "playbook.yml", "index": 0, "local_key": "play playbook:playbook.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbook.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all"}, "collections_in_play": [], "become": null, "variables": {}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:molecule/ubuntu1804/verify.yml#play:[0]", "name": "Verify", "defined_in": "molecule/ubuntu1804/verify.yml", "index": 0, "local_key": "play playbook:molecule/ubuntu1804/verify.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:molecule/ubuntu1804/verify.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all"}, "collections_in_play": [], "become": null, "variables": {}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:molecule/ubuntu1604/verify.yml#play:[0]", "name": "Verify", "defined_in": "molecule/ubuntu1604/verify.yml", "index": 0, "local_key": "play playbook:molecule/ubuntu1604/verify.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:molecule/ubuntu1604/verify.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all"}, "collections_in_play": [], "become": null, "variables": {}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:molecule/ubuntu2004/verify.yml#play:[0]", "name": "Verify", "defined_in": "molecule/ubuntu2004/verify.yml", "index": 0, "local_key": "play playbook:molecule/ubuntu2004/verify.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:molecule/ubuntu2004/verify.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all"}, "collections_in_play": [], "become": null, "variables": {}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:molecule/ubuntu2004/converge.yml#play:[0]", "name": "Converge", "defined_in": "molecule/ubuntu2004/converge.yml", "index": 0, "local_key": "play playbook:molecule/ubuntu2004/converge.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:molecule/ubuntu2004/converge.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all"}, "collections_in_play": [], "become": null, "variables": {"rabbitmq_debian_version_defined": false, "rabbitmq_debian_repo": "deb https://dl.bintray.com/rabbitmq-erlang/debian {{ ansible_distribution_release }} erlang-22.x"}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:molecule/debian10/verify.yml#play:[0]", "name": "Verify", "defined_in": "molecule/debian10/verify.yml", "index": 0, "local_key": "play playbook:molecule/debian10/verify.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:molecule/debian10/verify.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all"}, "collections_in_play": [], "become": null, "variables": {}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:molecule/shared/verify.yml#play:[0]", "name": "Verify", "defined_in": "molecule/shared/verify.yml", "index": 0, "local_key": "play playbook:molecule/shared/verify.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:molecule/shared/verify.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all"}, "collections_in_play": [], "become": null, "variables": {}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:molecule/shared/converge.yml#play:[0]", "name": "Converge", "defined_in": "molecule/shared/converge.yml", "index": 0, "local_key": "play playbook:molecule/shared/converge.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:molecule/shared/converge.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all"}, "collections_in_play": [], "become": null, "variables": {}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:molecule/fedora/verify.yml#play:[0]", "name": "Verify", "defined_in": "molecule/fedora/verify.yml", "index": 0, "local_key": "play playbook:molecule/fedora/verify.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:molecule/fedora/verify.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all"}, "collections_in_play": [], "become": null, "variables": {}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:molecule/debian9/verify.yml#play:[0]", "name": "Verify", "defined_in": "molecule/debian9/verify.yml", "index": 0, "local_key": "play playbook:molecule/debian9/verify.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:molecule/debian9/verify.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all"}, "collections_in_play": [], "become": null, "variables": {}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:molecule/centos7/verify.yml#play:[0]", "name": "Verify", "defined_in": "molecule/centos7/verify.yml", "index": 0, "local_key": "play playbook:molecule/centos7/verify.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:molecule/centos7/verify.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all"}, "collections_in_play": [], "become": null, "variables": {}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:molecule/debian8/verify.yml#play:[0]", "name": "Verify", "defined_in": "molecule/debian8/verify.yml", "index": 0, "local_key": "play playbook:molecule/debian8/verify.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:molecule/debian8/verify.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all"}, "collections_in_play": [], "become": null, "variables": {}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:molecule/centos8/verify.yml#play:[0]", "name": "Verify", "defined_in": "molecule/centos8/verify.yml", "index": 0, "local_key": "play playbook:molecule/centos8/verify.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:molecule/centos8/verify.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all"}, "collections_in_play": [], "become": null, "variables": {}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbook.yml#play:[0]", "name": "Example Playbook", "defined_in": "playbook.yml", "index": 0, "local_key": "play playbook:playbook.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbook.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all"}, "collections_in_play": [], "become": null, "variables": {}}], "tasks": [{"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[0]", "name": "redhat | installing pre-reqs", "module": "yum", "index": 0, "play_index": -1, "defined_in": "tasks/redhat.yml", "local_key": "task taskfile:tasks/redhat.yml#task:[0]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "redhat | installing pre-reqs", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": ["epel-release", "wget"], "state": "present"}, "executable": "yum", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: redhat | installing pre-reqs\n  yum:\n    name: ['epel-release', 'wget']\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [2, 9], "resolved_name": "ansible.builtin.yum", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.yum", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.yum", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_downgrade", "autoremove", "bugfix", "cacheonly", "conf_file", "disable_excludes", "disable_gpg_check", "disable_plugin", "disablerepo", "download_dir", "download_only", "enable_plugin", "enablerepo", "exclude", "install_repoquery", "install_weak_deps", "installroot", "list", "lock_timeout", "name", "pkg", "releasever", "security", "skip_broken", "sslverify", "state", "update_cache", "expire-cache", "update_only", "use_backend", "validate_certs"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)", "NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells yum to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote yum configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in YUM config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in yum.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If repoquery is not available, install yum-utils. If the system is registered to RHN or an RHN Satellite, repoquery allows for querying all channels assigned to the system. It is also required to use the 'list' parameter.", "NOTE: This will run and be logged as a separate yum transation which takes place before any other installation or removal.", "NOTE: This will use the system's default enabled repositories without regard for disablerepo/enablerepo given to the module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation.", "NOTE: This feature requires yum >= 4 (RHEL/CentOS 8+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Package name to run the equivalent of C(yum list --show-duplicates <package>) against. In addition to listing packages, use can also list the following: C(installed), C(updates), C(available) and C(repos).", "This parameter is mutually exclusive with I(name)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the yum lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A package name or package specifier with version, like C(name-1.0).", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name>=1.0)", "If a previous version is specified, the task also needs to turn C(allow_downgrade) on. See the C(allow_downgrade) documentation for caveats with downgrading packages.", "When using state=latest, this can be C('*') which means run C(yum -y update).", "You can also pass a url or a local path to a rpm file (using state=present). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.", "C(present) and C(installed) will simply ensure that a desired package is installed.", "C(latest) will update the specified package if it's not of the latest available version.", "C(absent) and C(removed) will remove the specified package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "installed", "latest", "present", "removed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_backend", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the \"new yum\" and it has an C(dnf) backend.", "By default, this module will select the backend based on the C(ansible_pkg_mgr) fact."], "choices": ["auto", "yum", "yum4", "dnf"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.", "Prior to 2.1 the code worked as if this was set to C(true)."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)", "NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells yum to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote yum configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in YUM config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in yum.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If repoquery is not available, install yum-utils. If the system is registered to RHN or an RHN Satellite, repoquery allows for querying all channels assigned to the system. It is also required to use the 'list' parameter.", "NOTE: This will run and be logged as a separate yum transation which takes place before any other installation or removal.", "NOTE: This will use the system's default enabled repositories without regard for disablerepo/enablerepo given to the module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation.", "NOTE: This feature requires yum >= 4 (RHEL/CentOS 8+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Package name to run the equivalent of C(yum list --show-duplicates <package>) against. In addition to listing packages, use can also list the following: C(installed), C(updates), C(available) and C(repos).", "This parameter is mutually exclusive with I(name)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the yum lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A package name or package specifier with version, like C(name-1.0).", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name>=1.0)", "If a previous version is specified, the task also needs to turn C(allow_downgrade) on. See the C(allow_downgrade) documentation for caveats with downgrading packages.", "When using state=latest, this can be C('*') which means run C(yum -y update).", "You can also pass a url or a local path to a rpm file (using state=present). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.", "C(present) and C(installed) will simply ensure that a desired package is installed.", "C(latest) will update the specified package if it's not of the latest available version.", "C(absent) and C(removed) will remove the specified package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "installed", "latest", "present", "removed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_backend", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the \"new yum\" and it has an C(dnf) backend.", "By default, this module will select the backend based on the C(ansible_pkg_mgr) fact."], "choices": ["auto", "yum", "yum4", "dnf"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.", "Prior to 2.1 the code worked as if this was set to C(true)."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[1]", "name": "redhat | installing erlang", "module": "yum", "index": 1, "play_index": -1, "defined_in": "tasks/redhat.yml", "local_key": "task taskfile:tasks/redhat.yml#task:[1]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "redhat | installing erlang", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": "erlang", "state": "present"}, "executable": "yum", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: redhat | installing erlang\n  yum:\n    name: erlang\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [10, 17], "resolved_name": "ansible.builtin.yum", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.yum", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.yum", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_downgrade", "autoremove", "bugfix", "cacheonly", "conf_file", "disable_excludes", "disable_gpg_check", "disable_plugin", "disablerepo", "download_dir", "download_only", "enable_plugin", "enablerepo", "exclude", "install_repoquery", "install_weak_deps", "installroot", "list", "lock_timeout", "name", "pkg", "releasever", "security", "skip_broken", "sslverify", "state", "update_cache", "expire-cache", "update_only", "use_backend", "validate_certs"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)", "NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells yum to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote yum configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in YUM config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in yum.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If repoquery is not available, install yum-utils. If the system is registered to RHN or an RHN Satellite, repoquery allows for querying all channels assigned to the system. It is also required to use the 'list' parameter.", "NOTE: This will run and be logged as a separate yum transation which takes place before any other installation or removal.", "NOTE: This will use the system's default enabled repositories without regard for disablerepo/enablerepo given to the module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation.", "NOTE: This feature requires yum >= 4 (RHEL/CentOS 8+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Package name to run the equivalent of C(yum list --show-duplicates <package>) against. In addition to listing packages, use can also list the following: C(installed), C(updates), C(available) and C(repos).", "This parameter is mutually exclusive with I(name)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the yum lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A package name or package specifier with version, like C(name-1.0).", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name>=1.0)", "If a previous version is specified, the task also needs to turn C(allow_downgrade) on. See the C(allow_downgrade) documentation for caveats with downgrading packages.", "When using state=latest, this can be C('*') which means run C(yum -y update).", "You can also pass a url or a local path to a rpm file (using state=present). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.", "C(present) and C(installed) will simply ensure that a desired package is installed.", "C(latest) will update the specified package if it's not of the latest available version.", "C(absent) and C(removed) will remove the specified package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "installed", "latest", "present", "removed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_backend", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the \"new yum\" and it has an C(dnf) backend.", "By default, this module will select the backend based on the C(ansible_pkg_mgr) fact."], "choices": ["auto", "yum", "yum4", "dnf"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.", "Prior to 2.1 the code worked as if this was set to C(true)."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)", "NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells yum to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote yum configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in YUM config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in yum.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If repoquery is not available, install yum-utils. If the system is registered to RHN or an RHN Satellite, repoquery allows for querying all channels assigned to the system. It is also required to use the 'list' parameter.", "NOTE: This will run and be logged as a separate yum transation which takes place before any other installation or removal.", "NOTE: This will use the system's default enabled repositories without regard for disablerepo/enablerepo given to the module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation.", "NOTE: This feature requires yum >= 4 (RHEL/CentOS 8+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Package name to run the equivalent of C(yum list --show-duplicates <package>) against. In addition to listing packages, use can also list the following: C(installed), C(updates), C(available) and C(repos).", "This parameter is mutually exclusive with I(name)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the yum lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A package name or package specifier with version, like C(name-1.0).", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name>=1.0)", "If a previous version is specified, the task also needs to turn C(allow_downgrade) on. See the C(allow_downgrade) documentation for caveats with downgrading packages.", "When using state=latest, this can be C('*') which means run C(yum -y update).", "You can also pass a url or a local path to a rpm file (using state=present). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.", "C(present) and C(installed) will simply ensure that a desired package is installed.", "C(latest) will update the specified package if it's not of the latest available version.", "C(absent) and C(removed) will remove the specified package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "installed", "latest", "present", "removed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_backend", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the \"new yum\" and it has an C(dnf) backend.", "By default, this module will select the backend based on the C(ansible_pkg_mgr) fact."], "choices": ["auto", "yum", "yum4", "dnf"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.", "Prior to 2.1 the code worked as if this was set to C(true)."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[2]", "name": "redhat | adding RabbitMQ public GPG key", "module": "rpm_key", "index": 2, "play_index": -1, "defined_in": "tasks/redhat.yml", "local_key": "task taskfile:tasks/redhat.yml#task:[2]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "redhat | adding RabbitMQ public GPG key", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"key": "{{ rabbitmq_redhat_repo_key }}", "state": "present"}, "executable": "rpm_key", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: redhat | adding RabbitMQ public GPG key\n  rpm_key:\n    key: \"{{ rabbitmq_redhat_repo_key }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [18, 25], "resolved_name": "ansible.builtin.rpm_key", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.rpm_key", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.rpm_key", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["fingerprint", "key", "state", "validate_certs"], "required_arg_keys": [{"key": "key", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fingerprint", "type": "str", "elements": "", "default": null, "required": false, "description": ["The long-form fingerprint of the key being imported.", "This will be used to verify the specified key."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "key", "type": "str", "elements": "", "default": null, "required": true, "description": ["Key that will be modified. Can be a url, a file on the managed node, or a keyid if the key already exists in the database."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["If the key will be imported or removed from the rpm db."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false) and the C(key) is a url starting with https, SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fingerprint", "type": "str", "elements": "", "default": null, "required": false, "description": ["The long-form fingerprint of the key being imported.", "This will be used to verify the specified key."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "key", "type": "str", "elements": "", "default": null, "required": true, "description": ["Key that will be modified. Can be a url, a file on the managed node, or a keyid if the key already exists in the database."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["If the key will be imported or removed from the rpm db."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false) and the C(key) is a url starting with https, SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": ["rabbitmq_redhat_repo_key"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[3]", "name": "redhat | downloading RabbitMQ", "module": "get_url", "index": 3, "play_index": -1, "defined_in": "tasks/redhat.yml", "local_key": "task taskfile:tasks/redhat.yml#task:[3]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "redhat | downloading RabbitMQ", "become": true}, "module_options": {"url": "{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}", "dest": "/opt/{{ rabbitmq_redhat_package }}"}, "executable": "get_url", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: redhat | downloading RabbitMQ\n  get_url:\n    url: \"{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}\"\n    dest: \"/opt/{{ rabbitmq_redhat_package }}\"\n  become: true\n", "line_num_in_file": [26, 31], "resolved_name": "ansible.builtin.get_url", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.get_url", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.get_url", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "ciphers", "client_cert", "client_key", "decompress", "dest", "force", "force_basic_auth", "group", "headers", "http_agent", "mode", "owner", "selevel", "serole", "setype", "seuser", "timeout", "tmp_dest", "unredirected_headers", "unsafe_writes", "url", "url_password", "password", "url_username", "username", "use_gssapi", "use_netrc", "use_proxy", "validate_certs"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "url", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum", "type": "str", "elements": "", "default": "", "required": false, "description": ["If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum|url>, e.g. checksum=\"sha256:D98291AC[...]B6DC7B97\", checksum=\"sha256:http://example.com/path/sha256sum.txt\"", "If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.", "The third party hashlib library can be installed for access to additional algorithms.", "Additionally, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the I(destination_checksum) would be calculated, and if checksum equals I(destination_checksum), the file download would be skipped (unless C(force) is true). If the checksum does not equal I(destination_checksum), the destination file is deleted."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "ciphers", "type": "list", "elements": "str", "default": null, "required": false, "description": ["SSL/TLS Ciphers to use for the request", "When a list is provided, all ciphers are joined in order with C(:)", "See the L(OpenSSL Cipher List Format,https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT) for more details.", "The available ciphers is dependent on the Python and OpenSSL/LibreSSL versions"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_cert", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted certificate chain file to be used for SSL client authentication.", "This file can also include the key as well, and if the key is included, C(client_key) is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_key", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted file that contains your private key to be used for SSL client authentication.", "If C(client_cert) contains both the certificate and key, this option is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "decompress", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to attempt to decompress gzip content-encoded responses"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Absolute path of where to download the file to.", "If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect.", "If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) and C(checksum) option), but replaced only if the contents changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["If C(true) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(false), the file will only be downloaded if the destination does not exist. Generally should be C(true) only for small local files.", "Prior to 0.6, this module behaved as if C(true) was the default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_basic_auth", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the sending of the Basic authentication header upon initial request.", "httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "headers", "type": "dict", "elements": "", "default": null, "required": false, "description": ["Add custom HTTP headers to a request in hash/dict format.", "The hash/dict format was added in Ansible 2.6.", "Previous versions used a C(\"key:value,key:value\") string format.", "The C(\"key:value,key:value\") string format is deprecated and has been removed in version 2.10."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "http_agent", "type": "str", "elements": "", "default": "ansible-httpget", "required": false, "description": ["Header to identify as, generally appears in web server logs."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "timeout", "type": "int", "elements": "", "default": 10, "required": false, "description": ["Timeout in seconds for URL request."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tmp_dest", "type": "str", "elements": "", "default": null, "required": false, "description": ["Absolute path of where temporary file is downloaded to.", "When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting", "When run on Ansible prior to 2.5, it defaults to C(TMPDIR), C(TEMP) or C(TMP) env variables or a platform specific value.", "U(https://docs.python.org/3/library/tempfile.html#tempfile.tempdir)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unredirected_headers", "type": "list", "elements": "str", "default": [], "required": false, "description": ["A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": true, "description": ["HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_password", "type": "str", "elements": "", "default": null, "required": false, "description": ["The password for use in HTTP basic authentication.", "If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.", "Since version 2.8 you can also use the 'password' alias for this option."], "choices": null, "aliases": ["password"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_username", "type": "str", "elements": "", "default": null, "required": false, "description": ["The username for use in HTTP basic authentication.", "This parameter can be used without C(url_password) for sites that allow empty passwords.", "Since version 2.8 you can also use the C(username) alias for this option."], "choices": null, "aliases": ["username"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_gssapi", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.", "Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.", "Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.", "NTLM authentication is I(not) supported even if the GSSAPI mech for NTLM has been installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_netrc", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determining whether to use credentials from ``~/.netrc`` file", "By default .netrc is used with Basic authentication headers", "When set to False, .netrc credentials are ignored"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_proxy", "type": "bool", "elements": "", "default": true, "required": false, "description": ["if C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If C(false), SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum", "type": "str", "elements": "", "default": "", "required": false, "description": ["If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum|url>, e.g. checksum=\"sha256:D98291AC[...]B6DC7B97\", checksum=\"sha256:http://example.com/path/sha256sum.txt\"", "If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.", "The third party hashlib library can be installed for access to additional algorithms.", "Additionally, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the I(destination_checksum) would be calculated, and if checksum equals I(destination_checksum), the file download would be skipped (unless C(force) is true). If the checksum does not equal I(destination_checksum), the destination file is deleted."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "ciphers", "type": "list", "elements": "str", "default": null, "required": false, "description": ["SSL/TLS Ciphers to use for the request", "When a list is provided, all ciphers are joined in order with C(:)", "See the L(OpenSSL Cipher List Format,https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT) for more details.", "The available ciphers is dependent on the Python and OpenSSL/LibreSSL versions"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_cert", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted certificate chain file to be used for SSL client authentication.", "This file can also include the key as well, and if the key is included, C(client_key) is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_key", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted file that contains your private key to be used for SSL client authentication.", "If C(client_cert) contains both the certificate and key, this option is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "decompress", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to attempt to decompress gzip content-encoded responses"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Absolute path of where to download the file to.", "If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect.", "If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) and C(checksum) option), but replaced only if the contents changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["If C(true) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(false), the file will only be downloaded if the destination does not exist. Generally should be C(true) only for small local files.", "Prior to 0.6, this module behaved as if C(true) was the default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_basic_auth", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the sending of the Basic authentication header upon initial request.", "httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "headers", "type": "dict", "elements": "", "default": null, "required": false, "description": ["Add custom HTTP headers to a request in hash/dict format.", "The hash/dict format was added in Ansible 2.6.", "Previous versions used a C(\"key:value,key:value\") string format.", "The C(\"key:value,key:value\") string format is deprecated and has been removed in version 2.10."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "http_agent", "type": "str", "elements": "", "default": "ansible-httpget", "required": false, "description": ["Header to identify as, generally appears in web server logs."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "timeout", "type": "int", "elements": "", "default": 10, "required": false, "description": ["Timeout in seconds for URL request."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tmp_dest", "type": "str", "elements": "", "default": null, "required": false, "description": ["Absolute path of where temporary file is downloaded to.", "When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting", "When run on Ansible prior to 2.5, it defaults to C(TMPDIR), C(TEMP) or C(TMP) env variables or a platform specific value.", "U(https://docs.python.org/3/library/tempfile.html#tempfile.tempdir)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unredirected_headers", "type": "list", "elements": "str", "default": [], "required": false, "description": ["A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": true, "description": ["HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_password", "type": "str", "elements": "", "default": null, "required": false, "description": ["The password for use in HTTP basic authentication.", "If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.", "Since version 2.8 you can also use the 'password' alias for this option."], "choices": null, "aliases": ["password"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_username", "type": "str", "elements": "", "default": null, "required": false, "description": ["The username for use in HTTP basic authentication.", "This parameter can be used without C(url_password) for sites that allow empty passwords.", "Since version 2.8 you can also use the C(username) alias for this option."], "choices": null, "aliases": ["username"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_gssapi", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.", "Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.", "Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.", "NTLM authentication is I(not) supported even if the GSSAPI mech for NTLM has been installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_netrc", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determining whether to use credentials from ``~/.netrc`` file", "By default .netrc is used with Basic authentication headers", "When set to False, .netrc credentials are ignored"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_proxy", "type": "bool", "elements": "", "default": true, "required": false, "description": ["if C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If C(false), SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "url", "expected_type": "str", "unknown_type_value": "https://dl.bintray.com/rabbitmq/rpm/rabbitmq-server/v3.8.x/el/{{ ansible_distribution_major_version }}/noarch/rabbitmq-server-3.8.11-1.el{{ ansible_distribution_major_version }}.noarch.rpm"}, {"key": "dest", "expected_type": "str", "unknown_type_value": "/opt/rabbitmq-server-3.8.11-1.el{{ ansible_distribution_major_version }}.noarch.rpm"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": ["rabbitmq_redhat_url", "rabbitmq_redhat_package"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[4]", "name": "redhat | installing RabbitMQ", "module": "yum", "index": 4, "play_index": -1, "defined_in": "tasks/redhat.yml", "local_key": "task taskfile:tasks/redhat.yml#task:[4]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[4]"}, "set_facts": {}, "loop": {}, "options": {"name": "redhat | installing RabbitMQ", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": "/opt/{{ rabbitmq_redhat_package }}", "state": "present"}, "executable": "yum", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: redhat | installing RabbitMQ\n  yum:\n    name: \"/opt/{{ rabbitmq_redhat_package }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [32, 39], "resolved_name": "ansible.builtin.yum", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.yum", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.yum", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_downgrade", "autoremove", "bugfix", "cacheonly", "conf_file", "disable_excludes", "disable_gpg_check", "disable_plugin", "disablerepo", "download_dir", "download_only", "enable_plugin", "enablerepo", "exclude", "install_repoquery", "install_weak_deps", "installroot", "list", "lock_timeout", "name", "pkg", "releasever", "security", "skip_broken", "sslverify", "state", "update_cache", "expire-cache", "update_only", "use_backend", "validate_certs"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)", "NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells yum to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote yum configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in YUM config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in yum.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If repoquery is not available, install yum-utils. If the system is registered to RHN or an RHN Satellite, repoquery allows for querying all channels assigned to the system. It is also required to use the 'list' parameter.", "NOTE: This will run and be logged as a separate yum transation which takes place before any other installation or removal.", "NOTE: This will use the system's default enabled repositories without regard for disablerepo/enablerepo given to the module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation.", "NOTE: This feature requires yum >= 4 (RHEL/CentOS 8+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Package name to run the equivalent of C(yum list --show-duplicates <package>) against. In addition to listing packages, use can also list the following: C(installed), C(updates), C(available) and C(repos).", "This parameter is mutually exclusive with I(name)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the yum lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A package name or package specifier with version, like C(name-1.0).", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name>=1.0)", "If a previous version is specified, the task also needs to turn C(allow_downgrade) on. See the C(allow_downgrade) documentation for caveats with downgrading packages.", "When using state=latest, this can be C('*') which means run C(yum -y update).", "You can also pass a url or a local path to a rpm file (using state=present). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.", "C(present) and C(installed) will simply ensure that a desired package is installed.", "C(latest) will update the specified package if it's not of the latest available version.", "C(absent) and C(removed) will remove the specified package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "installed", "latest", "present", "removed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_backend", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the \"new yum\" and it has an C(dnf) backend.", "By default, this module will select the backend based on the C(ansible_pkg_mgr) fact."], "choices": ["auto", "yum", "yum4", "dnf"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.", "Prior to 2.1 the code worked as if this was set to C(true)."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)", "NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells yum to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote yum configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in YUM config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in yum.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If repoquery is not available, install yum-utils. If the system is registered to RHN or an RHN Satellite, repoquery allows for querying all channels assigned to the system. It is also required to use the 'list' parameter.", "NOTE: This will run and be logged as a separate yum transation which takes place before any other installation or removal.", "NOTE: This will use the system's default enabled repositories without regard for disablerepo/enablerepo given to the module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation.", "NOTE: This feature requires yum >= 4 (RHEL/CentOS 8+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Package name to run the equivalent of C(yum list --show-duplicates <package>) against. In addition to listing packages, use can also list the following: C(installed), C(updates), C(available) and C(repos).", "This parameter is mutually exclusive with I(name)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the yum lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A package name or package specifier with version, like C(name-1.0).", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name>=1.0)", "If a previous version is specified, the task also needs to turn C(allow_downgrade) on. See the C(allow_downgrade) documentation for caveats with downgrading packages.", "When using state=latest, this can be C('*') which means run C(yum -y update).", "You can also pass a url or a local path to a rpm file (using state=present). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.", "C(present) and C(installed) will simply ensure that a desired package is installed.", "C(latest) will update the specified package if it's not of the latest available version.", "C(absent) and C(removed) will remove the specified package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "installed", "latest", "present", "removed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_backend", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the \"new yum\" and it has an C(dnf) backend.", "By default, this module will select the backend based on the C(ansible_pkg_mgr) fact."], "choices": ["auto", "yum", "yum4", "dnf"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.", "Prior to 2.1 the code worked as if this was set to C(true)."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "name", "expected_type": "list", "unknown_type_value": "/opt/rabbitmq-server-3.8.11-1.el{{ ansible_distribution_major_version }}.noarch.rpm"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": ["rabbitmq_redhat_package"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[5]", "name": "redhat | starting and enabling RabbitMQ service", "module": "service", "index": 5, "play_index": -1, "defined_in": "tasks/redhat.yml", "local_key": "task taskfile:tasks/redhat.yml#task:[5]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "redhat | starting and enabling RabbitMQ service", "become": true}, "module_options": {"name": "rabbitmq-server", "state": "started", "enabled": true}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: redhat | starting and enabling RabbitMQ service\n  service:\n    name: rabbitmq-server\n    state: started\n    enabled: yes\n  become: true\n", "line_num_in_file": [40, 46], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/redhat.yml#task:[6]", "name": "redhat | enabling the RabbitMQ Management Console", "module": "rabbitmq_plugin", "index": 6, "play_index": -1, "defined_in": "tasks/redhat.yml", "local_key": "task taskfile:tasks/redhat.yml#task:[6]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "redhat | enabling the RabbitMQ Management Console", "notify": "restart rabbitmq-server", "become": true}, "module_options": {"names": "rabbitmq_management", "state": "enabled"}, "executable": "rabbitmq_plugin", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: redhat | enabling the RabbitMQ Management Console\n  rabbitmq_plugin:\n    names: rabbitmq_management\n    state: enabled\n  notify: restart rabbitmq-server\n  become: true", "line_num_in_file": [47, 53], "resolved_name": "", "possible_candidates": [{"py/tuple": ["community.rabbitmq.rabbitmq_plugin", {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}]}], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "community.rabbitmq.rabbitmq_plugin", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": ["community.rabbitmq.rabbitmq_plugin"], "suggested_dependency": [{"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["broker_state", "names", "name", "new_only", "prefix", "state"], "required_arg_keys": [{"key": "names", "aliases": ["name"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "broker_state", "type": "str", "elements": "", "default": "online", "required": false, "description": ["Specify whether the broker should be online or offline for the plugin change."], "choices": ["online", "offline"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "names", "type": "str", "elements": "", "default": null, "required": true, "description": ["Comma-separated list of plugin names. Also, accepts plugin name."], "choices": null, "aliases": ["name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "new_only", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Only enable missing plugins.", "Does not disable plugins that are not in the names list."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "prefix", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specify a custom install prefix to a Rabbit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "enabled", "required": false, "description": ["Specify if plugins are to be enabled or disabled."], "choices": ["enabled", "disabled"], "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "broker_state", "type": "str", "elements": "", "default": "online", "required": false, "description": ["Specify whether the broker should be online or offline for the plugin change."], "choices": ["online", "offline"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "names", "type": "str", "elements": "", "default": null, "required": true, "description": ["Comma-separated list of plugin names. Also, accepts plugin name."], "choices": null, "aliases": ["name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "new_only", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Only enable missing plugins.", "Does not disable plugins that are not in the names list."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "prefix", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specify a custom install prefix to a Rabbit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "enabled", "required": false, "description": ["Specify if plugins are to be enabled or disabled."], "choices": ["enabled", "disabled"], "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_users.yml#task:[0]", "name": "rabbitmq_users | creating rabbitmq users", "module": "rabbitmq_user", "index": 0, "play_index": -1, "defined_in": "tasks/rabbitmq_users.yml", "local_key": "task taskfile:tasks/rabbitmq_users.yml#task:[0]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_users }}"}, "options": {"name": "rabbitmq_users | creating rabbitmq users", "become": true, "with_items": "{{ rabbitmq_users }}", "when": "(rabbitmq_enable_clustering is defined and\n  not rabbitmq_enable_clustering) or\n  rabbitmq_enable_clustering is not defined\n"}, "module_options": {"name": "{{ item['name'] }}", "password": "{{ item['password'] }}", "vhost": "{{ item['vhost']|default(omit) }}", "configure_priv": "{{ item['configure_priv']|default(omit) }}", "read_priv": "{{ item['read_priv']|default(omit) }}", "write_priv": "{{ item['write_priv']|default(omit) }}", "tags": "{{ item['tags']|default(omit) }}", "permissions": "{{ item['permissions']|default(omit) }}", "state": "present"}, "executable": "rabbitmq_user", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_users | creating rabbitmq users\n  rabbitmq_user:\n    name: \"{{ item['name'] }}\"\n    password: \"{{ item['password'] }}\"\n    vhost: \"{{ item['vhost']|default(omit) }}\"\n    configure_priv: \"{{ item['configure_priv']|default(omit) }}\"\n    read_priv: \"{{ item['read_priv']|default(omit) }}\"\n    write_priv: \"{{ item['write_priv']|default(omit) }}\"\n    tags: \"{{ item['tags']|default(omit) }}\"\n    permissions: \"{{ item['permissions']|default(omit) }}\"\n    state: present\n  become: true\n  with_items: \"{{ rabbitmq_users }}\"\n  when: >\n        (rabbitmq_enable_clustering is defined and\n          not rabbitmq_enable_clustering) or\n          rabbitmq_enable_clustering is not defined\n", "line_num_in_file": [2, 19], "resolved_name": "", "possible_candidates": [{"py/tuple": ["community.rabbitmq.rabbitmq_user", {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}]}], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "community.rabbitmq.rabbitmq_user", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": ["community.rabbitmq.rabbitmq_user"], "suggested_dependency": [{"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["configure_priv", "force", "node", "password", "permissions", "read_priv", "state", "tags", "topic_permissions", "update_password", "user", "username", "name", "vhost", "write_priv"], "required_arg_keys": [{"key": "user", "aliases": ["username", "name"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "configure_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Deletes and recreates the user."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["erlang node name of the rabbit we wish to configure"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "password", "type": "str", "elements": "", "default": null, "required": false, "description": ["Password of user to add.", "To change the password of an existing user, you must also specify C(update_password=always)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["a list of dicts, each dict contains vhost, configure_priv, write_priv, and read_priv, and represents a permission rule for that vhost.", "This option should be preferable when you care about all permissions of the user.", "You should use vhost, configure_priv, write_priv, and read_priv options instead if you care about permissions for just some vhosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "read_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Specify if user is to be added or removed"], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tags", "type": "str", "elements": "", "default": null, "required": false, "description": ["User tags specified as comma delimited"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "topic_permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["A list of dicts, each dict contains vhost, exchange, read_priv and write_priv, and represents a topic permission rule for that vhost.", "By default vhost is C(/) and exchange is C(amq.topic).", "Supported since RabbitMQ 3.7.0. If RabbitMQ is older and topic_permissions are set, the module will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_password", "type": "str", "elements": "", "default": "on_create", "required": false, "description": ["C(on_create) will only set the password for newly created users.  C(always) will update passwords if they differ."], "choices": ["on_create", "always"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "user", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of user to add"], "choices": null, "aliases": ["username", "name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "vhost", "type": "str", "elements": "", "default": "/", "required": false, "description": ["vhost to apply access privileges.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "write_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "configure_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Deletes and recreates the user."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["erlang node name of the rabbit we wish to configure"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "password", "type": "str", "elements": "", "default": null, "required": false, "description": ["Password of user to add.", "To change the password of an existing user, you must also specify C(update_password=always)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["a list of dicts, each dict contains vhost, configure_priv, write_priv, and read_priv, and represents a permission rule for that vhost.", "This option should be preferable when you care about all permissions of the user.", "You should use vhost, configure_priv, write_priv, and read_priv options instead if you care about permissions for just some vhosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "read_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Specify if user is to be added or removed"], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tags", "type": "str", "elements": "", "default": null, "required": false, "description": ["User tags specified as comma delimited"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "topic_permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["A list of dicts, each dict contains vhost, exchange, read_priv and write_priv, and represents a topic permission rule for that vhost.", "By default vhost is C(/) and exchange is C(amq.topic).", "Supported since RabbitMQ 3.7.0. If RabbitMQ is older and topic_permissions are set, the module will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_password", "type": "str", "elements": "", "default": "on_create", "required": false, "description": ["C(on_create) will only set the password for newly created users.  C(always) will update passwords if they differ."], "choices": ["on_create", "always"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "user", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of user to add"], "choices": null, "aliases": ["username", "name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "vhost", "type": "str", "elements": "", "default": "/", "required": false, "description": ["vhost to apply access privileges.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "write_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [{"used_alias": "name", "real_key": "user"}], "wrong_arg_values": [{"key": "name", "expected_type": "str", "actual_type": "list", "actual_value": "{{ item['name'] }}"}, {"key": "password", "expected_type": "str", "actual_type": "list", "actual_value": "{{ item['password'] }}"}, {"key": "vhost", "expected_type": "str", "actual_type": "list", "actual_value": "{{ item['vhost']|default(omit) }}"}, {"key": "configure_priv", "expected_type": "str", "actual_type": "list", "actual_value": "{{ item['configure_priv']|default(omit) }}"}, {"key": "read_priv", "expected_type": "str", "actual_type": "list", "actual_value": "{{ item['read_priv']|default(omit) }}"}, {"key": "write_priv", "expected_type": "str", "actual_type": "list", "actual_value": "{{ item['write_priv']|default(omit) }}"}, {"key": "tags", "expected_type": "str", "actual_type": "list", "actual_value": "{{ item['tags']|default(omit) }}"}], "undefined_values": [{"key": "name", "value": "{{ item['name'] }}", "undefined_variables": ["item['name']"]}, {"key": "password", "value": "{{ item['password'] }}", "undefined_variables": ["item['password']"]}], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']", "item", "rabbitmq_extra_vhosts", "item['name']", "item['state']", "rabbitmq_created_vhosts.results", "rabbitmq_config", "item['exchange_name']", "item['type']", "item['vhost']", "item['queue_name']", "item['durable']", "policy_name", "item.queue_name", "item.vhost", "item.tags", "item['routing_key']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined", "rabbitmq_created_vhosts", "rabbitmq_existing_users", "rabbitmqadmin_check", "policy_vhost", "policy_name"], "vars_used_in_target_task": ["item", "rabbitmq_users", "item['name']", "item['password']", "item['vhost']", "item['configure_priv']", "item['read_priv']", "item['write_priv']", "item['tags']", "item['permissions']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_users.yml#task:[1]", "name": "rabbitmq_users | creating rabbitmq users", "module": "rabbitmq_user", "index": 1, "play_index": -1, "defined_in": "tasks/rabbitmq_users.yml", "local_key": "task taskfile:tasks/rabbitmq_users.yml#task:[1]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_users }}"}, "options": {"name": "rabbitmq_users | creating rabbitmq users", "run_once": true, "delegate_to": "{{ rabbitmq_master }}", "become": true, "with_items": "{{ rabbitmq_users }}", "when": "rabbitmq_enable_clustering is defined and\n  rabbitmq_enable_clustering\n"}, "module_options": {"name": "{{ item['name'] }}", "password": "{{ item['password'] }}", "vhost": "{{ item['vhost']|default(omit) }}", "configure_priv": "{{ item['configure_priv']|default(omit) }}", "read_priv": "{{ item['read_priv']|default(omit) }}", "write_priv": "{{ item['write_priv']|default(omit) }}", "tags": "{{ item['tags']|default(omit) }}", "permissions": "{{ item['permissions']|default(omit) }}", "state": "present"}, "executable": "rabbitmq_user", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_users | creating rabbitmq users\n  rabbitmq_user:\n    name: \"{{ item['name'] }}\"\n    password: \"{{ item['password'] }}\"\n    vhost: \"{{ item['vhost']|default(omit) }}\"\n    configure_priv: \"{{ item['configure_priv']|default(omit) }}\"\n    read_priv: \"{{ item['read_priv']|default(omit) }}\"\n    write_priv: \"{{ item['write_priv']|default(omit) }}\"\n    tags: \"{{ item['tags']|default(omit) }}\"\n    permissions: \"{{ item['permissions']|default(omit) }}\"\n    state: present\n  become: true\n  with_items: \"{{ rabbitmq_users }}\"\n  when: >\n        (rabbitmq_enable_clustering is defined and\n          not rabbitmq_enable_clustering) or\n          rabbitmq_enable_clustering is not defined\n", "line_num_in_file": [2, 19], "resolved_name": "", "possible_candidates": [{"py/tuple": ["community.rabbitmq.rabbitmq_user", {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}]}], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "community.rabbitmq.rabbitmq_user", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": ["community.rabbitmq.rabbitmq_user"], "suggested_dependency": [{"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["configure_priv", "force", "node", "password", "permissions", "read_priv", "state", "tags", "topic_permissions", "update_password", "user", "username", "name", "vhost", "write_priv"], "required_arg_keys": [{"key": "user", "aliases": ["username", "name"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "configure_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Deletes and recreates the user."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["erlang node name of the rabbit we wish to configure"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "password", "type": "str", "elements": "", "default": null, "required": false, "description": ["Password of user to add.", "To change the password of an existing user, you must also specify C(update_password=always)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["a list of dicts, each dict contains vhost, configure_priv, write_priv, and read_priv, and represents a permission rule for that vhost.", "This option should be preferable when you care about all permissions of the user.", "You should use vhost, configure_priv, write_priv, and read_priv options instead if you care about permissions for just some vhosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "read_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Specify if user is to be added or removed"], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tags", "type": "str", "elements": "", "default": null, "required": false, "description": ["User tags specified as comma delimited"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "topic_permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["A list of dicts, each dict contains vhost, exchange, read_priv and write_priv, and represents a topic permission rule for that vhost.", "By default vhost is C(/) and exchange is C(amq.topic).", "Supported since RabbitMQ 3.7.0. If RabbitMQ is older and topic_permissions are set, the module will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_password", "type": "str", "elements": "", "default": "on_create", "required": false, "description": ["C(on_create) will only set the password for newly created users.  C(always) will update passwords if they differ."], "choices": ["on_create", "always"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "user", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of user to add"], "choices": null, "aliases": ["username", "name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "vhost", "type": "str", "elements": "", "default": "/", "required": false, "description": ["vhost to apply access privileges.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "write_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "configure_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Deletes and recreates the user."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["erlang node name of the rabbit we wish to configure"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "password", "type": "str", "elements": "", "default": null, "required": false, "description": ["Password of user to add.", "To change the password of an existing user, you must also specify C(update_password=always)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["a list of dicts, each dict contains vhost, configure_priv, write_priv, and read_priv, and represents a permission rule for that vhost.", "This option should be preferable when you care about all permissions of the user.", "You should use vhost, configure_priv, write_priv, and read_priv options instead if you care about permissions for just some vhosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "read_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Specify if user is to be added or removed"], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tags", "type": "str", "elements": "", "default": null, "required": false, "description": ["User tags specified as comma delimited"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "topic_permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["A list of dicts, each dict contains vhost, exchange, read_priv and write_priv, and represents a topic permission rule for that vhost.", "By default vhost is C(/) and exchange is C(amq.topic).", "Supported since RabbitMQ 3.7.0. If RabbitMQ is older and topic_permissions are set, the module will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_password", "type": "str", "elements": "", "default": "on_create", "required": false, "description": ["C(on_create) will only set the password for newly created users.  C(always) will update passwords if they differ."], "choices": ["on_create", "always"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "user", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of user to add"], "choices": null, "aliases": ["username", "name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "vhost", "type": "str", "elements": "", "default": "/", "required": false, "description": ["vhost to apply access privileges.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "write_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [{"used_alias": "name", "real_key": "user"}], "wrong_arg_values": [{"key": "name", "expected_type": "str", "actual_type": "list", "actual_value": "{{ item['name'] }}"}, {"key": "password", "expected_type": "str", "actual_type": "list", "actual_value": "{{ item['password'] }}"}, {"key": "vhost", "expected_type": "str", "actual_type": "list", "actual_value": "{{ item['vhost']|default(omit) }}"}, {"key": "configure_priv", "expected_type": "str", "actual_type": "list", "actual_value": "{{ item['configure_priv']|default(omit) }}"}, {"key": "read_priv", "expected_type": "str", "actual_type": "list", "actual_value": "{{ item['read_priv']|default(omit) }}"}, {"key": "write_priv", "expected_type": "str", "actual_type": "list", "actual_value": "{{ item['write_priv']|default(omit) }}"}, {"key": "tags", "expected_type": "str", "actual_type": "list", "actual_value": "{{ item['tags']|default(omit) }}"}], "undefined_values": [{"key": "name", "value": "{{ item['name'] }}", "undefined_variables": ["item['name']"]}, {"key": "password", "value": "{{ item['password'] }}", "undefined_variables": ["item['password']"]}], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']", "item", "rabbitmq_extra_vhosts", "item['name']", "item['state']", "rabbitmq_created_vhosts.results", "rabbitmq_config", "item['exchange_name']", "item['type']", "item['vhost']", "item['queue_name']", "item['durable']", "policy_name", "item.queue_name", "item.vhost", "item.tags", "item['routing_key']", "rabbitmq_users", "item['password']", "item['configure_priv']", "item['read_priv']", "item['write_priv']", "item['tags']", "item['permissions']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined", "rabbitmq_created_vhosts", "rabbitmq_existing_users", "rabbitmqadmin_check", "policy_vhost", "policy_name"], "vars_used_in_target_task": ["item", "rabbitmq_users", "item['name']", "item['password']", "item['vhost']", "item['configure_priv']", "item['read_priv']", "item['write_priv']", "item['tags']", "item['permissions']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[0]", "name": "fedora | installing pre-reqs", "module": "dnf", "index": 0, "play_index": -1, "defined_in": "tasks/fedora.yml", "local_key": "task taskfile:tasks/fedora.yml#task:[0]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "fedora | installing pre-reqs", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": ["wget"], "state": "present"}, "executable": "dnf", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: fedora | installing pre-reqs\n  dnf:\n    name: ['wget']\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [2, 9], "resolved_name": "ansible.builtin.dnf", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.dnf", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.dnf", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_downgrade", "allowerasing", "autoremove", "bugfix", "cacheonly", "conf_file", "disable_excludes", "disable_gpg_check", "disable_plugin", "disablerepo", "download_dir", "download_only", "enable_plugin", "enablerepo", "exclude", "install_repoquery", "install_weak_deps", "installroot", "list", "lock_timeout", "name", "pkg", "nobest", "releasever", "security", "skip_broken", "sslverify", "state", "update_cache", "expire-cache", "update_only", "validate_certs"], "required_arg_keys": [{"key": "name", "aliases": ["pkg"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allowerasing", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true) it allows  erasing  of  installed  packages to resolve dependencies."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells dnf to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote dnf configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in DNF config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in dnf.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).", "This setting affects packages installed from a repository as well as \"local\" packages installed from the filesystem or a URL."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the I(yum) module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. Use M(ansible.builtin.package_facts) instead of the C(list) argument as a best practice."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the dnf lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": true, "description": ["A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages.", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name >= 1.0). Spaces around the operator are required.", "You can also pass an absolute path for a binary which is provided by the package to install. See examples for more information."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "nobest", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Set best option to False, so that transactions are not limited to best candidates only."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present), C(latest)), or remove (C(absent)) a package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "present", "installed", "removed", "latest"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force dnf to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allowerasing", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true) it allows  erasing  of  installed  packages to resolve dependencies."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells dnf to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote dnf configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in DNF config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in dnf.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).", "This setting affects packages installed from a repository as well as \"local\" packages installed from the filesystem or a URL."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the I(yum) module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. Use M(ansible.builtin.package_facts) instead of the C(list) argument as a best practice."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the dnf lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": true, "description": ["A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages.", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name >= 1.0). Spaces around the operator are required.", "You can also pass an absolute path for a binary which is provided by the package to install. See examples for more information."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "nobest", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Set best option to False, so that transactions are not limited to best candidates only."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present), C(latest)), or remove (C(absent)) a package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "present", "installed", "removed", "latest"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force dnf to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[1]", "name": "fedora | installing erlang", "module": "dnf", "index": 1, "play_index": -1, "defined_in": "tasks/fedora.yml", "local_key": "task taskfile:tasks/fedora.yml#task:[1]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "fedora | installing erlang", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": ["erlang"], "state": "present"}, "executable": "dnf", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: fedora | installing erlang\n  dnf:\n    name: ['erlang']\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [10, 17], "resolved_name": "ansible.builtin.dnf", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.dnf", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.dnf", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_downgrade", "allowerasing", "autoremove", "bugfix", "cacheonly", "conf_file", "disable_excludes", "disable_gpg_check", "disable_plugin", "disablerepo", "download_dir", "download_only", "enable_plugin", "enablerepo", "exclude", "install_repoquery", "install_weak_deps", "installroot", "list", "lock_timeout", "name", "pkg", "nobest", "releasever", "security", "skip_broken", "sslverify", "state", "update_cache", "expire-cache", "update_only", "validate_certs"], "required_arg_keys": [{"key": "name", "aliases": ["pkg"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allowerasing", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true) it allows  erasing  of  installed  packages to resolve dependencies."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells dnf to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote dnf configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in DNF config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in dnf.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).", "This setting affects packages installed from a repository as well as \"local\" packages installed from the filesystem or a URL."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the I(yum) module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. Use M(ansible.builtin.package_facts) instead of the C(list) argument as a best practice."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the dnf lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": true, "description": ["A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages.", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name >= 1.0). Spaces around the operator are required.", "You can also pass an absolute path for a binary which is provided by the package to install. See examples for more information."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "nobest", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Set best option to False, so that transactions are not limited to best candidates only."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present), C(latest)), or remove (C(absent)) a package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "present", "installed", "removed", "latest"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force dnf to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allowerasing", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true) it allows  erasing  of  installed  packages to resolve dependencies."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells dnf to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote dnf configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in DNF config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in dnf.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).", "This setting affects packages installed from a repository as well as \"local\" packages installed from the filesystem or a URL."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the I(yum) module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. Use M(ansible.builtin.package_facts) instead of the C(list) argument as a best practice."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the dnf lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": true, "description": ["A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages.", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name >= 1.0). Spaces around the operator are required.", "You can also pass an absolute path for a binary which is provided by the package to install. See examples for more information."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "nobest", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Set best option to False, so that transactions are not limited to best candidates only."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present), C(latest)), or remove (C(absent)) a package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "present", "installed", "removed", "latest"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force dnf to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[2]", "name": "fedora | adding RabbitMQ public GPG key", "module": "rpm_key", "index": 2, "play_index": -1, "defined_in": "tasks/fedora.yml", "local_key": "task taskfile:tasks/fedora.yml#task:[2]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "fedora | adding RabbitMQ public GPG key", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"key": "{{ rabbitmq_redhat_repo_key }}", "state": "present"}, "executable": "rpm_key", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: fedora | adding RabbitMQ public GPG key\n  rpm_key:\n    key: \"{{ rabbitmq_redhat_repo_key }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [18, 25], "resolved_name": "ansible.builtin.rpm_key", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.rpm_key", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.rpm_key", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["fingerprint", "key", "state", "validate_certs"], "required_arg_keys": [{"key": "key", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fingerprint", "type": "str", "elements": "", "default": null, "required": false, "description": ["The long-form fingerprint of the key being imported.", "This will be used to verify the specified key."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "key", "type": "str", "elements": "", "default": null, "required": true, "description": ["Key that will be modified. Can be a url, a file on the managed node, or a keyid if the key already exists in the database."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["If the key will be imported or removed from the rpm db."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false) and the C(key) is a url starting with https, SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fingerprint", "type": "str", "elements": "", "default": null, "required": false, "description": ["The long-form fingerprint of the key being imported.", "This will be used to verify the specified key."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "key", "type": "str", "elements": "", "default": null, "required": true, "description": ["Key that will be modified. Can be a url, a file on the managed node, or a keyid if the key already exists in the database."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["If the key will be imported or removed from the rpm db."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false) and the C(key) is a url starting with https, SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": ["rabbitmq_redhat_repo_key"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[3]", "name": "fedora | downloading RabbitMQ", "module": "get_url", "index": 3, "play_index": -1, "defined_in": "tasks/fedora.yml", "local_key": "task taskfile:tasks/fedora.yml#task:[3]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "fedora | downloading RabbitMQ", "become": true}, "module_options": {"url": "{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}", "dest": "/opt/{{ rabbitmq_redhat_package }}"}, "executable": "get_url", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: fedora | downloading RabbitMQ\n  get_url:\n    url: \"{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}\"\n    dest: \"/opt/{{ rabbitmq_redhat_package }}\"\n  become: true\n", "line_num_in_file": [26, 31], "resolved_name": "ansible.builtin.get_url", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.get_url", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.get_url", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "ciphers", "client_cert", "client_key", "decompress", "dest", "force", "force_basic_auth", "group", "headers", "http_agent", "mode", "owner", "selevel", "serole", "setype", "seuser", "timeout", "tmp_dest", "unredirected_headers", "unsafe_writes", "url", "url_password", "password", "url_username", "username", "use_gssapi", "use_netrc", "use_proxy", "validate_certs"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "url", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum", "type": "str", "elements": "", "default": "", "required": false, "description": ["If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum|url>, e.g. checksum=\"sha256:D98291AC[...]B6DC7B97\", checksum=\"sha256:http://example.com/path/sha256sum.txt\"", "If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.", "The third party hashlib library can be installed for access to additional algorithms.", "Additionally, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the I(destination_checksum) would be calculated, and if checksum equals I(destination_checksum), the file download would be skipped (unless C(force) is true). If the checksum does not equal I(destination_checksum), the destination file is deleted."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "ciphers", "type": "list", "elements": "str", "default": null, "required": false, "description": ["SSL/TLS Ciphers to use for the request", "When a list is provided, all ciphers are joined in order with C(:)", "See the L(OpenSSL Cipher List Format,https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT) for more details.", "The available ciphers is dependent on the Python and OpenSSL/LibreSSL versions"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_cert", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted certificate chain file to be used for SSL client authentication.", "This file can also include the key as well, and if the key is included, C(client_key) is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_key", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted file that contains your private key to be used for SSL client authentication.", "If C(client_cert) contains both the certificate and key, this option is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "decompress", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to attempt to decompress gzip content-encoded responses"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Absolute path of where to download the file to.", "If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect.", "If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) and C(checksum) option), but replaced only if the contents changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["If C(true) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(false), the file will only be downloaded if the destination does not exist. Generally should be C(true) only for small local files.", "Prior to 0.6, this module behaved as if C(true) was the default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_basic_auth", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the sending of the Basic authentication header upon initial request.", "httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "headers", "type": "dict", "elements": "", "default": null, "required": false, "description": ["Add custom HTTP headers to a request in hash/dict format.", "The hash/dict format was added in Ansible 2.6.", "Previous versions used a C(\"key:value,key:value\") string format.", "The C(\"key:value,key:value\") string format is deprecated and has been removed in version 2.10."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "http_agent", "type": "str", "elements": "", "default": "ansible-httpget", "required": false, "description": ["Header to identify as, generally appears in web server logs."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "timeout", "type": "int", "elements": "", "default": 10, "required": false, "description": ["Timeout in seconds for URL request."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tmp_dest", "type": "str", "elements": "", "default": null, "required": false, "description": ["Absolute path of where temporary file is downloaded to.", "When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting", "When run on Ansible prior to 2.5, it defaults to C(TMPDIR), C(TEMP) or C(TMP) env variables or a platform specific value.", "U(https://docs.python.org/3/library/tempfile.html#tempfile.tempdir)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unredirected_headers", "type": "list", "elements": "str", "default": [], "required": false, "description": ["A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": true, "description": ["HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_password", "type": "str", "elements": "", "default": null, "required": false, "description": ["The password for use in HTTP basic authentication.", "If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.", "Since version 2.8 you can also use the 'password' alias for this option."], "choices": null, "aliases": ["password"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_username", "type": "str", "elements": "", "default": null, "required": false, "description": ["The username for use in HTTP basic authentication.", "This parameter can be used without C(url_password) for sites that allow empty passwords.", "Since version 2.8 you can also use the C(username) alias for this option."], "choices": null, "aliases": ["username"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_gssapi", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.", "Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.", "Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.", "NTLM authentication is I(not) supported even if the GSSAPI mech for NTLM has been installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_netrc", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determining whether to use credentials from ``~/.netrc`` file", "By default .netrc is used with Basic authentication headers", "When set to False, .netrc credentials are ignored"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_proxy", "type": "bool", "elements": "", "default": true, "required": false, "description": ["if C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If C(false), SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum", "type": "str", "elements": "", "default": "", "required": false, "description": ["If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum|url>, e.g. checksum=\"sha256:D98291AC[...]B6DC7B97\", checksum=\"sha256:http://example.com/path/sha256sum.txt\"", "If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.", "The third party hashlib library can be installed for access to additional algorithms.", "Additionally, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the I(destination_checksum) would be calculated, and if checksum equals I(destination_checksum), the file download would be skipped (unless C(force) is true). If the checksum does not equal I(destination_checksum), the destination file is deleted."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "ciphers", "type": "list", "elements": "str", "default": null, "required": false, "description": ["SSL/TLS Ciphers to use for the request", "When a list is provided, all ciphers are joined in order with C(:)", "See the L(OpenSSL Cipher List Format,https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT) for more details.", "The available ciphers is dependent on the Python and OpenSSL/LibreSSL versions"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_cert", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted certificate chain file to be used for SSL client authentication.", "This file can also include the key as well, and if the key is included, C(client_key) is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_key", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted file that contains your private key to be used for SSL client authentication.", "If C(client_cert) contains both the certificate and key, this option is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "decompress", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to attempt to decompress gzip content-encoded responses"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Absolute path of where to download the file to.", "If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect.", "If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) and C(checksum) option), but replaced only if the contents changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["If C(true) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(false), the file will only be downloaded if the destination does not exist. Generally should be C(true) only for small local files.", "Prior to 0.6, this module behaved as if C(true) was the default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_basic_auth", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the sending of the Basic authentication header upon initial request.", "httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "headers", "type": "dict", "elements": "", "default": null, "required": false, "description": ["Add custom HTTP headers to a request in hash/dict format.", "The hash/dict format was added in Ansible 2.6.", "Previous versions used a C(\"key:value,key:value\") string format.", "The C(\"key:value,key:value\") string format is deprecated and has been removed in version 2.10."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "http_agent", "type": "str", "elements": "", "default": "ansible-httpget", "required": false, "description": ["Header to identify as, generally appears in web server logs."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "timeout", "type": "int", "elements": "", "default": 10, "required": false, "description": ["Timeout in seconds for URL request."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tmp_dest", "type": "str", "elements": "", "default": null, "required": false, "description": ["Absolute path of where temporary file is downloaded to.", "When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting", "When run on Ansible prior to 2.5, it defaults to C(TMPDIR), C(TEMP) or C(TMP) env variables or a platform specific value.", "U(https://docs.python.org/3/library/tempfile.html#tempfile.tempdir)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unredirected_headers", "type": "list", "elements": "str", "default": [], "required": false, "description": ["A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": true, "description": ["HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_password", "type": "str", "elements": "", "default": null, "required": false, "description": ["The password for use in HTTP basic authentication.", "If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.", "Since version 2.8 you can also use the 'password' alias for this option."], "choices": null, "aliases": ["password"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_username", "type": "str", "elements": "", "default": null, "required": false, "description": ["The username for use in HTTP basic authentication.", "This parameter can be used without C(url_password) for sites that allow empty passwords.", "Since version 2.8 you can also use the C(username) alias for this option."], "choices": null, "aliases": ["username"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_gssapi", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.", "Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.", "Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.", "NTLM authentication is I(not) supported even if the GSSAPI mech for NTLM has been installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_netrc", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determining whether to use credentials from ``~/.netrc`` file", "By default .netrc is used with Basic authentication headers", "When set to False, .netrc credentials are ignored"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_proxy", "type": "bool", "elements": "", "default": true, "required": false, "description": ["if C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If C(false), SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "url", "expected_type": "str", "unknown_type_value": "https://dl.bintray.com/rabbitmq/rpm/rabbitmq-server/v3.8.x/el/{{ ansible_distribution_major_version }}/noarch/rabbitmq-server-3.8.11-1.el{{ ansible_distribution_major_version }}.noarch.rpm"}, {"key": "dest", "expected_type": "str", "unknown_type_value": "/opt/rabbitmq-server-3.8.11-1.el{{ ansible_distribution_major_version }}.noarch.rpm"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": ["rabbitmq_redhat_url", "rabbitmq_redhat_package"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[4]", "name": "fedora | installing RabbitMQ", "module": "dnf", "index": 4, "play_index": -1, "defined_in": "tasks/fedora.yml", "local_key": "task taskfile:tasks/fedora.yml#task:[4]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[4]"}, "set_facts": {}, "loop": {}, "options": {"name": "fedora | installing RabbitMQ", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": "/opt/{{ rabbitmq_redhat_package }}", "state": "present"}, "executable": "dnf", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: fedora | installing RabbitMQ\n  dnf:\n    name: \"/opt/{{ rabbitmq_redhat_package }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [32, 39], "resolved_name": "ansible.builtin.dnf", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.dnf", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.dnf", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_downgrade", "allowerasing", "autoremove", "bugfix", "cacheonly", "conf_file", "disable_excludes", "disable_gpg_check", "disable_plugin", "disablerepo", "download_dir", "download_only", "enable_plugin", "enablerepo", "exclude", "install_repoquery", "install_weak_deps", "installroot", "list", "lock_timeout", "name", "pkg", "nobest", "releasever", "security", "skip_broken", "sslverify", "state", "update_cache", "expire-cache", "update_only", "validate_certs"], "required_arg_keys": [{"key": "name", "aliases": ["pkg"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allowerasing", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true) it allows  erasing  of  installed  packages to resolve dependencies."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells dnf to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote dnf configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in DNF config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in dnf.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).", "This setting affects packages installed from a repository as well as \"local\" packages installed from the filesystem or a URL."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the I(yum) module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. Use M(ansible.builtin.package_facts) instead of the C(list) argument as a best practice."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the dnf lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": true, "description": ["A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages.", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name >= 1.0). Spaces around the operator are required.", "You can also pass an absolute path for a binary which is provided by the package to install. See examples for more information."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "nobest", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Set best option to False, so that transactions are not limited to best candidates only."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present), C(latest)), or remove (C(absent)) a package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "present", "installed", "removed", "latest"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force dnf to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allowerasing", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true) it allows  erasing  of  installed  packages to resolve dependencies."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells dnf to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote dnf configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in DNF config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in dnf.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).", "This setting affects packages installed from a repository as well as \"local\" packages installed from the filesystem or a URL."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the I(yum) module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. Use M(ansible.builtin.package_facts) instead of the C(list) argument as a best practice."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the dnf lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": true, "description": ["A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages.", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name >= 1.0). Spaces around the operator are required.", "You can also pass an absolute path for a binary which is provided by the package to install. See examples for more information."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "nobest", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Set best option to False, so that transactions are not limited to best candidates only."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present), C(latest)), or remove (C(absent)) a package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "present", "installed", "removed", "latest"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force dnf to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "name", "expected_type": "list", "unknown_type_value": "/opt/rabbitmq-server-3.8.11-1.el{{ ansible_distribution_major_version }}.noarch.rpm"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": ["rabbitmq_redhat_package"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[5]", "name": "fedora | starting and enabling RabbitMQ service", "module": "service", "index": 5, "play_index": -1, "defined_in": "tasks/fedora.yml", "local_key": "task taskfile:tasks/fedora.yml#task:[5]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "fedora | starting and enabling RabbitMQ service", "become": true}, "module_options": {"name": "rabbitmq-server", "state": "started", "enabled": true}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: fedora | starting and enabling RabbitMQ service\n  service:\n    name: rabbitmq-server\n    state: started\n    enabled: true\n  become: true\n", "line_num_in_file": [40, 46], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/fedora.yml#task:[6]", "name": "fedora | enabling the RabbitMQ Management Console", "module": "rabbitmq_plugin", "index": 6, "play_index": -1, "defined_in": "tasks/fedora.yml", "local_key": "task taskfile:tasks/fedora.yml#task:[6]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "fedora | enabling the RabbitMQ Management Console", "notify": "restart rabbitmq-server", "become": true}, "module_options": {"names": "rabbitmq_management", "state": "enabled"}, "executable": "rabbitmq_plugin", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: fedora | enabling the RabbitMQ Management Console\n  rabbitmq_plugin:\n    names: rabbitmq_management\n    state: enabled\n  notify: restart rabbitmq-server\n  become: true", "line_num_in_file": [47, 53], "resolved_name": "", "possible_candidates": [{"py/tuple": ["community.rabbitmq.rabbitmq_plugin", {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}]}], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "community.rabbitmq.rabbitmq_plugin", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": ["community.rabbitmq.rabbitmq_plugin"], "suggested_dependency": [{"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["broker_state", "names", "name", "new_only", "prefix", "state"], "required_arg_keys": [{"key": "names", "aliases": ["name"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "broker_state", "type": "str", "elements": "", "default": "online", "required": false, "description": ["Specify whether the broker should be online or offline for the plugin change."], "choices": ["online", "offline"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "names", "type": "str", "elements": "", "default": null, "required": true, "description": ["Comma-separated list of plugin names. Also, accepts plugin name."], "choices": null, "aliases": ["name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "new_only", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Only enable missing plugins.", "Does not disable plugins that are not in the names list."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "prefix", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specify a custom install prefix to a Rabbit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "enabled", "required": false, "description": ["Specify if plugins are to be enabled or disabled."], "choices": ["enabled", "disabled"], "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "broker_state", "type": "str", "elements": "", "default": "online", "required": false, "description": ["Specify whether the broker should be online or offline for the plugin change."], "choices": ["online", "offline"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "names", "type": "str", "elements": "", "default": null, "required": true, "description": ["Comma-separated list of plugin names. Also, accepts plugin name."], "choices": null, "aliases": ["name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "new_only", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Only enable missing plugins.", "Does not disable plugins that are not in the names list."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "prefix", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specify a custom install prefix to a Rabbit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "enabled", "required": false, "description": ["Specify if plugins are to be enabled or disabled."], "choices": ["enabled", "disabled"], "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[0]", "name": "rabbitmq_clustering | stopping rabbitmq app", "module": "command", "index": 0, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[0]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | stopping rabbitmq app", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": "rabbitmqctl stop_app", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | stopping rabbitmq app\n  command: rabbitmqctl stop_app\n  become: true\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [2, 6], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[1]", "name": "rabbitmq_clustering | resetting rabbitmq app", "module": "command", "index": 1, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[1]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | resetting rabbitmq app", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": "rabbitmqctl reset", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | resetting rabbitmq app\n  command: rabbitmqctl reset\n  become: true\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [7, 11], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[2]", "name": "rabbitmq_clustering | stopping rabbitmq-server", "module": "service", "index": 2, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[2]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | stopping rabbitmq-server", "become": true}, "module_options": {"name": "rabbitmq-server", "state": "stopped"}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | stopping rabbitmq-server\n  service:\n    name: rabbitmq-server\n    state: stopped\n  become: true\n", "line_num_in_file": [12, 17], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[3]", "name": "rabbitmq_clustering | Capturing Erlang Cookie On Master", "module": "command", "index": 3, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[3]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"rabbitmq_erlang_cookie": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[3]"}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | Capturing Erlang Cookie On Master", "become": true, "register": "rabbitmq_erlang_cookie", "when": "inventory_hostname == rabbitmq_master"}, "module_options": "cat {{ rabbitmq_erlang_cookie_file }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | Capturing Erlang Cookie On Master\n  command: \"cat {{ rabbitmq_erlang_cookie_file }}\"\n  become: true\n  register: \"rabbitmq_erlang_cookie\"\n  when: inventory_hostname == rabbitmq_master\n", "line_num_in_file": [18, 23], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie"], "vars_used_in_target_task": ["rabbitmq_erlang_cookie_file"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[4]", "name": "rabbitmq_clustering | Setting Erlang Cookie Of Master on Non-Master", "module": "set_fact", "index": 4, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[4]", "role": "ansible-rabbitmq", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"rabbitmq_erlang_cookie": "{{ hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout'] }}"}, "loop": {}, "options": {"name": "rabbitmq_clustering | Setting Erlang Cookie Of Master on Non-Master", "when": "inventory_hostname != rabbitmq_master"}, "module_options": {"rabbitmq_erlang_cookie": "{{ hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout'] }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | Setting Erlang Cookie Of Master on Non-Master\n  set_fact:\n    rabbitmq_erlang_cookie: \"{{ hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout'] }}\"\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [24, 28], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "available_args": null, "default_args": null, "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie"], "vars_used_in_target_task": ["hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[5]", "name": "rabbitmq_clustering | copy erlang cookie", "module": "template", "index": 5, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[5]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | copy erlang cookie", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": {"src": "erlang.cookie.j2", "dest": "{{ rabbitmq_erlang_cookie_file }}", "owner": "rabbitmq", "group": "rabbitmq", "mode": 256, "backup": true}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | copy erlang cookie\n  template:\n    src: erlang.cookie.j2\n    dest: \"{{ rabbitmq_erlang_cookie_file }}\"\n    owner: rabbitmq\n    group: rabbitmq\n    mode: 0400\n    # backing up in case the need to recover\n    backup: yes\n  become: true\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [29, 40], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_end_string", "type": "str", "elements": "", "default": "%}", "required": false, "description": ["The string marking the end of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_start_string", "type": "str", "elements": "", "default": "{%", "required": false, "description": ["The string marking the beginning of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_end_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the end of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_start_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the beginning of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Location to render the template to on the remote machine."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine whether symbolic links should be followed.", "When set to C(true) symbolic links will be followed, if they exist.", "When set to C(false) symbolic links will not be followed.", "Previous to Ansible 2.4, this was hardcoded as C(true)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when the file is being transferred if the destination already exists.", "When set to C(yes), replace the remote file when contents are different than the source.", "When set to C(no), the file will only be transferred if the destination does not exist."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lstrip_blocks", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine when leading spaces and tabs should be stripped.", "When set to C(yes) leading spaces and tabs are stripped from the start of a line to a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "newline_sequence", "type": "str", "elements": "", "default": "\\n", "required": false, "description": ["Specify the newline sequence to use for templating files."], "choices": ["\\n", "\\r", "\\r\\n"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "output_encoding", "type": "str", "elements": "", "default": "utf-8", "required": false, "description": ["Overrides the encoding used to write the template file defined by C(dest).", "It defaults to C(utf-8), but any encoding supported by python can be used.", "The source template file must always be encoded using C(utf-8), for homogeneity."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path of a Jinja2 formatted template on the Ansible controller.", "This can be a relative or an absolute path.", "The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output template."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "trim_blocks", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when newlines should be removed from blocks.", "When set to C(yes) the first newline after a block is removed (block, not variable tag!)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate", "type": "str", "elements": "", "default": null, "required": false, "description": ["The validation command to run before copying the updated file into the final destination.", "A temporary file path is used to validate, passed in through '%s' which must be present as in the examples below.", "Also, the command is passed securely so shell features such as expansion and pipes will not work.", "For an example on how to handle more complex validation than what this option provides, see R(handling complex validation,complex_configuration_validation)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_end_string", "type": "str", "elements": "", "default": "}}", "required": false, "description": ["The string marking the end of a print statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_start_string", "type": "str", "elements": "", "default": "{{", "required": false, "description": ["The string marking the beginning of a print statement."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_end_string", "type": "str", "elements": "", "default": "%}", "required": false, "description": ["The string marking the end of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_start_string", "type": "str", "elements": "", "default": "{%", "required": false, "description": ["The string marking the beginning of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_end_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the end of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_start_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the beginning of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Location to render the template to on the remote machine."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine whether symbolic links should be followed.", "When set to C(true) symbolic links will be followed, if they exist.", "When set to C(false) symbolic links will not be followed.", "Previous to Ansible 2.4, this was hardcoded as C(true)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when the file is being transferred if the destination already exists.", "When set to C(yes), replace the remote file when contents are different than the source.", "When set to C(no), the file will only be transferred if the destination does not exist."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lstrip_blocks", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine when leading spaces and tabs should be stripped.", "When set to C(yes) leading spaces and tabs are stripped from the start of a line to a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "newline_sequence", "type": "str", "elements": "", "default": "\\n", "required": false, "description": ["Specify the newline sequence to use for templating files."], "choices": ["\\n", "\\r", "\\r\\n"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "output_encoding", "type": "str", "elements": "", "default": "utf-8", "required": false, "description": ["Overrides the encoding used to write the template file defined by C(dest).", "It defaults to C(utf-8), but any encoding supported by python can be used.", "The source template file must always be encoded using C(utf-8), for homogeneity."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path of a Jinja2 formatted template on the Ansible controller.", "This can be a relative or an absolute path.", "The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output template."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "trim_blocks", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when newlines should be removed from blocks.", "When set to C(yes) the first newline after a block is removed (block, not variable tag!)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate", "type": "str", "elements": "", "default": null, "required": false, "description": ["The validation command to run before copying the updated file into the final destination.", "A temporary file path is used to validate, passed in through '%s' which must be present as in the examples below.", "Also, the command is passed securely so shell features such as expansion and pipes will not work.", "For an example on how to handle more complex validation than what this option provides, see R(handling complex validation,complex_configuration_validation)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_end_string", "type": "str", "elements": "", "default": "}}", "required": false, "description": ["The string marking the end of a print statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_start_string", "type": "str", "elements": "", "default": "{{", "required": false, "description": ["The string marking the beginning of a print statement."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie"], "vars_used_in_target_task": ["rabbitmq_erlang_cookie_file"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[6]", "name": "rabbitmq_clustering | restarting rabbitmq-server on master", "module": "service", "index": 6, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[6]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | restarting rabbitmq-server on master", "become": true, "when": "inventory_hostname == rabbitmq_master"}, "module_options": {"name": "rabbitmq-server", "state": "restarted"}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | restarting rabbitmq-server on master\n  service:\n    name: rabbitmq-server\n    state: restarted\n  become: true\n  when: inventory_hostname == rabbitmq_master\n", "line_num_in_file": [41, 47], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[7]", "name": "rabbitmq_clustering | starting rabbitmq app on master", "module": "command", "index": 7, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[7]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"cluster_master": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[7]"}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | starting rabbitmq app on master", "register": "cluster_master", "become": true, "when": "inventory_hostname == rabbitmq_master"}, "module_options": "rabbitmqctl start_app", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | starting rabbitmq app on master\n  command: rabbitmqctl start_app\n  register: cluster_master\n  become: true\n  when: inventory_hostname == rabbitmq_master\n", "line_num_in_file": [48, 53], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[8]", "name": "rabbitmq_clustering | sending sigterm to any running rabbitmq processes", "module": "shell", "index": 8, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[8]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | sending sigterm to any running rabbitmq processes", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": "pkill -u rabbitmq || true", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | sending sigterm to any running rabbitmq processes\n  shell: pkill -u rabbitmq || true\n  become: true\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [54, 58], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run followed by optional arguments."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename, when it already exists, this step will B(not) be run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "executable", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change the shell used to execute the command.", "This expects an absolute path to the executable."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "str", "elements": "", "default": null, "required": false, "description": ["The shell module takes a free form command to run, as a string.", "There is no actual parameter named 'free form'.", "See the examples on how to use this module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename, when it does not exist, this step will B(not) be run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to append a newline to stdin data."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run followed by optional arguments."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename, when it already exists, this step will B(not) be run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "executable", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change the shell used to execute the command.", "This expects an absolute path to the executable."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "str", "elements": "", "default": null, "required": false, "description": ["The shell module takes a free form command to run, as a string.", "There is no actual parameter named 'free form'.", "See the examples on how to use this module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename, when it does not exist, this step will B(not) be run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to append a newline to stdin data."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[9]", "name": "rabbitmq_clustering | restarting rabbitmq-server", "module": "service", "index": 9, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[9]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | restarting rabbitmq-server", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": {"name": "rabbitmq-server", "state": "restarted"}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | restarting rabbitmq-server on master\n  service:\n    name: rabbitmq-server\n    state: restarted\n  become: true\n  when: inventory_hostname == rabbitmq_master\n", "line_num_in_file": [41, 47], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[10]", "name": "rabbitmq_clustering | stopping rabbitmq app", "module": "command", "index": 10, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[10]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | stopping rabbitmq app", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": "rabbitmqctl stop_app", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | stopping rabbitmq app\n  command: rabbitmqctl stop_app\n  become: true\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [2, 6], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[11]", "name": "rabbitmq_clustering | resetting rabbitmq app", "module": "command", "index": 11, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[11]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | resetting rabbitmq app", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": "rabbitmqctl reset", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | resetting rabbitmq app\n  command: rabbitmqctl reset\n  become: true\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [7, 11], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[12]", "name": "rabbitmq_clustering | joining rabbitmq cluster", "module": "command", "index": 12, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[12]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"cluster_joined": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[12]"}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | joining rabbitmq cluster", "register": "cluster_joined", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": "rabbitmqctl join_cluster \"rabbit@{{ hostvars[rabbitmq_master]['ansible_hostname'] }}\"", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | joining rabbitmq cluster\n  command: rabbitmqctl join_cluster \"rabbit@{{ hostvars[rabbitmq_master]['ansible_hostname'] }}\"\n  register: cluster_joined\n  become: true\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [76, 81], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined"], "vars_used_in_target_task": ["hostvars[rabbitmq_master]['ansible_hostname']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[13]", "name": "rabbitmq_clustering | starting rabbitmq app", "module": "command", "index": 13, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[13]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | starting rabbitmq app", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": "rabbitmqctl start_app", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | starting rabbitmq app on master\n  command: rabbitmqctl start_app\n  register: cluster_master\n  become: true\n  when: inventory_hostname == rabbitmq_master\n", "line_num_in_file": [48, 53], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml#task:[14]", "name": "rabbitmq_clustering | marking as clustered", "module": "file", "index": 14, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[14]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | marking as clustered", "become": true, "when": "cluster_master['changed'] or cluster_joined['changed']\n"}, "module_options": {"path": "/etc/rabbitmq/clustered", "state": "touch"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | marking as clustered # noqa 503\n  file:\n    path: /etc/rabbitmq/clustered\n    state: touch\n  become: true\n  when: >\n    cluster_master['changed'] or\n    cluster_joined['changed']", "line_num_in_file": [87, 95], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "access_time", "type": "str", "elements": "", "default": null, "required": false, "description": ["This parameter indicates the time the file's access time should be set to.", "Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now).", "Default is C(None) meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "access_time_format", "type": "str", "elements": "", "default": "%Y%m%d%H%M.%S", "required": false, "description": ["When used with C(access_time), indicates the time format that must be used.", "Based on default Python format (see time.strftime doc)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": true, "required": false, "description": ["This flag indicates that filesystem links, if they exist, should be followed.", "I(follow=yes) and I(state=link) can modify I(src) when combined with parameters such as I(mode).", "Previous to Ansible 2.5, this was C(false) by default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and is a file (so, we need to unlink the C(path) file and create symlink to the C(src) file in place of it).\n"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "modification_time", "type": "str", "elements": "", "default": null, "required": false, "description": ["This parameter indicates the time the file's modification time should be set to.", "Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now).", "Default is None meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "modification_time_format", "type": "str", "elements": "", "default": "%Y%m%d%H%M.%S", "required": false, "description": ["When used with C(modification_time), indicates the time format that must be used.", "Based on default Python format (see time.strftime doc)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "path", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path to the file being managed."], "choices": null, "aliases": ["dest", "name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "recurse", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Recursively set the specified file attributes on directory contents.", "This applies only when C(state) is set to C(directory)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": false, "description": ["Path of the file to link to.", "This applies only to C(state=link) and C(state=hard).", "For C(state=link), this will also accept a non-existing path.", "Relative paths are relative to the file being created (C(path)) which is how the Unix command C(ln -s SRC DEST) treats relative paths."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["If C(absent), directories will be recursively deleted, and files or symlinks will be unlinked. In the case of a directory, if C(diff) is declared, you will see the files and folders deleted listed under C(path_contents). Note that C(absent) will not cause C(file) to fail if the C(path) does not exist as the state did not change.", "If C(directory), all intermediate subdirectories will be created if they do not exist. Since Ansible 1.7 they will be created with the supplied permissions.", "If C(file), with no other options, returns the current state of C(path).", "If C(file), even with other options (such as C(mode)), the file will be modified if it exists but will NOT be created if it does not exist. Set to C(touch) or use the M(ansible.builtin.copy) or M(ansible.builtin.template) module if you want to create the file if it does not exist.", "If C(hard), the hard link will be created or changed.", "If C(link), the symbolic link will be created or changed.", "If C(touch) (new in 1.4), an empty file will be created if the file does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way C(touch) works from the command line).", "Default is the current state of the file if it exists, C(directory) if C(recurse=yes), or C(file) otherwise."], "choices": ["absent", "directory", "file", "hard", "link", "touch"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "access_time", "type": "str", "elements": "", "default": null, "required": false, "description": ["This parameter indicates the time the file's access time should be set to.", "Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now).", "Default is C(None) meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "access_time_format", "type": "str", "elements": "", "default": "%Y%m%d%H%M.%S", "required": false, "description": ["When used with C(access_time), indicates the time format that must be used.", "Based on default Python format (see time.strftime doc)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": true, "required": false, "description": ["This flag indicates that filesystem links, if they exist, should be followed.", "I(follow=yes) and I(state=link) can modify I(src) when combined with parameters such as I(mode).", "Previous to Ansible 2.5, this was C(false) by default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and is a file (so, we need to unlink the C(path) file and create symlink to the C(src) file in place of it).\n"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "modification_time", "type": "str", "elements": "", "default": null, "required": false, "description": ["This parameter indicates the time the file's modification time should be set to.", "Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now).", "Default is None meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "modification_time_format", "type": "str", "elements": "", "default": "%Y%m%d%H%M.%S", "required": false, "description": ["When used with C(modification_time), indicates the time format that must be used.", "Based on default Python format (see time.strftime doc)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "path", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path to the file being managed."], "choices": null, "aliases": ["dest", "name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "recurse", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Recursively set the specified file attributes on directory contents.", "This applies only when C(state) is set to C(directory)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": false, "description": ["Path of the file to link to.", "This applies only to C(state=link) and C(state=hard).", "For C(state=link), this will also accept a non-existing path.", "Relative paths are relative to the file being created (C(path)) which is how the Unix command C(ln -s SRC DEST) treats relative paths."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["If C(absent), directories will be recursively deleted, and files or symlinks will be unlinked. In the case of a directory, if C(diff) is declared, you will see the files and folders deleted listed under C(path_contents). Note that C(absent) will not cause C(file) to fail if the C(path) does not exist as the state did not change.", "If C(directory), all intermediate subdirectories will be created if they do not exist. Since Ansible 1.7 they will be created with the supplied permissions.", "If C(file), with no other options, returns the current state of C(path).", "If C(file), even with other options (such as C(mode)), the file will be modified if it exists but will NOT be created if it does not exist. Set to C(touch) or use the M(ansible.builtin.copy) or M(ansible.builtin.template) module if you want to create the file if it does not exist.", "If C(hard), the hard link will be created or changed.", "If C(link), the symbolic link will be created or changed.", "If C(touch) (new in 1.4), an empty file will be created if the file does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way C(touch) works from the command line).", "Default is the current state of the file if it exists, C(directory) if C(recurse=yes), or C(file) otherwise."], "choices": ["absent", "directory", "file", "hard", "link", "touch"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_vhosts.yml#task:[0]", "name": "rabbitmq_extra_vhosts | Create vhosts", "module": "rabbitmq_vhost", "index": 0, "play_index": -1, "defined_in": "tasks/rabbitmq_vhosts.yml", "local_key": "task taskfile:tasks/rabbitmq_vhosts.yml#task:[0]", "role": "ansible-rabbitmq", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"rabbitmq_created_vhosts": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_vhosts.yml#task:[0]"}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_extra_vhosts }}"}, "options": {"name": "rabbitmq_extra_vhosts | Create vhosts", "with_items": "{{ rabbitmq_extra_vhosts }}", "run_once": "{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}", "register": "rabbitmq_created_vhosts"}, "module_options": {"name": "{{ item['name'] }}", "state": "{{ item['state'] }}"}, "executable": "rabbitmq_vhost", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_extra_vhosts | Create vhosts\n  rabbitmq_vhost:\n    name: \"{{ item['name'] }}\"\n    state: \"{{ item['state'] }}\"\n  with_items: \"{{ rabbitmq_extra_vhosts }}\"\n  run_once: \"{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}\"\n  register: rabbitmq_created_vhosts\n", "line_num_in_file": [2, 9], "resolved_name": "", "possible_candidates": [{"py/tuple": ["community.rabbitmq.rabbitmq_vhost", {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}]}], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "community.rabbitmq.rabbitmq_vhost", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": ["community.rabbitmq.rabbitmq_vhost"], "suggested_dependency": [{"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["name", "vhost", "node", "state", "tracing", "trace"], "required_arg_keys": [{"key": "name", "aliases": ["vhost"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["The name of the vhost to manage"], "choices": null, "aliases": ["vhost"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["erlang node name of the rabbit we wish to configure"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["The state of vhost"], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tracing", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Enable/disable tracing for a vhost"], "choices": null, "aliases": ["trace"]}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["The name of the vhost to manage"], "choices": null, "aliases": ["vhost"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["erlang node name of the rabbit we wish to configure"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["The state of vhost"], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tracing", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Enable/disable tracing for a vhost"], "choices": null, "aliases": ["trace"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "name", "value": "{{ item['name'] }}", "undefined_variables": ["item['name']"]}, {"key": "state", "value": "{{ item['state'] }}", "undefined_variables": ["item['state']"]}], "unknown_type_values": [{"key": "name", "expected_type": "str", "unknown_type_value": "{{ item['name'] }}"}, {"key": "state", "expected_type": "str", "unknown_type_value": "{{ item['state'] }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined", "rabbitmq_created_vhosts"], "vars_used_in_target_task": ["item", "rabbitmq_extra_vhosts", "item['name']", "item['state']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_vhosts.yml#task:[1]", "name": "rabbitmq_extra_vhosts | Check guest administrator is present", "module": "command", "index": 1, "play_index": -1, "defined_in": "tasks/rabbitmq_vhosts.yml", "local_key": "task taskfile:tasks/rabbitmq_vhosts.yml#task:[1]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"rabbitmq_existing_users": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_vhosts.yml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_extra_vhosts | Check guest administrator is present", "become": true, "run_once": "{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}", "when": "rabbitmq_created_vhosts.changed", "changed_when": false, "register": "rabbitmq_existing_users"}, "module_options": "rabbitmqctl -q list_users", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_extra_vhosts | Check guest administrator is present # noqa 503\n  command: rabbitmqctl -q list_users\n  become: true\n  run_once: \"{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}\"\n  when: rabbitmq_created_vhosts.changed\n  changed_when: false\n  register: rabbitmq_existing_users\n", "line_num_in_file": [10, 17], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']", "item", "rabbitmq_extra_vhosts", "item['name']", "item['state']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined", "rabbitmq_created_vhosts", "rabbitmq_existing_users"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_vhosts.yml#task:[2]", "name": "rabbitmq_extra_vhosts | Give access to new vhosts to guest administrator", "module": "command", "index": 2, "play_index": -1, "defined_in": "tasks/rabbitmq_vhosts.yml", "local_key": "task taskfile:tasks/rabbitmq_vhosts.yml#task:[2]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_created_vhosts.results|selectattr('changed')|list }}"}, "options": {"name": "rabbitmq_extra_vhosts | Give access to new vhosts to guest administrator", "become": true, "run_once": "{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}", "with_items": "{{ rabbitmq_created_vhosts.results|selectattr('changed')|list }}", "when": ["item['state'] == 'present'", "rabbitmq_existing_users.stdout_lines | map('regex_search', '^guest\\\\s\\\\[.*administrator.*\\\\]$') | list | difference([None]) | length > 0"]}, "module_options": "rabbitmqctl -q set_permissions -p {{ item['name'] }} guest '.*' '.*' '.*'", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_extra_vhosts | Give access to new vhosts to guest administrator\n  command: \"rabbitmqctl -q set_permissions -p {{ item['name'] }} guest '.*' '.*' '.*'\"\n  become: true\n  run_once: \"{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}\"\n  with_items: \"{{ rabbitmq_created_vhosts.results|selectattr('changed')|list }}\"\n  when:\n    - item['state'] == 'present'\n    - rabbitmq_existing_users.stdout_lines | map('regex_search', '^guest\\\\s\\\\[.*administrator.*\\\\]$') | list | difference([None]) | length > 0", "line_num_in_file": [18, 26], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']", "item", "rabbitmq_extra_vhosts", "item['name']", "item['state']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined", "rabbitmq_created_vhosts", "rabbitmq_existing_users"], "vars_used_in_target_task": ["item", "rabbitmq_created_vhosts.results", "item['name']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[0]", "name": "debian | Adding Pre-Reqs", "module": "apt", "index": 0, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[0]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "debian | Adding Pre-Reqs", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": ["gnupg2", "apt-transport-https"], "state": "present", "update_cache": true}, "executable": "apt", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | Adding Pre-Reqs\n  apt:\n    name:\n      - gnupg2\n      - apt-transport-https\n    state: present\n    update_cache: true\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [2, 12], "resolved_name": "ansible.builtin.apt", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.apt", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.apt", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_change_held_packages", "allow_downgrade", "allow-downgrade", "allow_downgrades", "allow-downgrades", "allow_unauthenticated", "allow-unauthenticated", "autoclean", "autoremove", "cache_valid_time", "clean", "deb", "default_release", "default-release", "dpkg_options", "fail_on_autoremove", "force", "force_apt_get", "install_recommends", "install-recommends", "lock_timeout", "name", "package", "pkg", "only_upgrade", "policy_rc_d", "purge", "state", "update_cache", "update-cache", "update_cache_retries", "update_cache_retry_max_delay", "upgrade"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_change_held_packages", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Allows changing the version of a package which is on the apt hold list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--allow-downgrades) option for I(apt).", "This option enables the named package and version to replace an already installed higher version of that package.", "Note that setting I(allow_downgrade=true) can make this module behave in a non-idempotent way.", "(The task could end up with a set of packages that does not match the complete list of specified packages to install)."], "choices": null, "aliases": ["allow-downgrade", "allow_downgrades", "allow-downgrades"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_unauthenticated", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Ignore if packages cannot be authenticated. This is useful for bootstrapping environments that manage their own apt-key setup.", "C(allow_unauthenticated) is only supported with state: I(install)/I(present)"], "choices": null, "aliases": ["allow-unauthenticated"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoclean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), cleans the local repository of retrieved package files that can no longer be downloaded."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), remove unused dependency packages for all module states except I(build-dep). It can also be used as the only option.", "Previous to version 2.4, autoclean was also an alias for autoremove, now it is its own separate command. See documentation for further information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cache_valid_time", "type": "int", "elements": "", "default": 0, "required": false, "description": ["Update the apt cache if it is older than the I(cache_valid_time). This option is set in seconds.", "As of Ansible 2.4, if explicitly set, this sets I(update_cache=yes)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "clean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Run the equivalent of C(apt-get clean) to clear out the local repository of retrieved package files. It removes everything but the lock file from /var/cache/apt/archives/ and /var/cache/apt/archives/partial/.", "Can be run as part of the package installation (clean runs before install) or as a separate step."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "deb", "type": "str", "elements": "", "default": null, "required": false, "description": ["Path to a .deb package on the remote machine.", "If :// in the path, ansible will attempt to download deb before installing. (Version added 2.1)", "Requires the C(xz-utils) package to extract the control file of the deb package to install."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "default_release", "type": "str", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(-t) option for I(apt) and sets pin priorities"], "choices": null, "aliases": ["default-release"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dpkg_options", "type": "str", "elements": "", "default": "force-confdef,force-confold", "required": false, "description": ["Add dpkg options to apt command. Defaults to '-o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\"'", "Options should be supplied as comma separated list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fail_on_autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--no-remove) option for C(apt).", "If C(true), it is ensured that no packages will be removed or the task will fail.", "C(fail_on_autoremove) is only supported with state except C(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--force-yes) to I(apt-get) and implies C(allow_unauthenticated: yes) and C(allow_downgrade: yes)", "This option will disable checking both the packages' signatures and the certificates of the web servers they are downloaded from.", "This option *is not* the equivalent of passing the C(-f) flag to I(apt-get) on the command line", "**This is a destructive operation with the potential to destroy your system, and it should almost never be used.** Please also see C(man apt-get) for more information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_apt_get", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force usage of apt-get instead of aptitude"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_recommends", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(--no-install-recommends) option for I(apt). C(true) installs recommended packages.  C(false) does not install recommended packages. By default, Ansible will use the same defaults as the operating system. Suggested packages are never installed."], "choices": null, "aliases": ["install-recommends"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 60, "required": false, "description": ["How many seconds will this action wait to acquire a lock on the apt db.", "Sometimes there is a transitory lock and this will retry at least until timeout is hit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A list of package names, like C(foo), or package specifier with version, like C(foo=1.0) or C(foo>=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported."], "choices": null, "aliases": ["package", "pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "only_upgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only upgrade a package if it is already installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "policy_rc_d", "type": "int", "elements": "", "default": null, "required": false, "description": ["Force the exit code of /usr/sbin/policy-rc.d.", "For example, if I(policy_rc_d=101) the installed package will not trigger a service start.", "If /usr/sbin/policy-rc.d already exists, it is backed up and restored after the package installation.", "If C(null), the /usr/sbin/policy-rc.d isn't created/changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "purge", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Will force purging of configuration files if the module state is set to I(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Indicates the desired package state. C(latest) ensures that the latest version is installed. C(build-dep) ensures the package build dependencies are installed. C(fixed) attempt to correct a system with broken dependencies in place."], "choices": ["absent", "build-dep", "latest", "present", "fixed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step.", "Default is not to update the cache."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "upgrade", "type": "str", "elements": "", "default": "no", "required": false, "description": ["If yes or safe, performs an aptitude safe-upgrade.", "If full, performs an aptitude full-upgrade.", "If dist, performs an apt-get dist-upgrade.", "Note: This does not upgrade a specific package, use state=latest for that.", "Note: Since 2.4, apt-get is used as a fall-back if aptitude is not present."], "choices": ["dist", "full", "no", "safe", "yes"], "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_change_held_packages", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Allows changing the version of a package which is on the apt hold list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--allow-downgrades) option for I(apt).", "This option enables the named package and version to replace an already installed higher version of that package.", "Note that setting I(allow_downgrade=true) can make this module behave in a non-idempotent way.", "(The task could end up with a set of packages that does not match the complete list of specified packages to install)."], "choices": null, "aliases": ["allow-downgrade", "allow_downgrades", "allow-downgrades"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_unauthenticated", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Ignore if packages cannot be authenticated. This is useful for bootstrapping environments that manage their own apt-key setup.", "C(allow_unauthenticated) is only supported with state: I(install)/I(present)"], "choices": null, "aliases": ["allow-unauthenticated"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoclean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), cleans the local repository of retrieved package files that can no longer be downloaded."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), remove unused dependency packages for all module states except I(build-dep). It can also be used as the only option.", "Previous to version 2.4, autoclean was also an alias for autoremove, now it is its own separate command. See documentation for further information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cache_valid_time", "type": "int", "elements": "", "default": 0, "required": false, "description": ["Update the apt cache if it is older than the I(cache_valid_time). This option is set in seconds.", "As of Ansible 2.4, if explicitly set, this sets I(update_cache=yes)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "clean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Run the equivalent of C(apt-get clean) to clear out the local repository of retrieved package files. It removes everything but the lock file from /var/cache/apt/archives/ and /var/cache/apt/archives/partial/.", "Can be run as part of the package installation (clean runs before install) or as a separate step."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "deb", "type": "str", "elements": "", "default": null, "required": false, "description": ["Path to a .deb package on the remote machine.", "If :// in the path, ansible will attempt to download deb before installing. (Version added 2.1)", "Requires the C(xz-utils) package to extract the control file of the deb package to install."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "default_release", "type": "str", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(-t) option for I(apt) and sets pin priorities"], "choices": null, "aliases": ["default-release"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dpkg_options", "type": "str", "elements": "", "default": "force-confdef,force-confold", "required": false, "description": ["Add dpkg options to apt command. Defaults to '-o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\"'", "Options should be supplied as comma separated list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fail_on_autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--no-remove) option for C(apt).", "If C(true), it is ensured that no packages will be removed or the task will fail.", "C(fail_on_autoremove) is only supported with state except C(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--force-yes) to I(apt-get) and implies C(allow_unauthenticated: yes) and C(allow_downgrade: yes)", "This option will disable checking both the packages' signatures and the certificates of the web servers they are downloaded from.", "This option *is not* the equivalent of passing the C(-f) flag to I(apt-get) on the command line", "**This is a destructive operation with the potential to destroy your system, and it should almost never be used.** Please also see C(man apt-get) for more information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_apt_get", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force usage of apt-get instead of aptitude"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_recommends", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(--no-install-recommends) option for I(apt). C(true) installs recommended packages.  C(false) does not install recommended packages. By default, Ansible will use the same defaults as the operating system. Suggested packages are never installed."], "choices": null, "aliases": ["install-recommends"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 60, "required": false, "description": ["How many seconds will this action wait to acquire a lock on the apt db.", "Sometimes there is a transitory lock and this will retry at least until timeout is hit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A list of package names, like C(foo), or package specifier with version, like C(foo=1.0) or C(foo>=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported."], "choices": null, "aliases": ["package", "pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "only_upgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only upgrade a package if it is already installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "policy_rc_d", "type": "int", "elements": "", "default": null, "required": false, "description": ["Force the exit code of /usr/sbin/policy-rc.d.", "For example, if I(policy_rc_d=101) the installed package will not trigger a service start.", "If /usr/sbin/policy-rc.d already exists, it is backed up and restored after the package installation.", "If C(null), the /usr/sbin/policy-rc.d isn't created/changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "purge", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Will force purging of configuration files if the module state is set to I(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Indicates the desired package state. C(latest) ensures that the latest version is installed. C(build-dep) ensures the package build dependencies are installed. C(fixed) attempt to correct a system with broken dependencies in place."], "choices": ["absent", "build-dep", "latest", "present", "fixed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step.", "Default is not to update the cache."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "upgrade", "type": "str", "elements": "", "default": "no", "required": false, "description": ["If yes or safe, performs an aptitude safe-upgrade.", "If full, performs an aptitude full-upgrade.", "If dist, performs an apt-get dist-upgrade.", "Note: This does not upgrade a specific package, use state=latest for that.", "Note: Since 2.4, apt-get is used as a fall-back if aptitude is not present."], "choices": ["dist", "full", "no", "safe", "yes"], "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[1]", "name": "debian | adding RabbitMQ public GPG key to the apt repo", "module": "apt_key", "index": 1, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[1]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "debian | adding RabbitMQ public GPG key to the apt repo", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"url": "{{ rabbitmq_debian_repo_key }}", "state": "present"}, "executable": "apt_key", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | adding RabbitMQ public GPG key to the apt repo\n  apt_key:\n    url: \"{{ rabbitmq_debian_repo_key }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [13, 20], "resolved_name": "ansible.builtin.apt_key", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.apt_key", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.apt_key", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["data", "file", "id", "keyring", "keyserver", "state", "url", "validate_certs"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "data", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyfile contents to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The path to a keyfile on the remote server to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "id", "type": "str", "elements": "", "default": null, "required": false, "description": ["The identifier of the key.", "Including this allows check mode to correctly report the changed state.", "If specifying a subkey's id be aware that apt-key does not understand how to remove keys via a subkey id.  Specify the primary key's id instead.", "This parameter is required when C(state) is set to C(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyring", "type": "str", "elements": "", "default": null, "required": false, "description": ["The full path to specific keyring file in C(/etc/apt/trusted.gpg.d/)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyserver", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyserver to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Ensures that the key is present (added) or absent (revoked)."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": false, "description": ["The URL to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "data", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyfile contents to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The path to a keyfile on the remote server to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "id", "type": "str", "elements": "", "default": null, "required": false, "description": ["The identifier of the key.", "Including this allows check mode to correctly report the changed state.", "If specifying a subkey's id be aware that apt-key does not understand how to remove keys via a subkey id.  Specify the primary key's id instead.", "This parameter is required when C(state) is set to C(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyring", "type": "str", "elements": "", "default": null, "required": false, "description": ["The full path to specific keyring file in C(/etc/apt/trusted.gpg.d/)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyserver", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyserver to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Ensures that the key is present (added) or absent (revoked)."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": false, "description": ["The URL to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": ["rabbitmq_debian_repo_key"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[2]", "name": "debian | adding RabbitMQ repo", "module": "apt_repository", "index": 2, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[2]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "debian | adding RabbitMQ repo", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"repo": "{{ rabbitmq_debian_repo }}", "state": "present"}, "executable": "apt_repository", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | adding RabbitMQ repo\n  apt_repository:\n    repo: \"{{ rabbitmq_debian_repo }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [21, 28], "resolved_name": "ansible.builtin.apt_repository", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.apt_repository", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.apt_repository", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["codename", "filename", "install_python_apt", "mode", "repo", "state", "update_cache", "update-cache", "update_cache_retries", "update_cache_retry_max_delay", "validate_certs"], "required_arg_keys": [{"key": "repo", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "codename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Override the distribution codename to use for PPA repositories. Should usually only be set when working with a PPA on a non-Ubuntu target (for example, Debian or Mint)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "filename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Sets the name of the source list file in sources.list.d. Defaults to a file name based on the repository source url. The .list extension will be automatically added."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_python_apt", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to automatically try to install the Python apt library or not, if it is not already installed. Without this library, the module does not work.", "Runs C(apt-get install python-apt) for Python 2, and C(apt-get install python3-apt) for Python 3.", "Only works with the system Python 2 or Python 3. If you are using a Python on the remote that is not the system Python, set I(install_python_apt=false) and ensure that the Python apt library for your Python version is installed some other way."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The octal mode for newly created files in sources.list.d.", "Default is what system uses (probably 0644)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "repo", "type": "str", "elements": "", "default": null, "required": true, "description": ["A source string for the repository."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["A source string state."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Run the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "codename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Override the distribution codename to use for PPA repositories. Should usually only be set when working with a PPA on a non-Ubuntu target (for example, Debian or Mint)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "filename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Sets the name of the source list file in sources.list.d. Defaults to a file name based on the repository source url. The .list extension will be automatically added."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_python_apt", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to automatically try to install the Python apt library or not, if it is not already installed. Without this library, the module does not work.", "Runs C(apt-get install python-apt) for Python 2, and C(apt-get install python3-apt) for Python 3.", "Only works with the system Python 2 or Python 3. If you are using a Python on the remote that is not the system Python, set I(install_python_apt=false) and ensure that the Python apt library for your Python version is installed some other way."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The octal mode for newly created files in sources.list.d.", "Default is what system uses (probably 0644)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "repo", "type": "str", "elements": "", "default": null, "required": true, "description": ["A source string for the repository."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["A source string state."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Run the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "repo", "expected_type": "str", "unknown_type_value": "deb https://dl.bintray.com/rabbitmq/debian {{ ansible_distribution_release }} main #bintray"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": ["rabbitmq_debian_repo"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[3]", "name": "debian | add Rabbitmq erlang repo key", "module": "apt_key", "index": 3, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[3]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[3]"}, "set_facts": {}, "loop": {}, "options": {"name": "debian | add Rabbitmq erlang repo key", "become": true, "register": "result", "until": "result is successful", "when": "rabbitmq_debian_erlang_from_rabbit"}, "module_options": {"url": "https://bintray.com/user/downloadSubjectPublicKey?username=rabbitmq-erlang", "state": "present"}, "executable": "apt_key", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | add Rabbitmq erlang repo key\n  apt_key:\n    url: https://bintray.com/user/downloadSubjectPublicKey?username=rabbitmq-erlang\n    state: present\n  become: true\n  register: result\n  until: result is successful\n  when: rabbitmq_debian_erlang_from_rabbit\n", "line_num_in_file": [29, 37], "resolved_name": "ansible.builtin.apt_key", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.apt_key", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.apt_key", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["data", "file", "id", "keyring", "keyserver", "state", "url", "validate_certs"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "data", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyfile contents to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The path to a keyfile on the remote server to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "id", "type": "str", "elements": "", "default": null, "required": false, "description": ["The identifier of the key.", "Including this allows check mode to correctly report the changed state.", "If specifying a subkey's id be aware that apt-key does not understand how to remove keys via a subkey id.  Specify the primary key's id instead.", "This parameter is required when C(state) is set to C(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyring", "type": "str", "elements": "", "default": null, "required": false, "description": ["The full path to specific keyring file in C(/etc/apt/trusted.gpg.d/)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyserver", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyserver to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Ensures that the key is present (added) or absent (revoked)."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": false, "description": ["The URL to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "data", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyfile contents to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The path to a keyfile on the remote server to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "id", "type": "str", "elements": "", "default": null, "required": false, "description": ["The identifier of the key.", "Including this allows check mode to correctly report the changed state.", "If specifying a subkey's id be aware that apt-key does not understand how to remove keys via a subkey id.  Specify the primary key's id instead.", "This parameter is required when C(state) is set to C(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyring", "type": "str", "elements": "", "default": null, "required": false, "description": ["The full path to specific keyring file in C(/etc/apt/trusted.gpg.d/)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyserver", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyserver to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Ensures that the key is present (added) or absent (revoked)."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": false, "description": ["The URL to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[4]", "name": "debian | add Rabbitmq erlang repo", "module": "apt_repository", "index": 4, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[4]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "debian | add Rabbitmq erlang repo", "become": true, "when": "rabbitmq_debian_erlang_from_rabbit"}, "module_options": {"repo": "deb https://dl.bintray.com/rabbitmq-erlang/debian {{ ansible_distribution_release }} erlang", "state": "present"}, "executable": "apt_repository", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | add Rabbitmq erlang repo key\n  apt_key:\n    url: https://bintray.com/user/downloadSubjectPublicKey?username=rabbitmq-erlang\n    state: present\n  become: true\n  register: result\n  until: result is successful\n  when: rabbitmq_debian_erlang_from_rabbit\n", "line_num_in_file": [29, 37], "resolved_name": "ansible.builtin.apt_repository", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.apt_repository", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.apt_repository", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["codename", "filename", "install_python_apt", "mode", "repo", "state", "update_cache", "update-cache", "update_cache_retries", "update_cache_retry_max_delay", "validate_certs"], "required_arg_keys": [{"key": "repo", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "codename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Override the distribution codename to use for PPA repositories. Should usually only be set when working with a PPA on a non-Ubuntu target (for example, Debian or Mint)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "filename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Sets the name of the source list file in sources.list.d. Defaults to a file name based on the repository source url. The .list extension will be automatically added."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_python_apt", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to automatically try to install the Python apt library or not, if it is not already installed. Without this library, the module does not work.", "Runs C(apt-get install python-apt) for Python 2, and C(apt-get install python3-apt) for Python 3.", "Only works with the system Python 2 or Python 3. If you are using a Python on the remote that is not the system Python, set I(install_python_apt=false) and ensure that the Python apt library for your Python version is installed some other way."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The octal mode for newly created files in sources.list.d.", "Default is what system uses (probably 0644)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "repo", "type": "str", "elements": "", "default": null, "required": true, "description": ["A source string for the repository."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["A source string state."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Run the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "codename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Override the distribution codename to use for PPA repositories. Should usually only be set when working with a PPA on a non-Ubuntu target (for example, Debian or Mint)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "filename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Sets the name of the source list file in sources.list.d. Defaults to a file name based on the repository source url. The .list extension will be automatically added."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_python_apt", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to automatically try to install the Python apt library or not, if it is not already installed. Without this library, the module does not work.", "Runs C(apt-get install python-apt) for Python 2, and C(apt-get install python3-apt) for Python 3.", "Only works with the system Python 2 or Python 3. If you are using a Python on the remote that is not the system Python, set I(install_python_apt=false) and ensure that the Python apt library for your Python version is installed some other way."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The octal mode for newly created files in sources.list.d.", "Default is what system uses (probably 0644)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "repo", "type": "str", "elements": "", "default": null, "required": true, "description": ["A source string for the repository."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["A source string state."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Run the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "repo", "expected_type": "str", "unknown_type_value": "deb https://dl.bintray.com/rabbitmq-erlang/debian {{ ansible_distribution_release }} erlang"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": ["ansible_distribution_release"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[5]", "name": "debian | installing RabbitMQ server", "module": "apt", "index": 5, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[5]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[5]"}, "set_facts": {}, "loop": {}, "options": {"name": "debian | installing RabbitMQ server", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": ["rabbitmq-server{{ (rabbitmq_debian_version_defined and rabbitmq_debian_version is defined) | ternary(['=',rabbitmq_debian_version] | join(''),'') }}"], "state": "present"}, "executable": "apt", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | installing RabbitMQ server\n  apt:\n    name:\n      - rabbitmq-server{{ (rabbitmq_debian_version_defined and rabbitmq_debian_version is defined) | ternary(['=',rabbitmq_debian_version] | join(''),'') }}\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [45, 53], "resolved_name": "ansible.builtin.apt", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.apt", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.apt", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_change_held_packages", "allow_downgrade", "allow-downgrade", "allow_downgrades", "allow-downgrades", "allow_unauthenticated", "allow-unauthenticated", "autoclean", "autoremove", "cache_valid_time", "clean", "deb", "default_release", "default-release", "dpkg_options", "fail_on_autoremove", "force", "force_apt_get", "install_recommends", "install-recommends", "lock_timeout", "name", "package", "pkg", "only_upgrade", "policy_rc_d", "purge", "state", "update_cache", "update-cache", "update_cache_retries", "update_cache_retry_max_delay", "upgrade"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_change_held_packages", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Allows changing the version of a package which is on the apt hold list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--allow-downgrades) option for I(apt).", "This option enables the named package and version to replace an already installed higher version of that package.", "Note that setting I(allow_downgrade=true) can make this module behave in a non-idempotent way.", "(The task could end up with a set of packages that does not match the complete list of specified packages to install)."], "choices": null, "aliases": ["allow-downgrade", "allow_downgrades", "allow-downgrades"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_unauthenticated", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Ignore if packages cannot be authenticated. This is useful for bootstrapping environments that manage their own apt-key setup.", "C(allow_unauthenticated) is only supported with state: I(install)/I(present)"], "choices": null, "aliases": ["allow-unauthenticated"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoclean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), cleans the local repository of retrieved package files that can no longer be downloaded."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), remove unused dependency packages for all module states except I(build-dep). It can also be used as the only option.", "Previous to version 2.4, autoclean was also an alias for autoremove, now it is its own separate command. See documentation for further information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cache_valid_time", "type": "int", "elements": "", "default": 0, "required": false, "description": ["Update the apt cache if it is older than the I(cache_valid_time). This option is set in seconds.", "As of Ansible 2.4, if explicitly set, this sets I(update_cache=yes)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "clean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Run the equivalent of C(apt-get clean) to clear out the local repository of retrieved package files. It removes everything but the lock file from /var/cache/apt/archives/ and /var/cache/apt/archives/partial/.", "Can be run as part of the package installation (clean runs before install) or as a separate step."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "deb", "type": "str", "elements": "", "default": null, "required": false, "description": ["Path to a .deb package on the remote machine.", "If :// in the path, ansible will attempt to download deb before installing. (Version added 2.1)", "Requires the C(xz-utils) package to extract the control file of the deb package to install."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "default_release", "type": "str", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(-t) option for I(apt) and sets pin priorities"], "choices": null, "aliases": ["default-release"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dpkg_options", "type": "str", "elements": "", "default": "force-confdef,force-confold", "required": false, "description": ["Add dpkg options to apt command. Defaults to '-o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\"'", "Options should be supplied as comma separated list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fail_on_autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--no-remove) option for C(apt).", "If C(true), it is ensured that no packages will be removed or the task will fail.", "C(fail_on_autoremove) is only supported with state except C(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--force-yes) to I(apt-get) and implies C(allow_unauthenticated: yes) and C(allow_downgrade: yes)", "This option will disable checking both the packages' signatures and the certificates of the web servers they are downloaded from.", "This option *is not* the equivalent of passing the C(-f) flag to I(apt-get) on the command line", "**This is a destructive operation with the potential to destroy your system, and it should almost never be used.** Please also see C(man apt-get) for more information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_apt_get", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force usage of apt-get instead of aptitude"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_recommends", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(--no-install-recommends) option for I(apt). C(true) installs recommended packages.  C(false) does not install recommended packages. By default, Ansible will use the same defaults as the operating system. Suggested packages are never installed."], "choices": null, "aliases": ["install-recommends"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 60, "required": false, "description": ["How many seconds will this action wait to acquire a lock on the apt db.", "Sometimes there is a transitory lock and this will retry at least until timeout is hit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A list of package names, like C(foo), or package specifier with version, like C(foo=1.0) or C(foo>=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported."], "choices": null, "aliases": ["package", "pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "only_upgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only upgrade a package if it is already installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "policy_rc_d", "type": "int", "elements": "", "default": null, "required": false, "description": ["Force the exit code of /usr/sbin/policy-rc.d.", "For example, if I(policy_rc_d=101) the installed package will not trigger a service start.", "If /usr/sbin/policy-rc.d already exists, it is backed up and restored after the package installation.", "If C(null), the /usr/sbin/policy-rc.d isn't created/changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "purge", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Will force purging of configuration files if the module state is set to I(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Indicates the desired package state. C(latest) ensures that the latest version is installed. C(build-dep) ensures the package build dependencies are installed. C(fixed) attempt to correct a system with broken dependencies in place."], "choices": ["absent", "build-dep", "latest", "present", "fixed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step.", "Default is not to update the cache."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "upgrade", "type": "str", "elements": "", "default": "no", "required": false, "description": ["If yes or safe, performs an aptitude safe-upgrade.", "If full, performs an aptitude full-upgrade.", "If dist, performs an apt-get dist-upgrade.", "Note: This does not upgrade a specific package, use state=latest for that.", "Note: Since 2.4, apt-get is used as a fall-back if aptitude is not present."], "choices": ["dist", "full", "no", "safe", "yes"], "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_change_held_packages", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Allows changing the version of a package which is on the apt hold list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--allow-downgrades) option for I(apt).", "This option enables the named package and version to replace an already installed higher version of that package.", "Note that setting I(allow_downgrade=true) can make this module behave in a non-idempotent way.", "(The task could end up with a set of packages that does not match the complete list of specified packages to install)."], "choices": null, "aliases": ["allow-downgrade", "allow_downgrades", "allow-downgrades"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_unauthenticated", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Ignore if packages cannot be authenticated. This is useful for bootstrapping environments that manage their own apt-key setup.", "C(allow_unauthenticated) is only supported with state: I(install)/I(present)"], "choices": null, "aliases": ["allow-unauthenticated"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoclean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), cleans the local repository of retrieved package files that can no longer be downloaded."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), remove unused dependency packages for all module states except I(build-dep). It can also be used as the only option.", "Previous to version 2.4, autoclean was also an alias for autoremove, now it is its own separate command. See documentation for further information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cache_valid_time", "type": "int", "elements": "", "default": 0, "required": false, "description": ["Update the apt cache if it is older than the I(cache_valid_time). This option is set in seconds.", "As of Ansible 2.4, if explicitly set, this sets I(update_cache=yes)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "clean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Run the equivalent of C(apt-get clean) to clear out the local repository of retrieved package files. It removes everything but the lock file from /var/cache/apt/archives/ and /var/cache/apt/archives/partial/.", "Can be run as part of the package installation (clean runs before install) or as a separate step."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "deb", "type": "str", "elements": "", "default": null, "required": false, "description": ["Path to a .deb package on the remote machine.", "If :// in the path, ansible will attempt to download deb before installing. (Version added 2.1)", "Requires the C(xz-utils) package to extract the control file of the deb package to install."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "default_release", "type": "str", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(-t) option for I(apt) and sets pin priorities"], "choices": null, "aliases": ["default-release"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dpkg_options", "type": "str", "elements": "", "default": "force-confdef,force-confold", "required": false, "description": ["Add dpkg options to apt command. Defaults to '-o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\"'", "Options should be supplied as comma separated list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fail_on_autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--no-remove) option for C(apt).", "If C(true), it is ensured that no packages will be removed or the task will fail.", "C(fail_on_autoremove) is only supported with state except C(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--force-yes) to I(apt-get) and implies C(allow_unauthenticated: yes) and C(allow_downgrade: yes)", "This option will disable checking both the packages' signatures and the certificates of the web servers they are downloaded from.", "This option *is not* the equivalent of passing the C(-f) flag to I(apt-get) on the command line", "**This is a destructive operation with the potential to destroy your system, and it should almost never be used.** Please also see C(man apt-get) for more information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_apt_get", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force usage of apt-get instead of aptitude"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_recommends", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(--no-install-recommends) option for I(apt). C(true) installs recommended packages.  C(false) does not install recommended packages. By default, Ansible will use the same defaults as the operating system. Suggested packages are never installed."], "choices": null, "aliases": ["install-recommends"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 60, "required": false, "description": ["How many seconds will this action wait to acquire a lock on the apt db.", "Sometimes there is a transitory lock and this will retry at least until timeout is hit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A list of package names, like C(foo), or package specifier with version, like C(foo=1.0) or C(foo>=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported."], "choices": null, "aliases": ["package", "pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "only_upgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only upgrade a package if it is already installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "policy_rc_d", "type": "int", "elements": "", "default": null, "required": false, "description": ["Force the exit code of /usr/sbin/policy-rc.d.", "For example, if I(policy_rc_d=101) the installed package will not trigger a service start.", "If /usr/sbin/policy-rc.d already exists, it is backed up and restored after the package installation.", "If C(null), the /usr/sbin/policy-rc.d isn't created/changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "purge", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Will force purging of configuration files if the module state is set to I(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Indicates the desired package state. C(latest) ensures that the latest version is installed. C(build-dep) ensures the package build dependencies are installed. C(fixed) attempt to correct a system with broken dependencies in place."], "choices": ["absent", "build-dep", "latest", "present", "fixed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step.", "Default is not to update the cache."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "upgrade", "type": "str", "elements": "", "default": "no", "required": false, "description": ["If yes or safe, performs an aptitude safe-upgrade.", "If full, performs an aptitude full-upgrade.", "If dist, performs an apt-get dist-upgrade.", "Note: This does not upgrade a specific package, use state=latest for that.", "Note: Since 2.4, apt-get is used as a fall-back if aptitude is not present."], "choices": ["dist", "full", "no", "safe", "yes"], "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[6]", "name": "debian | ensuring that the RabbitMQ service is running", "module": "service", "index": 6, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[6]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "debian | ensuring that the RabbitMQ service is running", "become": true}, "module_options": {"name": "rabbitmq-server", "state": "started", "enabled": true}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | ensuring that the RabbitMQ service is running\n  service:\n    name: rabbitmq-server\n    state: started\n    enabled: yes\n  become: true\n", "line_num_in_file": [54, 60], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/debian.yml#task:[7]", "name": "debian | enabling the RabbitMQ Management Console", "module": "rabbitmq_plugin", "index": 7, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[7]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "debian | enabling the RabbitMQ Management Console", "become": true, "notify": "restart rabbitmq-server"}, "module_options": {"names": "rabbitmq_management", "state": "enabled"}, "executable": "rabbitmq_plugin", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | enabling the RabbitMQ Management Console\n  rabbitmq_plugin:\n    names: rabbitmq_management\n    state: enabled\n  become: true\n  notify: restart rabbitmq-server", "line_num_in_file": [61, 67], "resolved_name": "", "possible_candidates": [{"py/tuple": ["community.rabbitmq.rabbitmq_plugin", {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}]}], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "community.rabbitmq.rabbitmq_plugin", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": ["community.rabbitmq.rabbitmq_plugin"], "suggested_dependency": [{"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["broker_state", "names", "name", "new_only", "prefix", "state"], "required_arg_keys": [{"key": "names", "aliases": ["name"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "broker_state", "type": "str", "elements": "", "default": "online", "required": false, "description": ["Specify whether the broker should be online or offline for the plugin change."], "choices": ["online", "offline"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "names", "type": "str", "elements": "", "default": null, "required": true, "description": ["Comma-separated list of plugin names. Also, accepts plugin name."], "choices": null, "aliases": ["name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "new_only", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Only enable missing plugins.", "Does not disable plugins that are not in the names list."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "prefix", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specify a custom install prefix to a Rabbit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "enabled", "required": false, "description": ["Specify if plugins are to be enabled or disabled."], "choices": ["enabled", "disabled"], "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "broker_state", "type": "str", "elements": "", "default": "online", "required": false, "description": ["Specify whether the broker should be online or offline for the plugin change."], "choices": ["online", "offline"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "names", "type": "str", "elements": "", "default": null, "required": true, "description": ["Comma-separated list of plugin names. Also, accepts plugin name."], "choices": null, "aliases": ["name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "new_only", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Only enable missing plugins.", "Does not disable plugins that are not in the names list."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "prefix", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specify a custom install prefix to a Rabbit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "enabled", "required": false, "description": ["Specify if plugins are to be enabled or disabled."], "choices": ["enabled", "disabled"], "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml#task:[0]", "name": "rabbitmq_ha_config | checking if rabbitmqadmin is installed", "module": "stat", "index": 0, "play_index": -1, "defined_in": "tasks/rabbitmq_ha_config.yml", "local_key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[0]", "role": "ansible-rabbitmq", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"rabbitmqadmin_check": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_ha_config | checking if rabbitmqadmin is installed", "register": "rabbitmqadmin_check"}, "module_options": {"path": "/usr/sbin/rabbitmqadmin"}, "executable": "stat", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_ha_config | checking if rabbitmqadmin is installed\n  stat:\n    path: /usr/sbin/rabbitmqadmin\n  register: rabbitmqadmin_check\n", "line_num_in_file": [2, 6], "resolved_name": "ansible.builtin.stat", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.stat", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.stat", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["checksum_algorithm", "checksum", "checksum_algo", "follow", "get_attributes", "attr", "attributes", "get_checksum", "get_mime", "mime", "mime_type", "mime-type", "path", "dest", "name"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum_algorithm", "type": "str", "elements": "", "default": "sha1", "required": false, "description": ["Algorithm to determine checksum of file.", "Will throw an error if the host is unable to use specified algorithm.", "The remote host has to support the hashing method specified, C(md5) can be unavailable if the host is FIPS-140 compliant."], "choices": ["md5", "sha1", "sha224", "sha256", "sha384", "sha512"], "aliases": ["checksum", "checksum_algo"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Whether to follow symlinks."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_attributes", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Get file attributes using lsattr tool if present."], "choices": null, "aliases": ["attr", "attributes"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_checksum", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to return a checksum of the file."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_mime", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Use file magic and return data about the nature of the file. this uses the 'file' utility found on most Linux/Unix systems.", "This will add both C(mime_type) and C(charset) fields to the return, if possible.", "In Ansible 2.3 this option changed from I(mime) to I(get_mime) and the default changed to C(true)."], "choices": null, "aliases": ["mime", "mime_type", "mime-type"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "path", "type": "str", "elements": "", "default": null, "required": true, "description": ["The full path of the file/object to get the facts of."], "choices": null, "aliases": ["dest", "name"]}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum_algorithm", "type": "str", "elements": "", "default": "sha1", "required": false, "description": ["Algorithm to determine checksum of file.", "Will throw an error if the host is unable to use specified algorithm.", "The remote host has to support the hashing method specified, C(md5) can be unavailable if the host is FIPS-140 compliant."], "choices": ["md5", "sha1", "sha224", "sha256", "sha384", "sha512"], "aliases": ["checksum", "checksum_algo"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Whether to follow symlinks."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_attributes", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Get file attributes using lsattr tool if present."], "choices": null, "aliases": ["attr", "attributes"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_checksum", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to return a checksum of the file."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_mime", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Use file magic and return data about the nature of the file. this uses the 'file' utility found on most Linux/Unix systems.", "This will add both C(mime_type) and C(charset) fields to the return, if possible.", "In Ansible 2.3 this option changed from I(mime) to I(get_mime) and the default changed to C(true)."], "choices": null, "aliases": ["mime", "mime_type", "mime-type"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "path", "type": "str", "elements": "", "default": null, "required": true, "description": ["The full path of the file/object to get the facts of."], "choices": null, "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']", "item", "rabbitmq_extra_vhosts", "item['name']", "item['state']", "rabbitmq_created_vhosts.results"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined", "rabbitmq_created_vhosts", "rabbitmq_existing_users", "rabbitmqadmin_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml#task:[1]", "name": "rabbit_ha_config | Installing rabbitMQ admin", "module": "get_url", "index": 1, "play_index": -1, "defined_in": "tasks/rabbitmq_ha_config.yml", "local_key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[1]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbit_ha_config | Installing rabbitMQ admin", "become": true, "notify": "restart rabbitmq-server", "when": "not rabbitmqadmin_check['stat']['exists']"}, "module_options": {"url": "http://guest:guest@localhost:15672/cli/rabbitmqadmin", "dest": "/usr/sbin/rabbitmqadmin", "mode": "u=rwx,g=rw,o=rw"}, "executable": "get_url", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbit_ha_config | Installing rabbitMQ admin\n  get_url:\n    url: http://guest:guest@localhost:15672/cli/rabbitmqadmin\n    dest: /usr/sbin/rabbitmqadmin\n    mode: u=rwx,g=rw,o=rw\n  become: true\n  notify: restart rabbitmq-server\n  when: not rabbitmqadmin_check['stat']['exists']\n", "line_num_in_file": [7, 15], "resolved_name": "ansible.builtin.get_url", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.get_url", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.get_url", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "ciphers", "client_cert", "client_key", "decompress", "dest", "force", "force_basic_auth", "group", "headers", "http_agent", "mode", "owner", "selevel", "serole", "setype", "seuser", "timeout", "tmp_dest", "unredirected_headers", "unsafe_writes", "url", "url_password", "password", "url_username", "username", "use_gssapi", "use_netrc", "use_proxy", "validate_certs"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "url", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum", "type": "str", "elements": "", "default": "", "required": false, "description": ["If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum|url>, e.g. checksum=\"sha256:D98291AC[...]B6DC7B97\", checksum=\"sha256:http://example.com/path/sha256sum.txt\"", "If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.", "The third party hashlib library can be installed for access to additional algorithms.", "Additionally, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the I(destination_checksum) would be calculated, and if checksum equals I(destination_checksum), the file download would be skipped (unless C(force) is true). If the checksum does not equal I(destination_checksum), the destination file is deleted."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "ciphers", "type": "list", "elements": "str", "default": null, "required": false, "description": ["SSL/TLS Ciphers to use for the request", "When a list is provided, all ciphers are joined in order with C(:)", "See the L(OpenSSL Cipher List Format,https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT) for more details.", "The available ciphers is dependent on the Python and OpenSSL/LibreSSL versions"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_cert", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted certificate chain file to be used for SSL client authentication.", "This file can also include the key as well, and if the key is included, C(client_key) is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_key", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted file that contains your private key to be used for SSL client authentication.", "If C(client_cert) contains both the certificate and key, this option is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "decompress", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to attempt to decompress gzip content-encoded responses"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Absolute path of where to download the file to.", "If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect.", "If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) and C(checksum) option), but replaced only if the contents changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["If C(true) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(false), the file will only be downloaded if the destination does not exist. Generally should be C(true) only for small local files.", "Prior to 0.6, this module behaved as if C(true) was the default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_basic_auth", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the sending of the Basic authentication header upon initial request.", "httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "headers", "type": "dict", "elements": "", "default": null, "required": false, "description": ["Add custom HTTP headers to a request in hash/dict format.", "The hash/dict format was added in Ansible 2.6.", "Previous versions used a C(\"key:value,key:value\") string format.", "The C(\"key:value,key:value\") string format is deprecated and has been removed in version 2.10."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "http_agent", "type": "str", "elements": "", "default": "ansible-httpget", "required": false, "description": ["Header to identify as, generally appears in web server logs."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "timeout", "type": "int", "elements": "", "default": 10, "required": false, "description": ["Timeout in seconds for URL request."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tmp_dest", "type": "str", "elements": "", "default": null, "required": false, "description": ["Absolute path of where temporary file is downloaded to.", "When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting", "When run on Ansible prior to 2.5, it defaults to C(TMPDIR), C(TEMP) or C(TMP) env variables or a platform specific value.", "U(https://docs.python.org/3/library/tempfile.html#tempfile.tempdir)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unredirected_headers", "type": "list", "elements": "str", "default": [], "required": false, "description": ["A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": true, "description": ["HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_password", "type": "str", "elements": "", "default": null, "required": false, "description": ["The password for use in HTTP basic authentication.", "If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.", "Since version 2.8 you can also use the 'password' alias for this option."], "choices": null, "aliases": ["password"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_username", "type": "str", "elements": "", "default": null, "required": false, "description": ["The username for use in HTTP basic authentication.", "This parameter can be used without C(url_password) for sites that allow empty passwords.", "Since version 2.8 you can also use the C(username) alias for this option."], "choices": null, "aliases": ["username"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_gssapi", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.", "Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.", "Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.", "NTLM authentication is I(not) supported even if the GSSAPI mech for NTLM has been installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_netrc", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determining whether to use credentials from ``~/.netrc`` file", "By default .netrc is used with Basic authentication headers", "When set to False, .netrc credentials are ignored"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_proxy", "type": "bool", "elements": "", "default": true, "required": false, "description": ["if C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If C(false), SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum", "type": "str", "elements": "", "default": "", "required": false, "description": ["If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum|url>, e.g. checksum=\"sha256:D98291AC[...]B6DC7B97\", checksum=\"sha256:http://example.com/path/sha256sum.txt\"", "If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.", "The third party hashlib library can be installed for access to additional algorithms.", "Additionally, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the I(destination_checksum) would be calculated, and if checksum equals I(destination_checksum), the file download would be skipped (unless C(force) is true). If the checksum does not equal I(destination_checksum), the destination file is deleted."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "ciphers", "type": "list", "elements": "str", "default": null, "required": false, "description": ["SSL/TLS Ciphers to use for the request", "When a list is provided, all ciphers are joined in order with C(:)", "See the L(OpenSSL Cipher List Format,https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT) for more details.", "The available ciphers is dependent on the Python and OpenSSL/LibreSSL versions"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_cert", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted certificate chain file to be used for SSL client authentication.", "This file can also include the key as well, and if the key is included, C(client_key) is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_key", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted file that contains your private key to be used for SSL client authentication.", "If C(client_cert) contains both the certificate and key, this option is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "decompress", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to attempt to decompress gzip content-encoded responses"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Absolute path of where to download the file to.", "If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect.", "If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) and C(checksum) option), but replaced only if the contents changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["If C(true) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(false), the file will only be downloaded if the destination does not exist. Generally should be C(true) only for small local files.", "Prior to 0.6, this module behaved as if C(true) was the default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_basic_auth", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the sending of the Basic authentication header upon initial request.", "httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "headers", "type": "dict", "elements": "", "default": null, "required": false, "description": ["Add custom HTTP headers to a request in hash/dict format.", "The hash/dict format was added in Ansible 2.6.", "Previous versions used a C(\"key:value,key:value\") string format.", "The C(\"key:value,key:value\") string format is deprecated and has been removed in version 2.10."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "http_agent", "type": "str", "elements": "", "default": "ansible-httpget", "required": false, "description": ["Header to identify as, generally appears in web server logs."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "timeout", "type": "int", "elements": "", "default": 10, "required": false, "description": ["Timeout in seconds for URL request."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tmp_dest", "type": "str", "elements": "", "default": null, "required": false, "description": ["Absolute path of where temporary file is downloaded to.", "When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting", "When run on Ansible prior to 2.5, it defaults to C(TMPDIR), C(TEMP) or C(TMP) env variables or a platform specific value.", "U(https://docs.python.org/3/library/tempfile.html#tempfile.tempdir)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unredirected_headers", "type": "list", "elements": "str", "default": [], "required": false, "description": ["A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": true, "description": ["HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_password", "type": "str", "elements": "", "default": null, "required": false, "description": ["The password for use in HTTP basic authentication.", "If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.", "Since version 2.8 you can also use the 'password' alias for this option."], "choices": null, "aliases": ["password"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_username", "type": "str", "elements": "", "default": null, "required": false, "description": ["The username for use in HTTP basic authentication.", "This parameter can be used without C(url_password) for sites that allow empty passwords.", "Since version 2.8 you can also use the C(username) alias for this option."], "choices": null, "aliases": ["username"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_gssapi", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.", "Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.", "Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.", "NTLM authentication is I(not) supported even if the GSSAPI mech for NTLM has been installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_netrc", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determining whether to use credentials from ``~/.netrc`` file", "By default .netrc is used with Basic authentication headers", "When set to False, .netrc credentials are ignored"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_proxy", "type": "bool", "elements": "", "default": true, "required": false, "description": ["if C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If C(false), SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']", "item", "rabbitmq_extra_vhosts", "item['name']", "item['state']", "rabbitmq_created_vhosts.results"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined", "rabbitmq_created_vhosts", "rabbitmq_existing_users", "rabbitmqadmin_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml#task:[2]", "name": "rabbitmq_ha_config | creating exchange(s)", "module": "command", "index": 2, "play_index": -1, "defined_in": "tasks/rabbitmq_ha_config.yml", "local_key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[2]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_config }}"}, "options": {"name": "rabbitmq_ha_config | creating exchange(s)", "run_once": true, "delegate_to": "{{ rabbitmq_master }}", "become": true, "with_items": "{{ rabbitmq_config }}", "when": "item['exchange_name'] is defined"}, "module_options": "rabbitmqadmin declare exchange name={{ item['exchange_name'] }} type={{ item['type'] }} --vhost={{ item['vhost'] | default('/') }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_ha_config | creating exchange(s)\n  command: rabbitmqadmin declare exchange name={{ item['exchange_name'] }} type={{ item['type'] }} --vhost={{ item['vhost'] | default('/') }}\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  with_items: \"{{ rabbitmq_config }}\"\n  when: item['exchange_name'] is defined\n", "line_num_in_file": [16, 23], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']", "item", "rabbitmq_extra_vhosts", "item['name']", "item['state']", "rabbitmq_created_vhosts.results"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined", "rabbitmq_created_vhosts", "rabbitmq_existing_users", "rabbitmqadmin_check"], "vars_used_in_target_task": ["item", "rabbitmq_config", "item['exchange_name']", "item['type']", "item['vhost']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml#task:[3]", "name": "rabbitmq_ha_config | creating queue(s)", "module": "command", "index": 3, "play_index": -1, "defined_in": "tasks/rabbitmq_ha_config.yml", "local_key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[3]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_config }}"}, "options": {"name": "rabbitmq_ha_config | creating queue(s)", "run_once": true, "delegate_to": "{{ rabbitmq_master }}", "become": true, "when": ["item['queue_name'] is defined"], "with_items": "{{ rabbitmq_config }}"}, "module_options": "rabbitmqadmin declare queue name={{ item['queue_name'] }} durable={{ item['durable']|lower }} --vhost={{ item['vhost'] | default('/') }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_ha_config | creating queue(s)\n  command: rabbitmqadmin declare queue name={{ item['queue_name'] }} durable={{ item['durable']|lower }} --vhost={{ item['vhost'] | default('/') }}\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  when:\n    - item['queue_name'] is defined\n  with_items: \"{{ rabbitmq_config }}\"\n", "line_num_in_file": [24, 32], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']", "item", "rabbitmq_extra_vhosts", "item['name']", "item['state']", "rabbitmq_created_vhosts.results", "rabbitmq_config", "item['exchange_name']", "item['type']", "item['vhost']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined", "rabbitmq_created_vhosts", "rabbitmq_existing_users", "rabbitmqadmin_check"], "vars_used_in_target_task": ["item", "rabbitmq_config", "item['queue_name']", "item['durable']", "item['vhost']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml#task:[4]", "name": "rabbitmq_ha_config | setting up ha on queue(s)", "module": "rabbitmq_policy", "index": 4, "play_index": -1, "defined_in": "tasks/rabbitmq_ha_config.yml", "local_key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[4]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {"policy_vhost": "{{ item.vhost | default('/') }}", "policy_name": "{{ item.policy_pattern is defined | ternary(policy_vhost + item.policy_pattern|default(''),item.queue_name|default('')) }}"}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_config }}"}, "options": {"name": "rabbitmq_ha_config | setting up ha on queue(s)", "vars": {"policy_vhost": "{{ item.vhost | default('/') }}", "policy_name": "{{ item.policy_pattern is defined | ternary(policy_vhost + item.policy_pattern|default(''),item.queue_name|default('')) }}"}, "run_once": true, "delegate_to": "{{ rabbitmq_master }}", "become": true, "when": "item.queue_name is defined or item.policy_pattern is defined", "with_items": "{{ rabbitmq_config }}"}, "module_options": {"name": "ha-all{{ policy_name }}", "pattern": "{{ item.queue_name | default(item.policy_pattern) }}", "vhost": "{{ item.vhost | default('/') }}", "tags": "{{ item.tags }}", "state": "present"}, "executable": "rabbitmq_policy", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_ha_config | setting up ha on queue(s)\n  rabbitmq_policy:\n    name: \"ha-all{{ policy_name }}\"\n    pattern: \"{{ item.queue_name | default(item.policy_pattern) }}\"\n    vhost: \"{{ item.vhost | default('/') }}\"\n    tags: \"{{ item.tags }}\"\n    state: present\n  vars:\n    policy_vhost: \"{{ item.vhost | default('/') }}\"\n    policy_name: \"{{ item.policy_pattern is defined | ternary(policy_vhost + item.policy_pattern|default(''),item.queue_name|default('')) }}\"\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  when: item.queue_name is defined or item.policy_pattern is defined\n  with_items: \"{{ rabbitmq_config }}\"\n", "line_num_in_file": [33, 48], "resolved_name": "", "possible_candidates": [{"py/tuple": ["community.rabbitmq.rabbitmq_policy", {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}]}], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "community.rabbitmq.rabbitmq_policy", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": ["community.rabbitmq.rabbitmq_policy"], "suggested_dependency": [{"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["apply_to", "name", "node", "pattern", "priority", "state", "tags", "vhost"], "required_arg_keys": [{"key": "name", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "apply_to", "type": "str", "elements": "", "default": "all", "required": false, "description": ["What the policy applies to. Requires RabbitMQ 3.2.0 or later."], "choices": ["all", "exchanges", "queues"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["The name of the policy to manage."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["Erlang node name of the rabbit we wish to configure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["A regex of queues to apply the policy to. Required when C(state=present). This option is no longer required as of Ansible 2.9."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "priority", "type": "str", "elements": "", "default": "0", "required": false, "description": ["The priority of the policy."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["The state of the policy."], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tags", "type": "dict", "elements": "", "default": null, "required": false, "description": ["A dict or string describing the policy. Required when C(state=present). This option is no longer required as of Ansible 2.9."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "vhost", "type": "str", "elements": "", "default": "/", "required": false, "description": ["The name of the vhost to apply to."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "apply_to", "type": "str", "elements": "", "default": "all", "required": false, "description": ["What the policy applies to. Requires RabbitMQ 3.2.0 or later."], "choices": ["all", "exchanges", "queues"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["The name of the policy to manage."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["Erlang node name of the rabbit we wish to configure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["A regex of queues to apply the policy to. Required when C(state=present). This option is no longer required as of Ansible 2.9."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "priority", "type": "str", "elements": "", "default": "0", "required": false, "description": ["The priority of the policy."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["The state of the policy."], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tags", "type": "dict", "elements": "", "default": null, "required": false, "description": ["A dict or string describing the policy. Required when C(state=present). This option is no longer required as of Ansible 2.9."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "vhost", "type": "str", "elements": "", "default": "/", "required": false, "description": ["The name of the vhost to apply to."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "pattern", "value": "{{ item.queue_name | default(item.policy_pattern) }}", "undefined_variables": ["item.queue_name"]}, {"key": "vhost", "value": "{{ item.vhost | default('/') }}", "undefined_variables": ["item.vhost"]}, {"key": "tags", "value": "{{ item.tags }}", "undefined_variables": ["item.tags"]}], "unknown_type_values": [{"key": "name", "expected_type": "str", "unknown_type_value": "ha-all{{ item.policy_pattern is defined | ternary(policy_vhost + item.policy_pattern|default(''),item.queue_name|default('')) }}"}, {"key": "pattern", "expected_type": "str", "unknown_type_value": "{{ item.queue_name | default(item.policy_pattern) }}"}, {"key": "vhost", "expected_type": "str", "unknown_type_value": "{{ item.vhost | default('/') }}"}, {"key": "tags", "expected_type": "dict", "unknown_type_value": "{{ item.tags }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']", "item", "rabbitmq_extra_vhosts", "item['name']", "item['state']", "rabbitmq_created_vhosts.results", "rabbitmq_config", "item['exchange_name']", "item['type']", "item['vhost']", "item['queue_name']", "item['durable']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined", "rabbitmq_created_vhosts", "rabbitmq_existing_users", "rabbitmqadmin_check", "policy_vhost", "policy_name"], "vars_used_in_target_task": ["item", "rabbitmq_config", "policy_name", "item.queue_name", "item.vhost", "item.tags"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml#task:[5]", "name": "rabbitmq_ha_config | creating binding(s)", "module": "command", "index": 5, "play_index": -1, "defined_in": "tasks/rabbitmq_ha_config.yml", "local_key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[5]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_config }}"}, "options": {"name": "rabbitmq_ha_config | creating binding(s)", "run_once": true, "delegate_to": "{{ rabbitmq_master }}", "become": true, "with_items": "{{ rabbitmq_config }}", "when": "item['exchange_name'] is defined"}, "module_options": "rabbitmqadmin declare binding source={{ item['exchange_name'] }} destination_type=\"queue\" destination={{ item['queue_name'] }} routing_key={{ item['routing_key'] }} --vhost={{ item['vhost'] | default('/') }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_ha_config | creating binding(s)\n  command: rabbitmqadmin declare binding source={{ item['exchange_name'] }} destination_type=\"queue\" destination={{ item['queue_name'] }} routing_key={{ item['routing_key'] }} --vhost={{ item['vhost'] | default('/') }} # noqa 204\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  with_items: \"{{ rabbitmq_config }}\"\n  when: item['exchange_name'] is defined", "line_num_in_file": [49, 56], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']", "item", "rabbitmq_extra_vhosts", "item['name']", "item['state']", "rabbitmq_created_vhosts.results", "rabbitmq_config", "item['exchange_name']", "item['type']", "item['vhost']", "item['queue_name']", "item['durable']", "policy_name", "item.queue_name", "item.vhost", "item.tags"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined", "rabbitmq_created_vhosts", "rabbitmq_existing_users", "rabbitmqadmin_check", "policy_vhost", "policy_name"], "vars_used_in_target_task": ["item", "rabbitmq_config", "item['exchange_name']", "item['queue_name']", "item['routing_key']", "item['vhost']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/config.yml#task:[0]", "name": "config | Configuring RabbitMQ", "module": "template", "index": 0, "play_index": -1, "defined_in": "tasks/config.yml", "local_key": "task taskfile:tasks/config.yml#task:[0]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "config | Configuring RabbitMQ", "become": true, "notify": "restart rabbitmq-server"}, "module_options": {"src": "{{ rabbitmq_config_file }}", "dest": "/etc/rabbitmq/rabbitmq.config"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: config | Configuring RabbitMQ\n  template:\n    src: \"{{ rabbitmq_config_file }}\"\n    dest: \"/etc/rabbitmq/rabbitmq.config\"\n  become: true\n  notify: \"restart rabbitmq-server\"\n", "line_num_in_file": [2, 8], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_end_string", "type": "str", "elements": "", "default": "%}", "required": false, "description": ["The string marking the end of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_start_string", "type": "str", "elements": "", "default": "{%", "required": false, "description": ["The string marking the beginning of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_end_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the end of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_start_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the beginning of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Location to render the template to on the remote machine."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine whether symbolic links should be followed.", "When set to C(true) symbolic links will be followed, if they exist.", "When set to C(false) symbolic links will not be followed.", "Previous to Ansible 2.4, this was hardcoded as C(true)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when the file is being transferred if the destination already exists.", "When set to C(yes), replace the remote file when contents are different than the source.", "When set to C(no), the file will only be transferred if the destination does not exist."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lstrip_blocks", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine when leading spaces and tabs should be stripped.", "When set to C(yes) leading spaces and tabs are stripped from the start of a line to a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "newline_sequence", "type": "str", "elements": "", "default": "\\n", "required": false, "description": ["Specify the newline sequence to use for templating files."], "choices": ["\\n", "\\r", "\\r\\n"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "output_encoding", "type": "str", "elements": "", "default": "utf-8", "required": false, "description": ["Overrides the encoding used to write the template file defined by C(dest).", "It defaults to C(utf-8), but any encoding supported by python can be used.", "The source template file must always be encoded using C(utf-8), for homogeneity."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path of a Jinja2 formatted template on the Ansible controller.", "This can be a relative or an absolute path.", "The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output template."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "trim_blocks", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when newlines should be removed from blocks.", "When set to C(yes) the first newline after a block is removed (block, not variable tag!)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate", "type": "str", "elements": "", "default": null, "required": false, "description": ["The validation command to run before copying the updated file into the final destination.", "A temporary file path is used to validate, passed in through '%s' which must be present as in the examples below.", "Also, the command is passed securely so shell features such as expansion and pipes will not work.", "For an example on how to handle more complex validation than what this option provides, see R(handling complex validation,complex_configuration_validation)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_end_string", "type": "str", "elements": "", "default": "}}", "required": false, "description": ["The string marking the end of a print statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_start_string", "type": "str", "elements": "", "default": "{{", "required": false, "description": ["The string marking the beginning of a print statement."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_end_string", "type": "str", "elements": "", "default": "%}", "required": false, "description": ["The string marking the end of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_start_string", "type": "str", "elements": "", "default": "{%", "required": false, "description": ["The string marking the beginning of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_end_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the end of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_start_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the beginning of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Location to render the template to on the remote machine."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine whether symbolic links should be followed.", "When set to C(true) symbolic links will be followed, if they exist.", "When set to C(false) symbolic links will not be followed.", "Previous to Ansible 2.4, this was hardcoded as C(true)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when the file is being transferred if the destination already exists.", "When set to C(yes), replace the remote file when contents are different than the source.", "When set to C(no), the file will only be transferred if the destination does not exist."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lstrip_blocks", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine when leading spaces and tabs should be stripped.", "When set to C(yes) leading spaces and tabs are stripped from the start of a line to a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "newline_sequence", "type": "str", "elements": "", "default": "\\n", "required": false, "description": ["Specify the newline sequence to use for templating files."], "choices": ["\\n", "\\r", "\\r\\n"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "output_encoding", "type": "str", "elements": "", "default": "utf-8", "required": false, "description": ["Overrides the encoding used to write the template file defined by C(dest).", "It defaults to C(utf-8), but any encoding supported by python can be used.", "The source template file must always be encoded using C(utf-8), for homogeneity."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path of a Jinja2 formatted template on the Ansible controller.", "This can be a relative or an absolute path.", "The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output template."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "trim_blocks", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when newlines should be removed from blocks.", "When set to C(yes) the first newline after a block is removed (block, not variable tag!)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate", "type": "str", "elements": "", "default": null, "required": false, "description": ["The validation command to run before copying the updated file into the final destination.", "A temporary file path is used to validate, passed in through '%s' which must be present as in the examples below.", "Also, the command is passed securely so shell features such as expansion and pipes will not work.", "For an example on how to handle more complex validation than what this option provides, see R(handling complex validation,complex_configuration_validation)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_end_string", "type": "str", "elements": "", "default": "}}", "required": false, "description": ["The string marking the end of a print statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_start_string", "type": "str", "elements": "", "default": "{{", "required": false, "description": ["The string marking the beginning of a print statement."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": ["rabbitmq_config_file"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/config.yml#task:[1]", "name": "config | Configuring RabbitMQ environemnt", "module": "template", "index": 1, "play_index": -1, "defined_in": "tasks/config.yml", "local_key": "task taskfile:tasks/config.yml#task:[1]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "config | Configuring RabbitMQ environemnt", "become": true, "notify": "restart rabbitmq-server"}, "module_options": {"src": "{{ rabbitmq_config_env_file }}", "dest": "/etc/rabbitmq/rabbitmq-env.conf"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: config | Configuring RabbitMQ environemnt\n  template:\n    src: \"{{ rabbitmq_config_env_file }}\"\n    dest: \"/etc/rabbitmq/rabbitmq-env.conf\"\n  become: true\n  notify: \"restart rabbitmq-server\"", "line_num_in_file": [9, 15], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_end_string", "type": "str", "elements": "", "default": "%}", "required": false, "description": ["The string marking the end of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_start_string", "type": "str", "elements": "", "default": "{%", "required": false, "description": ["The string marking the beginning of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_end_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the end of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_start_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the beginning of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Location to render the template to on the remote machine."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine whether symbolic links should be followed.", "When set to C(true) symbolic links will be followed, if they exist.", "When set to C(false) symbolic links will not be followed.", "Previous to Ansible 2.4, this was hardcoded as C(true)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when the file is being transferred if the destination already exists.", "When set to C(yes), replace the remote file when contents are different than the source.", "When set to C(no), the file will only be transferred if the destination does not exist."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lstrip_blocks", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine when leading spaces and tabs should be stripped.", "When set to C(yes) leading spaces and tabs are stripped from the start of a line to a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "newline_sequence", "type": "str", "elements": "", "default": "\\n", "required": false, "description": ["Specify the newline sequence to use for templating files."], "choices": ["\\n", "\\r", "\\r\\n"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "output_encoding", "type": "str", "elements": "", "default": "utf-8", "required": false, "description": ["Overrides the encoding used to write the template file defined by C(dest).", "It defaults to C(utf-8), but any encoding supported by python can be used.", "The source template file must always be encoded using C(utf-8), for homogeneity."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path of a Jinja2 formatted template on the Ansible controller.", "This can be a relative or an absolute path.", "The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output template."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "trim_blocks", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when newlines should be removed from blocks.", "When set to C(yes) the first newline after a block is removed (block, not variable tag!)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate", "type": "str", "elements": "", "default": null, "required": false, "description": ["The validation command to run before copying the updated file into the final destination.", "A temporary file path is used to validate, passed in through '%s' which must be present as in the examples below.", "Also, the command is passed securely so shell features such as expansion and pipes will not work.", "For an example on how to handle more complex validation than what this option provides, see R(handling complex validation,complex_configuration_validation)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_end_string", "type": "str", "elements": "", "default": "}}", "required": false, "description": ["The string marking the end of a print statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_start_string", "type": "str", "elements": "", "default": "{{", "required": false, "description": ["The string marking the beginning of a print statement."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_end_string", "type": "str", "elements": "", "default": "%}", "required": false, "description": ["The string marking the end of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_start_string", "type": "str", "elements": "", "default": "{%", "required": false, "description": ["The string marking the beginning of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_end_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the end of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_start_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the beginning of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Location to render the template to on the remote machine."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine whether symbolic links should be followed.", "When set to C(true) symbolic links will be followed, if they exist.", "When set to C(false) symbolic links will not be followed.", "Previous to Ansible 2.4, this was hardcoded as C(true)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when the file is being transferred if the destination already exists.", "When set to C(yes), replace the remote file when contents are different than the source.", "When set to C(no), the file will only be transferred if the destination does not exist."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lstrip_blocks", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine when leading spaces and tabs should be stripped.", "When set to C(yes) leading spaces and tabs are stripped from the start of a line to a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "newline_sequence", "type": "str", "elements": "", "default": "\\n", "required": false, "description": ["Specify the newline sequence to use for templating files."], "choices": ["\\n", "\\r", "\\r\\n"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "output_encoding", "type": "str", "elements": "", "default": "utf-8", "required": false, "description": ["Overrides the encoding used to write the template file defined by C(dest).", "It defaults to C(utf-8), but any encoding supported by python can be used.", "The source template file must always be encoded using C(utf-8), for homogeneity."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path of a Jinja2 formatted template on the Ansible controller.", "This can be a relative or an absolute path.", "The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output template."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "trim_blocks", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when newlines should be removed from blocks.", "When set to C(yes) the first newline after a block is removed (block, not variable tag!)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate", "type": "str", "elements": "", "default": null, "required": false, "description": ["The validation command to run before copying the updated file into the final destination.", "A temporary file path is used to validate, passed in through '%s' which must be present as in the examples below.", "Also, the command is passed securely so shell features such as expansion and pipes will not work.", "For an example on how to handle more complex validation than what this option provides, see R(handling complex validation,complex_configuration_validation)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_end_string", "type": "str", "elements": "", "default": "}}", "required": false, "description": ["The string marking the end of a print statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_start_string", "type": "str", "elements": "", "default": "{{", "required": false, "description": ["The string marking the beginning of a print statement."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": ["rabbitmq_config_env_file"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[0]", "name": "", "module": "include", "index": 0, "play_index": -1, "defined_in": "tasks/main.yml", "local_key": "task taskfile:tasks/main.yml#task:[0]", "role": "ansible-rabbitmq", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"when": "ansible_os_family == \"Debian\""}, "module_options": "debian.yml", "executable": "debian.yml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- include: debian.yml\n  when: ansible_os_family == \"Debian\"\n", "line_num_in_file": [3, 5], "resolved_name": "taskfile role:ansible-rabbitmq#taskfile:tasks/debian.yml", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.include", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "available_args": null, "default_args": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[1]", "name": "", "module": "include", "index": 1, "play_index": -1, "defined_in": "tasks/main.yml", "local_key": "task taskfile:tasks/main.yml#task:[1]", "role": "ansible-rabbitmq", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"when": "ansible_distribution == \"CentOS\" or ansible_distribution == \"Red Hat Enterprise Linux\" or ansible_distribution == \"OracleLinux\"\n"}, "module_options": "redhat.yml", "executable": "redhat.yml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- include: redhat.yml\n  when: >\n        ansible_distribution == \"CentOS\" or\n        ansible_distribution == \"Red Hat Enterprise Linux\" or\n        ansible_distribution == \"OracleLinux\"\n", "line_num_in_file": [6, 11], "resolved_name": "taskfile role:ansible-rabbitmq#taskfile:tasks/redhat.yml", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.include", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "available_args": null, "default_args": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[2]", "name": "", "module": "include", "index": 2, "play_index": -1, "defined_in": "tasks/main.yml", "local_key": "task taskfile:tasks/main.yml#task:[2]", "role": "ansible-rabbitmq", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"when": "ansible_distribution == \"Fedora\""}, "module_options": "fedora.yml", "executable": "fedora.yml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- include: fedora.yml\n  when: ansible_distribution == \"Fedora\"\n", "line_num_in_file": [12, 14], "resolved_name": "taskfile role:ansible-rabbitmq#taskfile:tasks/fedora.yml", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.include", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "available_args": null, "default_args": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[3]", "name": "", "module": "include", "index": 3, "play_index": -1, "defined_in": "tasks/main.yml", "local_key": "task taskfile:tasks/main.yml#task:[3]", "role": "ansible-rabbitmq", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"when": "rabbitmq_config_service"}, "module_options": "config.yml", "executable": "config.yml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- include: config.yml\n  when: rabbitmq_config_service\n", "line_num_in_file": [15, 17], "resolved_name": "taskfile role:ansible-rabbitmq#taskfile:tasks/config.yml", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.include", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "available_args": null, "default_args": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[4]", "name": "checking to see if already clustered", "module": "stat", "index": 4, "play_index": -1, "defined_in": "tasks/main.yml", "local_key": "task taskfile:tasks/main.yml#task:[4]", "role": "ansible-rabbitmq", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"clustered": "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[4]"}, "set_facts": {}, "loop": {}, "options": {"name": "checking to see if already clustered", "become": true, "register": "clustered"}, "module_options": {"path": "/etc/rabbitmq/clustered"}, "executable": "stat", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: checking to see if already clustered\n  stat:\n    path: /etc/rabbitmq/clustered\n  become: true\n  register: clustered\n", "line_num_in_file": [18, 23], "resolved_name": "ansible.builtin.stat", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.stat", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.stat", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["checksum_algorithm", "checksum", "checksum_algo", "follow", "get_attributes", "attr", "attributes", "get_checksum", "get_mime", "mime", "mime_type", "mime-type", "path", "dest", "name"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum_algorithm", "type": "str", "elements": "", "default": "sha1", "required": false, "description": ["Algorithm to determine checksum of file.", "Will throw an error if the host is unable to use specified algorithm.", "The remote host has to support the hashing method specified, C(md5) can be unavailable if the host is FIPS-140 compliant."], "choices": ["md5", "sha1", "sha224", "sha256", "sha384", "sha512"], "aliases": ["checksum", "checksum_algo"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Whether to follow symlinks."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_attributes", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Get file attributes using lsattr tool if present."], "choices": null, "aliases": ["attr", "attributes"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_checksum", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to return a checksum of the file."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_mime", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Use file magic and return data about the nature of the file. this uses the 'file' utility found on most Linux/Unix systems.", "This will add both C(mime_type) and C(charset) fields to the return, if possible.", "In Ansible 2.3 this option changed from I(mime) to I(get_mime) and the default changed to C(true)."], "choices": null, "aliases": ["mime", "mime_type", "mime-type"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "path", "type": "str", "elements": "", "default": null, "required": true, "description": ["The full path of the file/object to get the facts of."], "choices": null, "aliases": ["dest", "name"]}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum_algorithm", "type": "str", "elements": "", "default": "sha1", "required": false, "description": ["Algorithm to determine checksum of file.", "Will throw an error if the host is unable to use specified algorithm.", "The remote host has to support the hashing method specified, C(md5) can be unavailable if the host is FIPS-140 compliant."], "choices": ["md5", "sha1", "sha224", "sha256", "sha384", "sha512"], "aliases": ["checksum", "checksum_algo"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Whether to follow symlinks."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_attributes", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Get file attributes using lsattr tool if present."], "choices": null, "aliases": ["attr", "attributes"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_checksum", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to return a checksum of the file."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_mime", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Use file magic and return data about the nature of the file. this uses the 'file' utility found on most Linux/Unix systems.", "This will add both C(mime_type) and C(charset) fields to the return, if possible.", "In Ansible 2.3 this option changed from I(mime) to I(get_mime) and the default changed to C(true)."], "choices": null, "aliases": ["mime", "mime_type", "mime-type"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "path", "type": "str", "elements": "", "default": null, "required": true, "description": ["The full path of the file/object to get the facts of."], "choices": null, "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[5]", "name": "", "module": "include", "index": 5, "play_index": -1, "defined_in": "tasks/main.yml", "local_key": "task taskfile:tasks/main.yml#task:[5]", "role": "ansible-rabbitmq", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"when": "rabbitmq_enable_clustering and not clustered['stat']['exists']\n"}, "module_options": "rabbitmq_clustering.yml", "executable": "rabbitmq_clustering.yml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- include: rabbitmq_clustering.yml\n  when: >\n        rabbitmq_enable_clustering and\n        not clustered['stat']['exists']\n", "line_num_in_file": [24, 28], "resolved_name": "taskfile role:ansible-rabbitmq#taskfile:tasks/rabbitmq_clustering.yml", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.include", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "available_args": null, "default_args": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[6]", "name": "", "module": "include", "index": 6, "play_index": -1, "defined_in": "tasks/main.yml", "local_key": "task taskfile:tasks/main.yml#task:[6]", "role": "ansible-rabbitmq", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"when": "rabbitmq_extra_vhosts is defined"}, "module_options": "rabbitmq_vhosts.yml", "executable": "rabbitmq_vhosts.yml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- include: rabbitmq_vhosts.yml\n  when: rabbitmq_extra_vhosts is defined\n", "line_num_in_file": [29, 31], "resolved_name": "taskfile role:ansible-rabbitmq#taskfile:tasks/rabbitmq_vhosts.yml", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.include", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "available_args": null, "default_args": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[7]", "name": "", "module": "include", "index": 7, "play_index": -1, "defined_in": "tasks/main.yml", "local_key": "task taskfile:tasks/main.yml#task:[7]", "role": "ansible-rabbitmq", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"when": "rabbitmq_config_ha and rabbitmq_enable_clustering and rabbitmq_config is defined\n"}, "module_options": "rabbitmq_ha_config.yml", "executable": "rabbitmq_ha_config.yml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- include: rabbitmq_ha_config.yml\n  when: >\n        rabbitmq_config_ha and\n        rabbitmq_enable_clustering and\n        rabbitmq_config is defined\n", "line_num_in_file": [32, 37], "resolved_name": "taskfile role:ansible-rabbitmq#taskfile:tasks/rabbitmq_ha_config.yml", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.include", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "available_args": null, "default_args": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']", "item", "rabbitmq_extra_vhosts", "item['name']", "item['state']", "rabbitmq_created_vhosts.results"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined", "rabbitmq_created_vhosts", "rabbitmq_existing_users"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ansible-rabbitmq#taskfile:tasks/main.yml#task:[8]", "name": "", "module": "include", "index": 8, "play_index": -1, "defined_in": "tasks/main.yml", "local_key": "task taskfile:tasks/main.yml#task:[8]", "role": "ansible-rabbitmq", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"when": "rabbitmq_users is defined"}, "module_options": "rabbitmq_users.yml", "executable": "rabbitmq_users.yml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- include: rabbitmq_users.yml\n  when: rabbitmq_users is defined", "line_num_in_file": [38, 40], "resolved_name": "taskfile role:ansible-rabbitmq#taskfile:tasks/rabbitmq_users.yml", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.include", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "available_args": null, "default_args": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']", "item", "rabbitmq_extra_vhosts", "item['name']", "item['state']", "rabbitmq_created_vhosts.results", "rabbitmq_config", "item['exchange_name']", "item['type']", "item['vhost']", "item['queue_name']", "item['durable']", "policy_name", "item.queue_name", "item.vhost", "item.tags", "item['routing_key']"], "vars_defined_in_previous_tasks": ["rabbitmq_config", "rabbitmq_config_ha", "rabbitmq_config_service", "rabbitmq_config_file", "rabbitmq_config_env_file", "rabbitmq_env_config", "rabbitmq_debian_repo", "rabbitmq_debian_repo_key", "rabbitmq_debian_erlang_from_rabbit", "rabbitmq_debian_version_defined", "rabbitmq_debian_version", "rabbitmq_enable_clustering", "rabbitmq_master", "rabbitmq_erlang_cookie_file", "rabbitmq_listen_port", "rabbitmq_listeners", "rabbitmq_ssl_enable", "rabbitmq_ssl_port", "rabbitmq_ssl_listeners", "rabitmq_ssl_options", "rabbitmq_redhat_repo_key", "rabbitmq_redhat_package", "rabbitmq_redhat_url", "rabbitmq_redhat_version", "rabbitmq_extra_vhosts", "rabbitmq_users", "result", "clustered", "rabbitmq_erlang_cookie", "cluster_master", "cluster_joined", "rabbitmq_created_vhosts", "rabbitmq_existing_users", "rabbitmqadmin_check", "policy_vhost", "policy_name"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/config.yml#task:[0]", "name": "config | Configuring RabbitMQ", "module": "template", "index": 0, "play_index": -1, "defined_in": "tasks/config.yml", "local_key": "task taskfile:tasks/config.yml#task:[0]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "config | Configuring RabbitMQ", "become": true, "notify": "restart rabbitmq-server"}, "module_options": {"src": "{{ rabbitmq_config_file }}", "dest": "/etc/rabbitmq/rabbitmq.config"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: config | Configuring RabbitMQ\n  template:\n    src: \"{{ rabbitmq_config_file }}\"\n    dest: \"/etc/rabbitmq/rabbitmq.config\"\n  become: true\n  notify: \"restart rabbitmq-server\"\n", "line_num_in_file": [2, 8], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_end_string", "type": "str", "elements": "", "default": "%}", "required": false, "description": ["The string marking the end of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_start_string", "type": "str", "elements": "", "default": "{%", "required": false, "description": ["The string marking the beginning of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_end_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the end of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_start_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the beginning of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Location to render the template to on the remote machine."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine whether symbolic links should be followed.", "When set to C(true) symbolic links will be followed, if they exist.", "When set to C(false) symbolic links will not be followed.", "Previous to Ansible 2.4, this was hardcoded as C(true)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when the file is being transferred if the destination already exists.", "When set to C(yes), replace the remote file when contents are different than the source.", "When set to C(no), the file will only be transferred if the destination does not exist."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lstrip_blocks", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine when leading spaces and tabs should be stripped.", "When set to C(yes) leading spaces and tabs are stripped from the start of a line to a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "newline_sequence", "type": "str", "elements": "", "default": "\\n", "required": false, "description": ["Specify the newline sequence to use for templating files."], "choices": ["\\n", "\\r", "\\r\\n"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "output_encoding", "type": "str", "elements": "", "default": "utf-8", "required": false, "description": ["Overrides the encoding used to write the template file defined by C(dest).", "It defaults to C(utf-8), but any encoding supported by python can be used.", "The source template file must always be encoded using C(utf-8), for homogeneity."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path of a Jinja2 formatted template on the Ansible controller.", "This can be a relative or an absolute path.", "The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output template."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "trim_blocks", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when newlines should be removed from blocks.", "When set to C(yes) the first newline after a block is removed (block, not variable tag!)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate", "type": "str", "elements": "", "default": null, "required": false, "description": ["The validation command to run before copying the updated file into the final destination.", "A temporary file path is used to validate, passed in through '%s' which must be present as in the examples below.", "Also, the command is passed securely so shell features such as expansion and pipes will not work.", "For an example on how to handle more complex validation than what this option provides, see R(handling complex validation,complex_configuration_validation)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_end_string", "type": "str", "elements": "", "default": "}}", "required": false, "description": ["The string marking the end of a print statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_start_string", "type": "str", "elements": "", "default": "{{", "required": false, "description": ["The string marking the beginning of a print statement."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_end_string", "type": "str", "elements": "", "default": "%}", "required": false, "description": ["The string marking the end of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_start_string", "type": "str", "elements": "", "default": "{%", "required": false, "description": ["The string marking the beginning of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_end_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the end of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_start_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the beginning of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Location to render the template to on the remote machine."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine whether symbolic links should be followed.", "When set to C(true) symbolic links will be followed, if they exist.", "When set to C(false) symbolic links will not be followed.", "Previous to Ansible 2.4, this was hardcoded as C(true)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when the file is being transferred if the destination already exists.", "When set to C(yes), replace the remote file when contents are different than the source.", "When set to C(no), the file will only be transferred if the destination does not exist."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lstrip_blocks", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine when leading spaces and tabs should be stripped.", "When set to C(yes) leading spaces and tabs are stripped from the start of a line to a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "newline_sequence", "type": "str", "elements": "", "default": "\\n", "required": false, "description": ["Specify the newline sequence to use for templating files."], "choices": ["\\n", "\\r", "\\r\\n"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "output_encoding", "type": "str", "elements": "", "default": "utf-8", "required": false, "description": ["Overrides the encoding used to write the template file defined by C(dest).", "It defaults to C(utf-8), but any encoding supported by python can be used.", "The source template file must always be encoded using C(utf-8), for homogeneity."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path of a Jinja2 formatted template on the Ansible controller.", "This can be a relative or an absolute path.", "The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output template."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "trim_blocks", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when newlines should be removed from blocks.", "When set to C(yes) the first newline after a block is removed (block, not variable tag!)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate", "type": "str", "elements": "", "default": null, "required": false, "description": ["The validation command to run before copying the updated file into the final destination.", "A temporary file path is used to validate, passed in through '%s' which must be present as in the examples below.", "Also, the command is passed securely so shell features such as expansion and pipes will not work.", "For an example on how to handle more complex validation than what this option provides, see R(handling complex validation,complex_configuration_validation)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_end_string", "type": "str", "elements": "", "default": "}}", "required": false, "description": ["The string marking the end of a print statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_start_string", "type": "str", "elements": "", "default": "{{", "required": false, "description": ["The string marking the beginning of a print statement."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "src", "value": "{{ rabbitmq_config_file }}", "undefined_variables": ["rabbitmq_config_file"]}], "unknown_type_values": [{"key": "src", "expected_type": "str", "unknown_type_value": "{{ rabbitmq_config_file }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["rabbitmq_config_file"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/config.yml#task:[1]", "name": "config | Configuring RabbitMQ environemnt", "module": "template", "index": 1, "play_index": -1, "defined_in": "tasks/config.yml", "local_key": "task taskfile:tasks/config.yml#task:[1]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "config | Configuring RabbitMQ environemnt", "become": true, "notify": "restart rabbitmq-server"}, "module_options": {"src": "{{ rabbitmq_config_env_file }}", "dest": "/etc/rabbitmq/rabbitmq-env.conf"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: config | Configuring RabbitMQ environemnt\n  template:\n    src: \"{{ rabbitmq_config_env_file }}\"\n    dest: \"/etc/rabbitmq/rabbitmq-env.conf\"\n  become: true\n  notify: \"restart rabbitmq-server\"", "line_num_in_file": [9, 15], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_end_string", "type": "str", "elements": "", "default": "%}", "required": false, "description": ["The string marking the end of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_start_string", "type": "str", "elements": "", "default": "{%", "required": false, "description": ["The string marking the beginning of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_end_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the end of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_start_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the beginning of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Location to render the template to on the remote machine."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine whether symbolic links should be followed.", "When set to C(true) symbolic links will be followed, if they exist.", "When set to C(false) symbolic links will not be followed.", "Previous to Ansible 2.4, this was hardcoded as C(true)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when the file is being transferred if the destination already exists.", "When set to C(yes), replace the remote file when contents are different than the source.", "When set to C(no), the file will only be transferred if the destination does not exist."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lstrip_blocks", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine when leading spaces and tabs should be stripped.", "When set to C(yes) leading spaces and tabs are stripped from the start of a line to a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "newline_sequence", "type": "str", "elements": "", "default": "\\n", "required": false, "description": ["Specify the newline sequence to use for templating files."], "choices": ["\\n", "\\r", "\\r\\n"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "output_encoding", "type": "str", "elements": "", "default": "utf-8", "required": false, "description": ["Overrides the encoding used to write the template file defined by C(dest).", "It defaults to C(utf-8), but any encoding supported by python can be used.", "The source template file must always be encoded using C(utf-8), for homogeneity."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path of a Jinja2 formatted template on the Ansible controller.", "This can be a relative or an absolute path.", "The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output template."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "trim_blocks", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when newlines should be removed from blocks.", "When set to C(yes) the first newline after a block is removed (block, not variable tag!)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate", "type": "str", "elements": "", "default": null, "required": false, "description": ["The validation command to run before copying the updated file into the final destination.", "A temporary file path is used to validate, passed in through '%s' which must be present as in the examples below.", "Also, the command is passed securely so shell features such as expansion and pipes will not work.", "For an example on how to handle more complex validation than what this option provides, see R(handling complex validation,complex_configuration_validation)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_end_string", "type": "str", "elements": "", "default": "}}", "required": false, "description": ["The string marking the end of a print statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_start_string", "type": "str", "elements": "", "default": "{{", "required": false, "description": ["The string marking the beginning of a print statement."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_end_string", "type": "str", "elements": "", "default": "%}", "required": false, "description": ["The string marking the end of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_start_string", "type": "str", "elements": "", "default": "{%", "required": false, "description": ["The string marking the beginning of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_end_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the end of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_start_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the beginning of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Location to render the template to on the remote machine."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine whether symbolic links should be followed.", "When set to C(true) symbolic links will be followed, if they exist.", "When set to C(false) symbolic links will not be followed.", "Previous to Ansible 2.4, this was hardcoded as C(true)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when the file is being transferred if the destination already exists.", "When set to C(yes), replace the remote file when contents are different than the source.", "When set to C(no), the file will only be transferred if the destination does not exist."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lstrip_blocks", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine when leading spaces and tabs should be stripped.", "When set to C(yes) leading spaces and tabs are stripped from the start of a line to a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "newline_sequence", "type": "str", "elements": "", "default": "\\n", "required": false, "description": ["Specify the newline sequence to use for templating files."], "choices": ["\\n", "\\r", "\\r\\n"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "output_encoding", "type": "str", "elements": "", "default": "utf-8", "required": false, "description": ["Overrides the encoding used to write the template file defined by C(dest).", "It defaults to C(utf-8), but any encoding supported by python can be used.", "The source template file must always be encoded using C(utf-8), for homogeneity."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path of a Jinja2 formatted template on the Ansible controller.", "This can be a relative or an absolute path.", "The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output template."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "trim_blocks", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when newlines should be removed from blocks.", "When set to C(yes) the first newline after a block is removed (block, not variable tag!)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate", "type": "str", "elements": "", "default": null, "required": false, "description": ["The validation command to run before copying the updated file into the final destination.", "A temporary file path is used to validate, passed in through '%s' which must be present as in the examples below.", "Also, the command is passed securely so shell features such as expansion and pipes will not work.", "For an example on how to handle more complex validation than what this option provides, see R(handling complex validation,complex_configuration_validation)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_end_string", "type": "str", "elements": "", "default": "}}", "required": false, "description": ["The string marking the end of a print statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_start_string", "type": "str", "elements": "", "default": "{{", "required": false, "description": ["The string marking the beginning of a print statement."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "src", "value": "{{ rabbitmq_config_env_file }}", "undefined_variables": ["rabbitmq_config_env_file"]}], "unknown_type_values": [{"key": "src", "expected_type": "str", "unknown_type_value": "{{ rabbitmq_config_env_file }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_config_file"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["rabbitmq_config_env_file"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/debian.yml#task:[0]", "name": "debian | Adding Pre-Reqs", "module": "apt", "index": 0, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[0]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task taskfile:tasks/debian.yml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "debian | Adding Pre-Reqs", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": ["gnupg2", "apt-transport-https"], "state": "present", "update_cache": true}, "executable": "apt", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | Adding Pre-Reqs\n  apt:\n    name:\n      - gnupg2\n      - apt-transport-https\n    state: present\n    update_cache: true\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [2, 12], "resolved_name": "ansible.builtin.apt", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.apt", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.apt", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_change_held_packages", "allow_downgrade", "allow-downgrade", "allow_downgrades", "allow-downgrades", "allow_unauthenticated", "allow-unauthenticated", "autoclean", "autoremove", "cache_valid_time", "clean", "deb", "default_release", "default-release", "dpkg_options", "fail_on_autoremove", "force", "force_apt_get", "install_recommends", "install-recommends", "lock_timeout", "name", "package", "pkg", "only_upgrade", "policy_rc_d", "purge", "state", "update_cache", "update-cache", "update_cache_retries", "update_cache_retry_max_delay", "upgrade"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_change_held_packages", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Allows changing the version of a package which is on the apt hold list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--allow-downgrades) option for I(apt).", "This option enables the named package and version to replace an already installed higher version of that package.", "Note that setting I(allow_downgrade=true) can make this module behave in a non-idempotent way.", "(The task could end up with a set of packages that does not match the complete list of specified packages to install)."], "choices": null, "aliases": ["allow-downgrade", "allow_downgrades", "allow-downgrades"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_unauthenticated", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Ignore if packages cannot be authenticated. This is useful for bootstrapping environments that manage their own apt-key setup.", "C(allow_unauthenticated) is only supported with state: I(install)/I(present)"], "choices": null, "aliases": ["allow-unauthenticated"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoclean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), cleans the local repository of retrieved package files that can no longer be downloaded."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), remove unused dependency packages for all module states except I(build-dep). It can also be used as the only option.", "Previous to version 2.4, autoclean was also an alias for autoremove, now it is its own separate command. See documentation for further information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cache_valid_time", "type": "int", "elements": "", "default": 0, "required": false, "description": ["Update the apt cache if it is older than the I(cache_valid_time). This option is set in seconds.", "As of Ansible 2.4, if explicitly set, this sets I(update_cache=yes)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "clean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Run the equivalent of C(apt-get clean) to clear out the local repository of retrieved package files. It removes everything but the lock file from /var/cache/apt/archives/ and /var/cache/apt/archives/partial/.", "Can be run as part of the package installation (clean runs before install) or as a separate step."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "deb", "type": "str", "elements": "", "default": null, "required": false, "description": ["Path to a .deb package on the remote machine.", "If :// in the path, ansible will attempt to download deb before installing. (Version added 2.1)", "Requires the C(xz-utils) package to extract the control file of the deb package to install."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "default_release", "type": "str", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(-t) option for I(apt) and sets pin priorities"], "choices": null, "aliases": ["default-release"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dpkg_options", "type": "str", "elements": "", "default": "force-confdef,force-confold", "required": false, "description": ["Add dpkg options to apt command. Defaults to '-o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\"'", "Options should be supplied as comma separated list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fail_on_autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--no-remove) option for C(apt).", "If C(true), it is ensured that no packages will be removed or the task will fail.", "C(fail_on_autoremove) is only supported with state except C(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--force-yes) to I(apt-get) and implies C(allow_unauthenticated: yes) and C(allow_downgrade: yes)", "This option will disable checking both the packages' signatures and the certificates of the web servers they are downloaded from.", "This option *is not* the equivalent of passing the C(-f) flag to I(apt-get) on the command line", "**This is a destructive operation with the potential to destroy your system, and it should almost never be used.** Please also see C(man apt-get) for more information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_apt_get", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force usage of apt-get instead of aptitude"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_recommends", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(--no-install-recommends) option for I(apt). C(true) installs recommended packages.  C(false) does not install recommended packages. By default, Ansible will use the same defaults as the operating system. Suggested packages are never installed."], "choices": null, "aliases": ["install-recommends"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 60, "required": false, "description": ["How many seconds will this action wait to acquire a lock on the apt db.", "Sometimes there is a transitory lock and this will retry at least until timeout is hit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A list of package names, like C(foo), or package specifier with version, like C(foo=1.0) or C(foo>=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported."], "choices": null, "aliases": ["package", "pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "only_upgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only upgrade a package if it is already installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "policy_rc_d", "type": "int", "elements": "", "default": null, "required": false, "description": ["Force the exit code of /usr/sbin/policy-rc.d.", "For example, if I(policy_rc_d=101) the installed package will not trigger a service start.", "If /usr/sbin/policy-rc.d already exists, it is backed up and restored after the package installation.", "If C(null), the /usr/sbin/policy-rc.d isn't created/changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "purge", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Will force purging of configuration files if the module state is set to I(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Indicates the desired package state. C(latest) ensures that the latest version is installed. C(build-dep) ensures the package build dependencies are installed. C(fixed) attempt to correct a system with broken dependencies in place."], "choices": ["absent", "build-dep", "latest", "present", "fixed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step.", "Default is not to update the cache."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "upgrade", "type": "str", "elements": "", "default": "no", "required": false, "description": ["If yes or safe, performs an aptitude safe-upgrade.", "If full, performs an aptitude full-upgrade.", "If dist, performs an apt-get dist-upgrade.", "Note: This does not upgrade a specific package, use state=latest for that.", "Note: Since 2.4, apt-get is used as a fall-back if aptitude is not present."], "choices": ["dist", "full", "no", "safe", "yes"], "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_change_held_packages", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Allows changing the version of a package which is on the apt hold list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--allow-downgrades) option for I(apt).", "This option enables the named package and version to replace an already installed higher version of that package.", "Note that setting I(allow_downgrade=true) can make this module behave in a non-idempotent way.", "(The task could end up with a set of packages that does not match the complete list of specified packages to install)."], "choices": null, "aliases": ["allow-downgrade", "allow_downgrades", "allow-downgrades"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_unauthenticated", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Ignore if packages cannot be authenticated. This is useful for bootstrapping environments that manage their own apt-key setup.", "C(allow_unauthenticated) is only supported with state: I(install)/I(present)"], "choices": null, "aliases": ["allow-unauthenticated"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoclean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), cleans the local repository of retrieved package files that can no longer be downloaded."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), remove unused dependency packages for all module states except I(build-dep). It can also be used as the only option.", "Previous to version 2.4, autoclean was also an alias for autoremove, now it is its own separate command. See documentation for further information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cache_valid_time", "type": "int", "elements": "", "default": 0, "required": false, "description": ["Update the apt cache if it is older than the I(cache_valid_time). This option is set in seconds.", "As of Ansible 2.4, if explicitly set, this sets I(update_cache=yes)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "clean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Run the equivalent of C(apt-get clean) to clear out the local repository of retrieved package files. It removes everything but the lock file from /var/cache/apt/archives/ and /var/cache/apt/archives/partial/.", "Can be run as part of the package installation (clean runs before install) or as a separate step."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "deb", "type": "str", "elements": "", "default": null, "required": false, "description": ["Path to a .deb package on the remote machine.", "If :// in the path, ansible will attempt to download deb before installing. (Version added 2.1)", "Requires the C(xz-utils) package to extract the control file of the deb package to install."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "default_release", "type": "str", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(-t) option for I(apt) and sets pin priorities"], "choices": null, "aliases": ["default-release"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dpkg_options", "type": "str", "elements": "", "default": "force-confdef,force-confold", "required": false, "description": ["Add dpkg options to apt command. Defaults to '-o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\"'", "Options should be supplied as comma separated list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fail_on_autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--no-remove) option for C(apt).", "If C(true), it is ensured that no packages will be removed or the task will fail.", "C(fail_on_autoremove) is only supported with state except C(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--force-yes) to I(apt-get) and implies C(allow_unauthenticated: yes) and C(allow_downgrade: yes)", "This option will disable checking both the packages' signatures and the certificates of the web servers they are downloaded from.", "This option *is not* the equivalent of passing the C(-f) flag to I(apt-get) on the command line", "**This is a destructive operation with the potential to destroy your system, and it should almost never be used.** Please also see C(man apt-get) for more information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_apt_get", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force usage of apt-get instead of aptitude"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_recommends", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(--no-install-recommends) option for I(apt). C(true) installs recommended packages.  C(false) does not install recommended packages. By default, Ansible will use the same defaults as the operating system. Suggested packages are never installed."], "choices": null, "aliases": ["install-recommends"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 60, "required": false, "description": ["How many seconds will this action wait to acquire a lock on the apt db.", "Sometimes there is a transitory lock and this will retry at least until timeout is hit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A list of package names, like C(foo), or package specifier with version, like C(foo=1.0) or C(foo>=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported."], "choices": null, "aliases": ["package", "pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "only_upgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only upgrade a package if it is already installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "policy_rc_d", "type": "int", "elements": "", "default": null, "required": false, "description": ["Force the exit code of /usr/sbin/policy-rc.d.", "For example, if I(policy_rc_d=101) the installed package will not trigger a service start.", "If /usr/sbin/policy-rc.d already exists, it is backed up and restored after the package installation.", "If C(null), the /usr/sbin/policy-rc.d isn't created/changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "purge", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Will force purging of configuration files if the module state is set to I(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Indicates the desired package state. C(latest) ensures that the latest version is installed. C(build-dep) ensures the package build dependencies are installed. C(fixed) attempt to correct a system with broken dependencies in place."], "choices": ["absent", "build-dep", "latest", "present", "fixed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step.", "Default is not to update the cache."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "upgrade", "type": "str", "elements": "", "default": "no", "required": false, "description": ["If yes or safe, performs an aptitude safe-upgrade.", "If full, performs an aptitude full-upgrade.", "If dist, performs an apt-get dist-upgrade.", "Note: This does not upgrade a specific package, use state=latest for that.", "Note: Since 2.4, apt-get is used as a fall-back if aptitude is not present."], "choices": ["dist", "full", "no", "safe", "yes"], "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/debian.yml#task:[1]", "name": "debian | adding RabbitMQ public GPG key to the apt repo", "module": "apt_key", "index": 1, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[1]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task taskfile:tasks/debian.yml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "debian | adding RabbitMQ public GPG key to the apt repo", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"url": "{{ rabbitmq_debian_repo_key }}", "state": "present"}, "executable": "apt_key", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | adding RabbitMQ public GPG key to the apt repo\n  apt_key:\n    url: \"{{ rabbitmq_debian_repo_key }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [13, 20], "resolved_name": "ansible.builtin.apt_key", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.apt_key", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.apt_key", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["data", "file", "id", "keyring", "keyserver", "state", "url", "validate_certs"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "data", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyfile contents to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The path to a keyfile on the remote server to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "id", "type": "str", "elements": "", "default": null, "required": false, "description": ["The identifier of the key.", "Including this allows check mode to correctly report the changed state.", "If specifying a subkey's id be aware that apt-key does not understand how to remove keys via a subkey id.  Specify the primary key's id instead.", "This parameter is required when C(state) is set to C(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyring", "type": "str", "elements": "", "default": null, "required": false, "description": ["The full path to specific keyring file in C(/etc/apt/trusted.gpg.d/)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyserver", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyserver to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Ensures that the key is present (added) or absent (revoked)."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": false, "description": ["The URL to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "data", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyfile contents to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The path to a keyfile on the remote server to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "id", "type": "str", "elements": "", "default": null, "required": false, "description": ["The identifier of the key.", "Including this allows check mode to correctly report the changed state.", "If specifying a subkey's id be aware that apt-key does not understand how to remove keys via a subkey id.  Specify the primary key's id instead.", "This parameter is required when C(state) is set to C(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyring", "type": "str", "elements": "", "default": null, "required": false, "description": ["The full path to specific keyring file in C(/etc/apt/trusted.gpg.d/)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyserver", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyserver to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Ensures that the key is present (added) or absent (revoked)."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": false, "description": ["The URL to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "url", "value": "{{ rabbitmq_debian_repo_key }}", "undefined_variables": ["rabbitmq_debian_repo_key"]}], "unknown_type_values": [{"key": "url", "expected_type": "str", "unknown_type_value": "{{ rabbitmq_debian_repo_key }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": ["rabbitmq_debian_repo_key"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/debian.yml#task:[2]", "name": "debian | adding RabbitMQ repo", "module": "apt_repository", "index": 2, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[2]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task taskfile:tasks/debian.yml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "debian | adding RabbitMQ repo", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"repo": "{{ rabbitmq_debian_repo }}", "state": "present"}, "executable": "apt_repository", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | adding RabbitMQ repo\n  apt_repository:\n    repo: \"{{ rabbitmq_debian_repo }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [21, 28], "resolved_name": "ansible.builtin.apt_repository", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.apt_repository", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.apt_repository", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["codename", "filename", "install_python_apt", "mode", "repo", "state", "update_cache", "update-cache", "update_cache_retries", "update_cache_retry_max_delay", "validate_certs"], "required_arg_keys": [{"key": "repo", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "codename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Override the distribution codename to use for PPA repositories. Should usually only be set when working with a PPA on a non-Ubuntu target (for example, Debian or Mint)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "filename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Sets the name of the source list file in sources.list.d. Defaults to a file name based on the repository source url. The .list extension will be automatically added."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_python_apt", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to automatically try to install the Python apt library or not, if it is not already installed. Without this library, the module does not work.", "Runs C(apt-get install python-apt) for Python 2, and C(apt-get install python3-apt) for Python 3.", "Only works with the system Python 2 or Python 3. If you are using a Python on the remote that is not the system Python, set I(install_python_apt=false) and ensure that the Python apt library for your Python version is installed some other way."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The octal mode for newly created files in sources.list.d.", "Default is what system uses (probably 0644)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "repo", "type": "str", "elements": "", "default": null, "required": true, "description": ["A source string for the repository."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["A source string state."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Run the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "codename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Override the distribution codename to use for PPA repositories. Should usually only be set when working with a PPA on a non-Ubuntu target (for example, Debian or Mint)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "filename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Sets the name of the source list file in sources.list.d. Defaults to a file name based on the repository source url. The .list extension will be automatically added."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_python_apt", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to automatically try to install the Python apt library or not, if it is not already installed. Without this library, the module does not work.", "Runs C(apt-get install python-apt) for Python 2, and C(apt-get install python3-apt) for Python 3.", "Only works with the system Python 2 or Python 3. If you are using a Python on the remote that is not the system Python, set I(install_python_apt=false) and ensure that the Python apt library for your Python version is installed some other way."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The octal mode for newly created files in sources.list.d.", "Default is what system uses (probably 0644)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "repo", "type": "str", "elements": "", "default": null, "required": true, "description": ["A source string for the repository."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["A source string state."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Run the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "repo", "value": "{{ rabbitmq_debian_repo }}", "undefined_variables": ["rabbitmq_debian_repo"]}], "unknown_type_values": [{"key": "repo", "expected_type": "str", "unknown_type_value": "{{ rabbitmq_debian_repo }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key"], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": ["rabbitmq_debian_repo"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/debian.yml#task:[3]", "name": "debian | add Rabbitmq erlang repo key", "module": "apt_key", "index": 3, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[3]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task taskfile:tasks/debian.yml#task:[3]"}, "set_facts": {}, "loop": {}, "options": {"name": "debian | add Rabbitmq erlang repo key", "become": true, "register": "result", "until": "result is successful", "when": "rabbitmq_debian_erlang_from_rabbit"}, "module_options": {"url": "https://bintray.com/user/downloadSubjectPublicKey?username=rabbitmq-erlang", "state": "present"}, "executable": "apt_key", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | add Rabbitmq erlang repo key\n  apt_key:\n    url: https://bintray.com/user/downloadSubjectPublicKey?username=rabbitmq-erlang\n    state: present\n  become: true\n  register: result\n  until: result is successful\n  when: rabbitmq_debian_erlang_from_rabbit\n", "line_num_in_file": [29, 37], "resolved_name": "ansible.builtin.apt_key", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.apt_key", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.apt_key", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["data", "file", "id", "keyring", "keyserver", "state", "url", "validate_certs"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "data", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyfile contents to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The path to a keyfile on the remote server to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "id", "type": "str", "elements": "", "default": null, "required": false, "description": ["The identifier of the key.", "Including this allows check mode to correctly report the changed state.", "If specifying a subkey's id be aware that apt-key does not understand how to remove keys via a subkey id.  Specify the primary key's id instead.", "This parameter is required when C(state) is set to C(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyring", "type": "str", "elements": "", "default": null, "required": false, "description": ["The full path to specific keyring file in C(/etc/apt/trusted.gpg.d/)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyserver", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyserver to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Ensures that the key is present (added) or absent (revoked)."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": false, "description": ["The URL to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "data", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyfile contents to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The path to a keyfile on the remote server to add to the keyring."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "id", "type": "str", "elements": "", "default": null, "required": false, "description": ["The identifier of the key.", "Including this allows check mode to correctly report the changed state.", "If specifying a subkey's id be aware that apt-key does not understand how to remove keys via a subkey id.  Specify the primary key's id instead.", "This parameter is required when C(state) is set to C(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyring", "type": "str", "elements": "", "default": null, "required": false, "description": ["The full path to specific keyring file in C(/etc/apt/trusted.gpg.d/)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "keyserver", "type": "str", "elements": "", "default": null, "required": false, "description": ["The keyserver to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Ensures that the key is present (added) or absent (revoked)."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": false, "description": ["The URL to retrieve key from."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo"], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/debian.yml#task:[4]", "name": "debian | add Rabbitmq erlang repo", "module": "apt_repository", "index": 4, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[4]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "debian | add Rabbitmq erlang repo", "become": true, "when": "rabbitmq_debian_erlang_from_rabbit"}, "module_options": {"repo": "deb https://dl.bintray.com/rabbitmq-erlang/debian {{ ansible_distribution_release }} erlang", "state": "present"}, "executable": "apt_repository", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | add Rabbitmq erlang repo key\n  apt_key:\n    url: https://bintray.com/user/downloadSubjectPublicKey?username=rabbitmq-erlang\n    state: present\n  become: true\n  register: result\n  until: result is successful\n  when: rabbitmq_debian_erlang_from_rabbit\n", "line_num_in_file": [29, 37], "resolved_name": "ansible.builtin.apt_repository", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.apt_repository", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.apt_repository", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["codename", "filename", "install_python_apt", "mode", "repo", "state", "update_cache", "update-cache", "update_cache_retries", "update_cache_retry_max_delay", "validate_certs"], "required_arg_keys": [{"key": "repo", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "codename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Override the distribution codename to use for PPA repositories. Should usually only be set when working with a PPA on a non-Ubuntu target (for example, Debian or Mint)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "filename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Sets the name of the source list file in sources.list.d. Defaults to a file name based on the repository source url. The .list extension will be automatically added."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_python_apt", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to automatically try to install the Python apt library or not, if it is not already installed. Without this library, the module does not work.", "Runs C(apt-get install python-apt) for Python 2, and C(apt-get install python3-apt) for Python 3.", "Only works with the system Python 2 or Python 3. If you are using a Python on the remote that is not the system Python, set I(install_python_apt=false) and ensure that the Python apt library for your Python version is installed some other way."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The octal mode for newly created files in sources.list.d.", "Default is what system uses (probably 0644)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "repo", "type": "str", "elements": "", "default": null, "required": true, "description": ["A source string for the repository."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["A source string state."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Run the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "codename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Override the distribution codename to use for PPA repositories. Should usually only be set when working with a PPA on a non-Ubuntu target (for example, Debian or Mint)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "filename", "type": "str", "elements": "", "default": null, "required": false, "description": ["Sets the name of the source list file in sources.list.d. Defaults to a file name based on the repository source url. The .list extension will be automatically added."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_python_apt", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to automatically try to install the Python apt library or not, if it is not already installed. Without this library, the module does not work.", "Runs C(apt-get install python-apt) for Python 2, and C(apt-get install python3-apt) for Python 3.", "Only works with the system Python 2 or Python 3. If you are using a Python on the remote that is not the system Python, set I(install_python_apt=false) and ensure that the Python apt library for your Python version is installed some other way."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The octal mode for newly created files in sources.list.d.", "Default is what system uses (probably 0644)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "repo", "type": "str", "elements": "", "default": null, "required": true, "description": ["A source string for the repository."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["A source string state."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Run the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "repo", "expected_type": "str", "unknown_type_value": "deb https://dl.bintray.com/rabbitmq-erlang/debian {{ ansible_distribution_release }} erlang"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo"], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": ["ansible_distribution_release"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/debian.yml#task:[5]", "name": "debian | installing RabbitMQ server", "module": "apt", "index": 5, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[5]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task taskfile:tasks/debian.yml#task:[5]"}, "set_facts": {}, "loop": {}, "options": {"name": "debian | installing RabbitMQ server", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": ["rabbitmq-server{{ (rabbitmq_debian_version_defined and rabbitmq_debian_version is defined) | ternary(['=',rabbitmq_debian_version] | join(''),'') }}"], "state": "present"}, "executable": "apt", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | installing RabbitMQ server\n  apt:\n    name:\n      - rabbitmq-server{{ (rabbitmq_debian_version_defined and rabbitmq_debian_version is defined) | ternary(['=',rabbitmq_debian_version] | join(''),'') }}\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [45, 53], "resolved_name": "ansible.builtin.apt", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.apt", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.apt", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_change_held_packages", "allow_downgrade", "allow-downgrade", "allow_downgrades", "allow-downgrades", "allow_unauthenticated", "allow-unauthenticated", "autoclean", "autoremove", "cache_valid_time", "clean", "deb", "default_release", "default-release", "dpkg_options", "fail_on_autoremove", "force", "force_apt_get", "install_recommends", "install-recommends", "lock_timeout", "name", "package", "pkg", "only_upgrade", "policy_rc_d", "purge", "state", "update_cache", "update-cache", "update_cache_retries", "update_cache_retry_max_delay", "upgrade"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_change_held_packages", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Allows changing the version of a package which is on the apt hold list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--allow-downgrades) option for I(apt).", "This option enables the named package and version to replace an already installed higher version of that package.", "Note that setting I(allow_downgrade=true) can make this module behave in a non-idempotent way.", "(The task could end up with a set of packages that does not match the complete list of specified packages to install)."], "choices": null, "aliases": ["allow-downgrade", "allow_downgrades", "allow-downgrades"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_unauthenticated", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Ignore if packages cannot be authenticated. This is useful for bootstrapping environments that manage their own apt-key setup.", "C(allow_unauthenticated) is only supported with state: I(install)/I(present)"], "choices": null, "aliases": ["allow-unauthenticated"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoclean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), cleans the local repository of retrieved package files that can no longer be downloaded."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), remove unused dependency packages for all module states except I(build-dep). It can also be used as the only option.", "Previous to version 2.4, autoclean was also an alias for autoremove, now it is its own separate command. See documentation for further information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cache_valid_time", "type": "int", "elements": "", "default": 0, "required": false, "description": ["Update the apt cache if it is older than the I(cache_valid_time). This option is set in seconds.", "As of Ansible 2.4, if explicitly set, this sets I(update_cache=yes)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "clean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Run the equivalent of C(apt-get clean) to clear out the local repository of retrieved package files. It removes everything but the lock file from /var/cache/apt/archives/ and /var/cache/apt/archives/partial/.", "Can be run as part of the package installation (clean runs before install) or as a separate step."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "deb", "type": "str", "elements": "", "default": null, "required": false, "description": ["Path to a .deb package on the remote machine.", "If :// in the path, ansible will attempt to download deb before installing. (Version added 2.1)", "Requires the C(xz-utils) package to extract the control file of the deb package to install."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "default_release", "type": "str", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(-t) option for I(apt) and sets pin priorities"], "choices": null, "aliases": ["default-release"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dpkg_options", "type": "str", "elements": "", "default": "force-confdef,force-confold", "required": false, "description": ["Add dpkg options to apt command. Defaults to '-o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\"'", "Options should be supplied as comma separated list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fail_on_autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--no-remove) option for C(apt).", "If C(true), it is ensured that no packages will be removed or the task will fail.", "C(fail_on_autoremove) is only supported with state except C(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--force-yes) to I(apt-get) and implies C(allow_unauthenticated: yes) and C(allow_downgrade: yes)", "This option will disable checking both the packages' signatures and the certificates of the web servers they are downloaded from.", "This option *is not* the equivalent of passing the C(-f) flag to I(apt-get) on the command line", "**This is a destructive operation with the potential to destroy your system, and it should almost never be used.** Please also see C(man apt-get) for more information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_apt_get", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force usage of apt-get instead of aptitude"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_recommends", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(--no-install-recommends) option for I(apt). C(true) installs recommended packages.  C(false) does not install recommended packages. By default, Ansible will use the same defaults as the operating system. Suggested packages are never installed."], "choices": null, "aliases": ["install-recommends"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 60, "required": false, "description": ["How many seconds will this action wait to acquire a lock on the apt db.", "Sometimes there is a transitory lock and this will retry at least until timeout is hit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A list of package names, like C(foo), or package specifier with version, like C(foo=1.0) or C(foo>=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported."], "choices": null, "aliases": ["package", "pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "only_upgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only upgrade a package if it is already installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "policy_rc_d", "type": "int", "elements": "", "default": null, "required": false, "description": ["Force the exit code of /usr/sbin/policy-rc.d.", "For example, if I(policy_rc_d=101) the installed package will not trigger a service start.", "If /usr/sbin/policy-rc.d already exists, it is backed up and restored after the package installation.", "If C(null), the /usr/sbin/policy-rc.d isn't created/changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "purge", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Will force purging of configuration files if the module state is set to I(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Indicates the desired package state. C(latest) ensures that the latest version is installed. C(build-dep) ensures the package build dependencies are installed. C(fixed) attempt to correct a system with broken dependencies in place."], "choices": ["absent", "build-dep", "latest", "present", "fixed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step.", "Default is not to update the cache."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "upgrade", "type": "str", "elements": "", "default": "no", "required": false, "description": ["If yes or safe, performs an aptitude safe-upgrade.", "If full, performs an aptitude full-upgrade.", "If dist, performs an apt-get dist-upgrade.", "Note: This does not upgrade a specific package, use state=latest for that.", "Note: Since 2.4, apt-get is used as a fall-back if aptitude is not present."], "choices": ["dist", "full", "no", "safe", "yes"], "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_change_held_packages", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Allows changing the version of a package which is on the apt hold list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--allow-downgrades) option for I(apt).", "This option enables the named package and version to replace an already installed higher version of that package.", "Note that setting I(allow_downgrade=true) can make this module behave in a non-idempotent way.", "(The task could end up with a set of packages that does not match the complete list of specified packages to install)."], "choices": null, "aliases": ["allow-downgrade", "allow_downgrades", "allow-downgrades"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_unauthenticated", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Ignore if packages cannot be authenticated. This is useful for bootstrapping environments that manage their own apt-key setup.", "C(allow_unauthenticated) is only supported with state: I(install)/I(present)"], "choices": null, "aliases": ["allow-unauthenticated"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoclean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), cleans the local repository of retrieved package files that can no longer be downloaded."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), remove unused dependency packages for all module states except I(build-dep). It can also be used as the only option.", "Previous to version 2.4, autoclean was also an alias for autoremove, now it is its own separate command. See documentation for further information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cache_valid_time", "type": "int", "elements": "", "default": 0, "required": false, "description": ["Update the apt cache if it is older than the I(cache_valid_time). This option is set in seconds.", "As of Ansible 2.4, if explicitly set, this sets I(update_cache=yes)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "clean", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Run the equivalent of C(apt-get clean) to clear out the local repository of retrieved package files. It removes everything but the lock file from /var/cache/apt/archives/ and /var/cache/apt/archives/partial/.", "Can be run as part of the package installation (clean runs before install) or as a separate step."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "deb", "type": "str", "elements": "", "default": null, "required": false, "description": ["Path to a .deb package on the remote machine.", "If :// in the path, ansible will attempt to download deb before installing. (Version added 2.1)", "Requires the C(xz-utils) package to extract the control file of the deb package to install."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "default_release", "type": "str", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(-t) option for I(apt) and sets pin priorities"], "choices": null, "aliases": ["default-release"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dpkg_options", "type": "str", "elements": "", "default": "force-confdef,force-confold", "required": false, "description": ["Add dpkg options to apt command. Defaults to '-o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\"'", "Options should be supplied as comma separated list"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fail_on_autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--no-remove) option for C(apt).", "If C(true), it is ensured that no packages will be removed or the task will fail.", "C(fail_on_autoremove) is only supported with state except C(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Corresponds to the C(--force-yes) to I(apt-get) and implies C(allow_unauthenticated: yes) and C(allow_downgrade: yes)", "This option will disable checking both the packages' signatures and the certificates of the web servers they are downloaded from.", "This option *is not* the equivalent of passing the C(-f) flag to I(apt-get) on the command line", "**This is a destructive operation with the potential to destroy your system, and it should almost never be used.** Please also see C(man apt-get) for more information."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_apt_get", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force usage of apt-get instead of aptitude"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_recommends", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Corresponds to the C(--no-install-recommends) option for I(apt). C(true) installs recommended packages.  C(false) does not install recommended packages. By default, Ansible will use the same defaults as the operating system. Suggested packages are never installed."], "choices": null, "aliases": ["install-recommends"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 60, "required": false, "description": ["How many seconds will this action wait to acquire a lock on the apt db.", "Sometimes there is a transitory lock and this will retry at least until timeout is hit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A list of package names, like C(foo), or package specifier with version, like C(foo=1.0) or C(foo>=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported."], "choices": null, "aliases": ["package", "pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "only_upgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only upgrade a package if it is already installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "policy_rc_d", "type": "int", "elements": "", "default": null, "required": false, "description": ["Force the exit code of /usr/sbin/policy-rc.d.", "For example, if I(policy_rc_d=101) the installed package will not trigger a service start.", "If /usr/sbin/policy-rc.d already exists, it is backed up and restored after the package installation.", "If C(null), the /usr/sbin/policy-rc.d isn't created/changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "purge", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Will force purging of configuration files if the module state is set to I(absent)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Indicates the desired package state. C(latest) ensures that the latest version is installed. C(build-dep) ensures the package build dependencies are installed. C(fixed) attempt to correct a system with broken dependencies in place."], "choices": ["absent", "build-dep", "latest", "present", "fixed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step.", "Default is not to update the cache."], "choices": null, "aliases": ["update-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retries", "type": "int", "elements": "", "default": 5, "required": false, "description": ["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache_retry_max_delay", "type": "int", "elements": "", "default": 12, "required": false, "description": ["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "upgrade", "type": "str", "elements": "", "default": "no", "required": false, "description": ["If yes or safe, performs an aptitude safe-upgrade.", "If full, performs an aptitude full-upgrade.", "If dist, performs an apt-get dist-upgrade.", "Note: This does not upgrade a specific package, use state=latest for that.", "Note: Since 2.4, apt-get is used as a fall-back if aptitude is not present."], "choices": ["dist", "full", "no", "safe", "yes"], "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release"], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/debian.yml#task:[6]", "name": "debian | ensuring that the RabbitMQ service is running", "module": "service", "index": 6, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[6]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "debian | ensuring that the RabbitMQ service is running", "become": true}, "module_options": {"name": "rabbitmq-server", "state": "started", "enabled": true}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | ensuring that the RabbitMQ service is running\n  service:\n    name: rabbitmq-server\n    state: started\n    enabled: yes\n  become: true\n", "line_num_in_file": [54, 60], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release"], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/debian.yml#task:[7]", "name": "debian | enabling the RabbitMQ Management Console", "module": "rabbitmq_plugin", "index": 7, "play_index": -1, "defined_in": "tasks/debian.yml", "local_key": "task taskfile:tasks/debian.yml#task:[7]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "debian | enabling the RabbitMQ Management Console", "become": true, "notify": "restart rabbitmq-server"}, "module_options": {"names": "rabbitmq_management", "state": "enabled"}, "executable": "rabbitmq_plugin", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: debian | enabling the RabbitMQ Management Console\n  rabbitmq_plugin:\n    names: rabbitmq_management\n    state: enabled\n  become: true\n  notify: restart rabbitmq-server", "line_num_in_file": [61, 67], "resolved_name": "", "possible_candidates": [{"py/tuple": ["community.rabbitmq.rabbitmq_plugin", {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}]}], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "community.rabbitmq.rabbitmq_plugin", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": ["community.rabbitmq.rabbitmq_plugin"], "suggested_dependency": [{"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["broker_state", "names", "name", "new_only", "prefix", "state"], "required_arg_keys": [{"key": "names", "aliases": ["name"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "broker_state", "type": "str", "elements": "", "default": "online", "required": false, "description": ["Specify whether the broker should be online or offline for the plugin change."], "choices": ["online", "offline"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "names", "type": "str", "elements": "", "default": null, "required": true, "description": ["Comma-separated list of plugin names. Also, accepts plugin name."], "choices": null, "aliases": ["name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "new_only", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Only enable missing plugins.", "Does not disable plugins that are not in the names list."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "prefix", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specify a custom install prefix to a Rabbit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "enabled", "required": false, "description": ["Specify if plugins are to be enabled or disabled."], "choices": ["enabled", "disabled"], "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "broker_state", "type": "str", "elements": "", "default": "online", "required": false, "description": ["Specify whether the broker should be online or offline for the plugin change."], "choices": ["online", "offline"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "names", "type": "str", "elements": "", "default": null, "required": true, "description": ["Comma-separated list of plugin names. Also, accepts plugin name."], "choices": null, "aliases": ["name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "new_only", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Only enable missing plugins.", "Does not disable plugins that are not in the names list."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "prefix", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specify a custom install prefix to a Rabbit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "enabled", "required": false, "description": ["Specify if plugins are to be enabled or disabled."], "choices": ["enabled", "disabled"], "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_debian_repo_key", "rabbitmq_debian_repo", "ansible_distribution_release"], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/fedora.yml#task:[0]", "name": "fedora | installing pre-reqs", "module": "dnf", "index": 0, "play_index": -1, "defined_in": "tasks/fedora.yml", "local_key": "task taskfile:tasks/fedora.yml#task:[0]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task taskfile:tasks/fedora.yml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "fedora | installing pre-reqs", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": ["wget"], "state": "present"}, "executable": "dnf", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: fedora | installing pre-reqs\n  dnf:\n    name: ['wget']\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [2, 9], "resolved_name": "ansible.builtin.dnf", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.dnf", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.dnf", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_downgrade", "allowerasing", "autoremove", "bugfix", "cacheonly", "conf_file", "disable_excludes", "disable_gpg_check", "disable_plugin", "disablerepo", "download_dir", "download_only", "enable_plugin", "enablerepo", "exclude", "install_repoquery", "install_weak_deps", "installroot", "list", "lock_timeout", "name", "pkg", "nobest", "releasever", "security", "skip_broken", "sslverify", "state", "update_cache", "expire-cache", "update_only", "validate_certs"], "required_arg_keys": [{"key": "name", "aliases": ["pkg"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allowerasing", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true) it allows  erasing  of  installed  packages to resolve dependencies."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells dnf to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote dnf configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in DNF config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in dnf.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).", "This setting affects packages installed from a repository as well as \"local\" packages installed from the filesystem or a URL."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the I(yum) module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. Use M(ansible.builtin.package_facts) instead of the C(list) argument as a best practice."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the dnf lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": true, "description": ["A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages.", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name >= 1.0). Spaces around the operator are required.", "You can also pass an absolute path for a binary which is provided by the package to install. See examples for more information."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "nobest", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Set best option to False, so that transactions are not limited to best candidates only."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present), C(latest)), or remove (C(absent)) a package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "present", "installed", "removed", "latest"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force dnf to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allowerasing", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true) it allows  erasing  of  installed  packages to resolve dependencies."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells dnf to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote dnf configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in DNF config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in dnf.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).", "This setting affects packages installed from a repository as well as \"local\" packages installed from the filesystem or a URL."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the I(yum) module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. Use M(ansible.builtin.package_facts) instead of the C(list) argument as a best practice."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the dnf lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": true, "description": ["A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages.", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name >= 1.0). Spaces around the operator are required.", "You can also pass an absolute path for a binary which is provided by the package to install. See examples for more information."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "nobest", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Set best option to False, so that transactions are not limited to best candidates only."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present), C(latest)), or remove (C(absent)) a package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "present", "installed", "removed", "latest"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force dnf to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/fedora.yml#task:[1]", "name": "fedora | installing erlang", "module": "dnf", "index": 1, "play_index": -1, "defined_in": "tasks/fedora.yml", "local_key": "task taskfile:tasks/fedora.yml#task:[1]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task taskfile:tasks/fedora.yml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "fedora | installing erlang", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": ["erlang"], "state": "present"}, "executable": "dnf", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: fedora | installing erlang\n  dnf:\n    name: ['erlang']\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [10, 17], "resolved_name": "ansible.builtin.dnf", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.dnf", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.dnf", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_downgrade", "allowerasing", "autoremove", "bugfix", "cacheonly", "conf_file", "disable_excludes", "disable_gpg_check", "disable_plugin", "disablerepo", "download_dir", "download_only", "enable_plugin", "enablerepo", "exclude", "install_repoquery", "install_weak_deps", "installroot", "list", "lock_timeout", "name", "pkg", "nobest", "releasever", "security", "skip_broken", "sslverify", "state", "update_cache", "expire-cache", "update_only", "validate_certs"], "required_arg_keys": [{"key": "name", "aliases": ["pkg"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allowerasing", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true) it allows  erasing  of  installed  packages to resolve dependencies."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells dnf to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote dnf configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in DNF config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in dnf.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).", "This setting affects packages installed from a repository as well as \"local\" packages installed from the filesystem or a URL."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the I(yum) module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. Use M(ansible.builtin.package_facts) instead of the C(list) argument as a best practice."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the dnf lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": true, "description": ["A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages.", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name >= 1.0). Spaces around the operator are required.", "You can also pass an absolute path for a binary which is provided by the package to install. See examples for more information."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "nobest", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Set best option to False, so that transactions are not limited to best candidates only."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present), C(latest)), or remove (C(absent)) a package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "present", "installed", "removed", "latest"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force dnf to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allowerasing", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true) it allows  erasing  of  installed  packages to resolve dependencies."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells dnf to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote dnf configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in DNF config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in dnf.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).", "This setting affects packages installed from a repository as well as \"local\" packages installed from the filesystem or a URL."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the I(yum) module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. Use M(ansible.builtin.package_facts) instead of the C(list) argument as a best practice."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the dnf lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": true, "description": ["A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages.", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name >= 1.0). Spaces around the operator are required.", "You can also pass an absolute path for a binary which is provided by the package to install. See examples for more information."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "nobest", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Set best option to False, so that transactions are not limited to best candidates only."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present), C(latest)), or remove (C(absent)) a package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "present", "installed", "removed", "latest"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force dnf to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/fedora.yml#task:[2]", "name": "fedora | adding RabbitMQ public GPG key", "module": "rpm_key", "index": 2, "play_index": -1, "defined_in": "tasks/fedora.yml", "local_key": "task taskfile:tasks/fedora.yml#task:[2]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task taskfile:tasks/fedora.yml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "fedora | adding RabbitMQ public GPG key", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"key": "{{ rabbitmq_redhat_repo_key }}", "state": "present"}, "executable": "rpm_key", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: fedora | adding RabbitMQ public GPG key\n  rpm_key:\n    key: \"{{ rabbitmq_redhat_repo_key }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [18, 25], "resolved_name": "ansible.builtin.rpm_key", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.rpm_key", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.rpm_key", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["fingerprint", "key", "state", "validate_certs"], "required_arg_keys": [{"key": "key", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fingerprint", "type": "str", "elements": "", "default": null, "required": false, "description": ["The long-form fingerprint of the key being imported.", "This will be used to verify the specified key."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "key", "type": "str", "elements": "", "default": null, "required": true, "description": ["Key that will be modified. Can be a url, a file on the managed node, or a keyid if the key already exists in the database."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["If the key will be imported or removed from the rpm db."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false) and the C(key) is a url starting with https, SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fingerprint", "type": "str", "elements": "", "default": null, "required": false, "description": ["The long-form fingerprint of the key being imported.", "This will be used to verify the specified key."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "key", "type": "str", "elements": "", "default": null, "required": true, "description": ["Key that will be modified. Can be a url, a file on the managed node, or a keyid if the key already exists in the database."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["If the key will be imported or removed from the rpm db."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false) and the C(key) is a url starting with https, SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "key", "value": "{{ rabbitmq_redhat_repo_key }}", "undefined_variables": ["rabbitmq_redhat_repo_key"]}], "unknown_type_values": [{"key": "key", "expected_type": "str", "unknown_type_value": "{{ rabbitmq_redhat_repo_key }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": ["rabbitmq_redhat_repo_key"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/fedora.yml#task:[3]", "name": "fedora | downloading RabbitMQ", "module": "get_url", "index": 3, "play_index": -1, "defined_in": "tasks/fedora.yml", "local_key": "task taskfile:tasks/fedora.yml#task:[3]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "fedora | downloading RabbitMQ", "become": true}, "module_options": {"url": "{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}", "dest": "/opt/{{ rabbitmq_redhat_package }}"}, "executable": "get_url", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: fedora | downloading RabbitMQ\n  get_url:\n    url: \"{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}\"\n    dest: \"/opt/{{ rabbitmq_redhat_package }}\"\n  become: true\n", "line_num_in_file": [26, 31], "resolved_name": "ansible.builtin.get_url", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.get_url", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.get_url", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "ciphers", "client_cert", "client_key", "decompress", "dest", "force", "force_basic_auth", "group", "headers", "http_agent", "mode", "owner", "selevel", "serole", "setype", "seuser", "timeout", "tmp_dest", "unredirected_headers", "unsafe_writes", "url", "url_password", "password", "url_username", "username", "use_gssapi", "use_netrc", "use_proxy", "validate_certs"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "url", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum", "type": "str", "elements": "", "default": "", "required": false, "description": ["If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum|url>, e.g. checksum=\"sha256:D98291AC[...]B6DC7B97\", checksum=\"sha256:http://example.com/path/sha256sum.txt\"", "If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.", "The third party hashlib library can be installed for access to additional algorithms.", "Additionally, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the I(destination_checksum) would be calculated, and if checksum equals I(destination_checksum), the file download would be skipped (unless C(force) is true). If the checksum does not equal I(destination_checksum), the destination file is deleted."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "ciphers", "type": "list", "elements": "str", "default": null, "required": false, "description": ["SSL/TLS Ciphers to use for the request", "When a list is provided, all ciphers are joined in order with C(:)", "See the L(OpenSSL Cipher List Format,https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT) for more details.", "The available ciphers is dependent on the Python and OpenSSL/LibreSSL versions"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_cert", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted certificate chain file to be used for SSL client authentication.", "This file can also include the key as well, and if the key is included, C(client_key) is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_key", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted file that contains your private key to be used for SSL client authentication.", "If C(client_cert) contains both the certificate and key, this option is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "decompress", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to attempt to decompress gzip content-encoded responses"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Absolute path of where to download the file to.", "If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect.", "If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) and C(checksum) option), but replaced only if the contents changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["If C(true) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(false), the file will only be downloaded if the destination does not exist. Generally should be C(true) only for small local files.", "Prior to 0.6, this module behaved as if C(true) was the default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_basic_auth", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the sending of the Basic authentication header upon initial request.", "httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "headers", "type": "dict", "elements": "", "default": null, "required": false, "description": ["Add custom HTTP headers to a request in hash/dict format.", "The hash/dict format was added in Ansible 2.6.", "Previous versions used a C(\"key:value,key:value\") string format.", "The C(\"key:value,key:value\") string format is deprecated and has been removed in version 2.10."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "http_agent", "type": "str", "elements": "", "default": "ansible-httpget", "required": false, "description": ["Header to identify as, generally appears in web server logs."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "timeout", "type": "int", "elements": "", "default": 10, "required": false, "description": ["Timeout in seconds for URL request."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tmp_dest", "type": "str", "elements": "", "default": null, "required": false, "description": ["Absolute path of where temporary file is downloaded to.", "When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting", "When run on Ansible prior to 2.5, it defaults to C(TMPDIR), C(TEMP) or C(TMP) env variables or a platform specific value.", "U(https://docs.python.org/3/library/tempfile.html#tempfile.tempdir)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unredirected_headers", "type": "list", "elements": "str", "default": [], "required": false, "description": ["A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": true, "description": ["HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_password", "type": "str", "elements": "", "default": null, "required": false, "description": ["The password for use in HTTP basic authentication.", "If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.", "Since version 2.8 you can also use the 'password' alias for this option."], "choices": null, "aliases": ["password"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_username", "type": "str", "elements": "", "default": null, "required": false, "description": ["The username for use in HTTP basic authentication.", "This parameter can be used without C(url_password) for sites that allow empty passwords.", "Since version 2.8 you can also use the C(username) alias for this option."], "choices": null, "aliases": ["username"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_gssapi", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.", "Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.", "Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.", "NTLM authentication is I(not) supported even if the GSSAPI mech for NTLM has been installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_netrc", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determining whether to use credentials from ``~/.netrc`` file", "By default .netrc is used with Basic authentication headers", "When set to False, .netrc credentials are ignored"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_proxy", "type": "bool", "elements": "", "default": true, "required": false, "description": ["if C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If C(false), SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum", "type": "str", "elements": "", "default": "", "required": false, "description": ["If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum|url>, e.g. checksum=\"sha256:D98291AC[...]B6DC7B97\", checksum=\"sha256:http://example.com/path/sha256sum.txt\"", "If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.", "The third party hashlib library can be installed for access to additional algorithms.", "Additionally, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the I(destination_checksum) would be calculated, and if checksum equals I(destination_checksum), the file download would be skipped (unless C(force) is true). If the checksum does not equal I(destination_checksum), the destination file is deleted."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "ciphers", "type": "list", "elements": "str", "default": null, "required": false, "description": ["SSL/TLS Ciphers to use for the request", "When a list is provided, all ciphers are joined in order with C(:)", "See the L(OpenSSL Cipher List Format,https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT) for more details.", "The available ciphers is dependent on the Python and OpenSSL/LibreSSL versions"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_cert", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted certificate chain file to be used for SSL client authentication.", "This file can also include the key as well, and if the key is included, C(client_key) is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_key", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted file that contains your private key to be used for SSL client authentication.", "If C(client_cert) contains both the certificate and key, this option is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "decompress", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to attempt to decompress gzip content-encoded responses"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Absolute path of where to download the file to.", "If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect.", "If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) and C(checksum) option), but replaced only if the contents changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["If C(true) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(false), the file will only be downloaded if the destination does not exist. Generally should be C(true) only for small local files.", "Prior to 0.6, this module behaved as if C(true) was the default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_basic_auth", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the sending of the Basic authentication header upon initial request.", "httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "headers", "type": "dict", "elements": "", "default": null, "required": false, "description": ["Add custom HTTP headers to a request in hash/dict format.", "The hash/dict format was added in Ansible 2.6.", "Previous versions used a C(\"key:value,key:value\") string format.", "The C(\"key:value,key:value\") string format is deprecated and has been removed in version 2.10."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "http_agent", "type": "str", "elements": "", "default": "ansible-httpget", "required": false, "description": ["Header to identify as, generally appears in web server logs."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "timeout", "type": "int", "elements": "", "default": 10, "required": false, "description": ["Timeout in seconds for URL request."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tmp_dest", "type": "str", "elements": "", "default": null, "required": false, "description": ["Absolute path of where temporary file is downloaded to.", "When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting", "When run on Ansible prior to 2.5, it defaults to C(TMPDIR), C(TEMP) or C(TMP) env variables or a platform specific value.", "U(https://docs.python.org/3/library/tempfile.html#tempfile.tempdir)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unredirected_headers", "type": "list", "elements": "str", "default": [], "required": false, "description": ["A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": true, "description": ["HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_password", "type": "str", "elements": "", "default": null, "required": false, "description": ["The password for use in HTTP basic authentication.", "If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.", "Since version 2.8 you can also use the 'password' alias for this option."], "choices": null, "aliases": ["password"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_username", "type": "str", "elements": "", "default": null, "required": false, "description": ["The username for use in HTTP basic authentication.", "This parameter can be used without C(url_password) for sites that allow empty passwords.", "Since version 2.8 you can also use the C(username) alias for this option."], "choices": null, "aliases": ["username"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_gssapi", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.", "Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.", "Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.", "NTLM authentication is I(not) supported even if the GSSAPI mech for NTLM has been installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_netrc", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determining whether to use credentials from ``~/.netrc`` file", "By default .netrc is used with Basic authentication headers", "When set to False, .netrc credentials are ignored"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_proxy", "type": "bool", "elements": "", "default": true, "required": false, "description": ["if C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If C(false), SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "url", "value": "{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}", "undefined_variables": ["rabbitmq_redhat_url", "rabbitmq_redhat_package"]}, {"key": "dest", "value": "/opt/{{ rabbitmq_redhat_package }}", "undefined_variables": ["rabbitmq_redhat_package"]}], "unknown_type_values": [{"key": "url", "expected_type": "str", "unknown_type_value": "{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}"}, {"key": "dest", "expected_type": "str", "unknown_type_value": "/opt/{{ rabbitmq_redhat_package }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_redhat_repo_key"], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": ["rabbitmq_redhat_url", "rabbitmq_redhat_package"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/fedora.yml#task:[4]", "name": "fedora | installing RabbitMQ", "module": "dnf", "index": 4, "play_index": -1, "defined_in": "tasks/fedora.yml", "local_key": "task taskfile:tasks/fedora.yml#task:[4]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task taskfile:tasks/fedora.yml#task:[4]"}, "set_facts": {}, "loop": {}, "options": {"name": "fedora | installing RabbitMQ", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": "/opt/{{ rabbitmq_redhat_package }}", "state": "present"}, "executable": "dnf", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: fedora | installing RabbitMQ\n  dnf:\n    name: \"/opt/{{ rabbitmq_redhat_package }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [32, 39], "resolved_name": "ansible.builtin.dnf", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.dnf", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.dnf", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_downgrade", "allowerasing", "autoremove", "bugfix", "cacheonly", "conf_file", "disable_excludes", "disable_gpg_check", "disable_plugin", "disablerepo", "download_dir", "download_only", "enable_plugin", "enablerepo", "exclude", "install_repoquery", "install_weak_deps", "installroot", "list", "lock_timeout", "name", "pkg", "nobest", "releasever", "security", "skip_broken", "sslverify", "state", "update_cache", "expire-cache", "update_only", "validate_certs"], "required_arg_keys": [{"key": "name", "aliases": ["pkg"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allowerasing", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true) it allows  erasing  of  installed  packages to resolve dependencies."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells dnf to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote dnf configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in DNF config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in dnf.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).", "This setting affects packages installed from a repository as well as \"local\" packages installed from the filesystem or a URL."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the I(yum) module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. Use M(ansible.builtin.package_facts) instead of the C(list) argument as a best practice."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the dnf lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": true, "description": ["A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages.", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name >= 1.0). Spaces around the operator are required.", "You can also pass an absolute path for a binary which is provided by the package to install. See examples for more information."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "nobest", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Set best option to False, so that transactions are not limited to best candidates only."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present), C(latest)), or remove (C(absent)) a package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "present", "installed", "removed", "latest"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force dnf to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allowerasing", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true) it allows  erasing  of  installed  packages to resolve dependencies."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells dnf to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote dnf configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in DNF config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in dnf.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).", "This setting affects packages installed from a repository as well as \"local\" packages installed from the filesystem or a URL."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the I(yum) module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. Use M(ansible.builtin.package_facts) instead of the C(list) argument as a best practice."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the dnf lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": true, "description": ["A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages.", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name >= 1.0). Spaces around the operator are required.", "You can also pass an absolute path for a binary which is provided by the package to install. See examples for more information."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "nobest", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Set best option to False, so that transactions are not limited to best candidates only."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related.", "Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present), C(latest)), or remove (C(absent)) a package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "present", "installed", "removed", "latest"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force dnf to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "name", "value": "/opt/{{ rabbitmq_redhat_package }}", "undefined_variables": ["rabbitmq_redhat_package"]}], "unknown_type_values": [{"key": "name", "expected_type": "list", "unknown_type_value": "/opt/{{ rabbitmq_redhat_package }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": ["rabbitmq_redhat_package"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/fedora.yml#task:[5]", "name": "fedora | starting and enabling RabbitMQ service", "module": "service", "index": 5, "play_index": -1, "defined_in": "tasks/fedora.yml", "local_key": "task taskfile:tasks/fedora.yml#task:[5]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "fedora | starting and enabling RabbitMQ service", "become": true}, "module_options": {"name": "rabbitmq-server", "state": "started", "enabled": true}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: fedora | starting and enabling RabbitMQ service\n  service:\n    name: rabbitmq-server\n    state: started\n    enabled: true\n  become: true\n", "line_num_in_file": [40, 46], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/fedora.yml#task:[6]", "name": "fedora | enabling the RabbitMQ Management Console", "module": "rabbitmq_plugin", "index": 6, "play_index": -1, "defined_in": "tasks/fedora.yml", "local_key": "task taskfile:tasks/fedora.yml#task:[6]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "fedora | enabling the RabbitMQ Management Console", "notify": "restart rabbitmq-server", "become": true}, "module_options": {"names": "rabbitmq_management", "state": "enabled"}, "executable": "rabbitmq_plugin", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: fedora | enabling the RabbitMQ Management Console\n  rabbitmq_plugin:\n    names: rabbitmq_management\n    state: enabled\n  notify: restart rabbitmq-server\n  become: true", "line_num_in_file": [47, 53], "resolved_name": "", "possible_candidates": [{"py/tuple": ["community.rabbitmq.rabbitmq_plugin", {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}]}], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "community.rabbitmq.rabbitmq_plugin", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": ["community.rabbitmq.rabbitmq_plugin"], "suggested_dependency": [{"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["broker_state", "names", "name", "new_only", "prefix", "state"], "required_arg_keys": [{"key": "names", "aliases": ["name"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "broker_state", "type": "str", "elements": "", "default": "online", "required": false, "description": ["Specify whether the broker should be online or offline for the plugin change."], "choices": ["online", "offline"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "names", "type": "str", "elements": "", "default": null, "required": true, "description": ["Comma-separated list of plugin names. Also, accepts plugin name."], "choices": null, "aliases": ["name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "new_only", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Only enable missing plugins.", "Does not disable plugins that are not in the names list."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "prefix", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specify a custom install prefix to a Rabbit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "enabled", "required": false, "description": ["Specify if plugins are to be enabled or disabled."], "choices": ["enabled", "disabled"], "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "broker_state", "type": "str", "elements": "", "default": "online", "required": false, "description": ["Specify whether the broker should be online or offline for the plugin change."], "choices": ["online", "offline"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "names", "type": "str", "elements": "", "default": null, "required": true, "description": ["Comma-separated list of plugin names. Also, accepts plugin name."], "choices": null, "aliases": ["name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "new_only", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Only enable missing plugins.", "Does not disable plugins that are not in the names list."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "prefix", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specify a custom install prefix to a Rabbit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "enabled", "required": false, "description": ["Specify if plugins are to be enabled or disabled."], "choices": ["enabled", "disabled"], "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[0]", "name": "rabbitmq_clustering | stopping rabbitmq app", "module": "command", "index": 0, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[0]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | stopping rabbitmq app", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": "rabbitmqctl stop_app", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | stopping rabbitmq app\n  command: rabbitmqctl stop_app\n  become: true\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [2, 6], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[1]", "name": "rabbitmq_clustering | resetting rabbitmq app", "module": "command", "index": 1, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[1]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | resetting rabbitmq app", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": "rabbitmqctl reset", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | resetting rabbitmq app\n  command: rabbitmqctl reset\n  become: true\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [7, 11], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[2]", "name": "rabbitmq_clustering | stopping rabbitmq-server", "module": "service", "index": 2, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[2]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | stopping rabbitmq-server", "become": true}, "module_options": {"name": "rabbitmq-server", "state": "stopped"}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | stopping rabbitmq-server\n  service:\n    name: rabbitmq-server\n    state: stopped\n  become: true\n", "line_num_in_file": [12, 17], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[3]", "name": "rabbitmq_clustering | Capturing Erlang Cookie On Master", "module": "command", "index": 3, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[3]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"rabbitmq_erlang_cookie": "task taskfile:tasks/rabbitmq_clustering.yml#task:[3]"}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | Capturing Erlang Cookie On Master", "become": true, "register": "rabbitmq_erlang_cookie", "when": "inventory_hostname == rabbitmq_master"}, "module_options": "cat {{ rabbitmq_erlang_cookie_file }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | Capturing Erlang Cookie On Master\n  command: \"cat {{ rabbitmq_erlang_cookie_file }}\"\n  become: true\n  register: \"rabbitmq_erlang_cookie\"\n  when: inventory_hostname == rabbitmq_master\n", "line_num_in_file": [18, 23], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["rabbitmq_erlang_cookie"], "vars_used_in_target_task": ["rabbitmq_erlang_cookie_file"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[4]", "name": "rabbitmq_clustering | Setting Erlang Cookie Of Master on Non-Master", "module": "set_fact", "index": 4, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[4]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"rabbitmq_erlang_cookie": "{{ hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout'] }}"}, "loop": {}, "options": {"name": "rabbitmq_clustering | Setting Erlang Cookie Of Master on Non-Master", "when": "inventory_hostname != rabbitmq_master"}, "module_options": {"rabbitmq_erlang_cookie": "{{ hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout'] }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | Setting Erlang Cookie Of Master on Non-Master\n  set_fact:\n    rabbitmq_erlang_cookie: \"{{ hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout'] }}\"\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [24, 28], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "available_args": null, "default_args": null, "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_erlang_cookie_file"], "vars_defined_in_previous_tasks": ["rabbitmq_erlang_cookie"], "vars_used_in_target_task": ["hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[5]", "name": "rabbitmq_clustering | copy erlang cookie", "module": "template", "index": 5, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[5]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | copy erlang cookie", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": {"src": "erlang.cookie.j2", "dest": "{{ rabbitmq_erlang_cookie_file }}", "owner": "rabbitmq", "group": "rabbitmq", "mode": 256, "backup": true}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | copy erlang cookie\n  template:\n    src: erlang.cookie.j2\n    dest: \"{{ rabbitmq_erlang_cookie_file }}\"\n    owner: rabbitmq\n    group: rabbitmq\n    mode: 0400\n    # backing up in case the need to recover\n    backup: yes\n  become: true\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [29, 40], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_end_string", "type": "str", "elements": "", "default": "%}", "required": false, "description": ["The string marking the end of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_start_string", "type": "str", "elements": "", "default": "{%", "required": false, "description": ["The string marking the beginning of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_end_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the end of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_start_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the beginning of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Location to render the template to on the remote machine."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine whether symbolic links should be followed.", "When set to C(true) symbolic links will be followed, if they exist.", "When set to C(false) symbolic links will not be followed.", "Previous to Ansible 2.4, this was hardcoded as C(true)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when the file is being transferred if the destination already exists.", "When set to C(yes), replace the remote file when contents are different than the source.", "When set to C(no), the file will only be transferred if the destination does not exist."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lstrip_blocks", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine when leading spaces and tabs should be stripped.", "When set to C(yes) leading spaces and tabs are stripped from the start of a line to a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "newline_sequence", "type": "str", "elements": "", "default": "\\n", "required": false, "description": ["Specify the newline sequence to use for templating files."], "choices": ["\\n", "\\r", "\\r\\n"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "output_encoding", "type": "str", "elements": "", "default": "utf-8", "required": false, "description": ["Overrides the encoding used to write the template file defined by C(dest).", "It defaults to C(utf-8), but any encoding supported by python can be used.", "The source template file must always be encoded using C(utf-8), for homogeneity."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path of a Jinja2 formatted template on the Ansible controller.", "This can be a relative or an absolute path.", "The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output template."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "trim_blocks", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when newlines should be removed from blocks.", "When set to C(yes) the first newline after a block is removed (block, not variable tag!)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate", "type": "str", "elements": "", "default": null, "required": false, "description": ["The validation command to run before copying the updated file into the final destination.", "A temporary file path is used to validate, passed in through '%s' which must be present as in the examples below.", "Also, the command is passed securely so shell features such as expansion and pipes will not work.", "For an example on how to handle more complex validation than what this option provides, see R(handling complex validation,complex_configuration_validation)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_end_string", "type": "str", "elements": "", "default": "}}", "required": false, "description": ["The string marking the end of a print statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_start_string", "type": "str", "elements": "", "default": "{{", "required": false, "description": ["The string marking the beginning of a print statement."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_end_string", "type": "str", "elements": "", "default": "%}", "required": false, "description": ["The string marking the end of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "block_start_string", "type": "str", "elements": "", "default": "{%", "required": false, "description": ["The string marking the beginning of a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_end_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the end of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "comment_start_string", "type": "str", "elements": "", "default": null, "required": false, "description": ["The string marking the beginning of a comment statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Location to render the template to on the remote machine."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine whether symbolic links should be followed.", "When set to C(true) symbolic links will be followed, if they exist.", "When set to C(false) symbolic links will not be followed.", "Previous to Ansible 2.4, this was hardcoded as C(true)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when the file is being transferred if the destination already exists.", "When set to C(yes), replace the remote file when contents are different than the source.", "When set to C(no), the file will only be transferred if the destination does not exist."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lstrip_blocks", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Determine when leading spaces and tabs should be stripped.", "When set to C(yes) leading spaces and tabs are stripped from the start of a line to a block."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "newline_sequence", "type": "str", "elements": "", "default": "\\n", "required": false, "description": ["Specify the newline sequence to use for templating files."], "choices": ["\\n", "\\r", "\\r\\n"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "output_encoding", "type": "str", "elements": "", "default": "utf-8", "required": false, "description": ["Overrides the encoding used to write the template file defined by C(dest).", "It defaults to C(utf-8), but any encoding supported by python can be used.", "The source template file must always be encoded using C(utf-8), for homogeneity."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path of a Jinja2 formatted template on the Ansible controller.", "This can be a relative or an absolute path.", "The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output template."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "trim_blocks", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determine when newlines should be removed from blocks.", "When set to C(yes) the first newline after a block is removed (block, not variable tag!)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate", "type": "str", "elements": "", "default": null, "required": false, "description": ["The validation command to run before copying the updated file into the final destination.", "A temporary file path is used to validate, passed in through '%s' which must be present as in the examples below.", "Also, the command is passed securely so shell features such as expansion and pipes will not work.", "For an example on how to handle more complex validation than what this option provides, see R(handling complex validation,complex_configuration_validation)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_end_string", "type": "str", "elements": "", "default": "}}", "required": false, "description": ["The string marking the end of a print statement."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "variable_start_string", "type": "str", "elements": "", "default": "{{", "required": false, "description": ["The string marking the beginning of a print statement."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "dest", "value": "{{ rabbitmq_erlang_cookie_file }}", "undefined_variables": ["rabbitmq_erlang_cookie_file"]}], "unknown_type_values": [{"key": "dest", "expected_type": "str", "unknown_type_value": "{{ rabbitmq_erlang_cookie_file }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_erlang_cookie"], "vars_used_in_target_task": ["rabbitmq_erlang_cookie_file"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[6]", "name": "rabbitmq_clustering | restarting rabbitmq-server on master", "module": "service", "index": 6, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[6]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | restarting rabbitmq-server on master", "become": true, "when": "inventory_hostname == rabbitmq_master"}, "module_options": {"name": "rabbitmq-server", "state": "restarted"}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | restarting rabbitmq-server on master\n  service:\n    name: rabbitmq-server\n    state: restarted\n  become: true\n  when: inventory_hostname == rabbitmq_master\n", "line_num_in_file": [41, 47], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_erlang_cookie"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[7]", "name": "rabbitmq_clustering | starting rabbitmq app on master", "module": "command", "index": 7, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[7]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"cluster_master": "task taskfile:tasks/rabbitmq_clustering.yml#task:[7]"}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | starting rabbitmq app on master", "register": "cluster_master", "become": true, "when": "inventory_hostname == rabbitmq_master"}, "module_options": "rabbitmqctl start_app", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | starting rabbitmq app on master\n  command: rabbitmqctl start_app\n  register: cluster_master\n  become: true\n  when: inventory_hostname == rabbitmq_master\n", "line_num_in_file": [48, 53], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_erlang_cookie", "cluster_master"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[8]", "name": "rabbitmq_clustering | sending sigterm to any running rabbitmq processes", "module": "shell", "index": 8, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[8]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | sending sigterm to any running rabbitmq processes", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": "pkill -u rabbitmq || true", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | sending sigterm to any running rabbitmq processes\n  shell: pkill -u rabbitmq || true\n  become: true\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [54, 58], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run followed by optional arguments."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename, when it already exists, this step will B(not) be run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "executable", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change the shell used to execute the command.", "This expects an absolute path to the executable."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "str", "elements": "", "default": null, "required": false, "description": ["The shell module takes a free form command to run, as a string.", "There is no actual parameter named 'free form'.", "See the examples on how to use this module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename, when it does not exist, this step will B(not) be run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to append a newline to stdin data."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run followed by optional arguments."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename, when it already exists, this step will B(not) be run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "executable", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change the shell used to execute the command.", "This expects an absolute path to the executable."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "str", "elements": "", "default": null, "required": false, "description": ["The shell module takes a free form command to run, as a string.", "There is no actual parameter named 'free form'.", "See the examples on how to use this module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename, when it does not exist, this step will B(not) be run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to append a newline to stdin data."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_erlang_cookie", "cluster_master"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[9]", "name": "rabbitmq_clustering | restarting rabbitmq-server", "module": "service", "index": 9, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[9]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | restarting rabbitmq-server", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": {"name": "rabbitmq-server", "state": "restarted"}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | restarting rabbitmq-server on master\n  service:\n    name: rabbitmq-server\n    state: restarted\n  become: true\n  when: inventory_hostname == rabbitmq_master\n", "line_num_in_file": [41, 47], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_erlang_cookie", "cluster_master"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[10]", "name": "rabbitmq_clustering | stopping rabbitmq app", "module": "command", "index": 10, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[10]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | stopping rabbitmq app", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": "rabbitmqctl stop_app", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | stopping rabbitmq app\n  command: rabbitmqctl stop_app\n  become: true\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [2, 6], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_erlang_cookie", "cluster_master"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[11]", "name": "rabbitmq_clustering | resetting rabbitmq app", "module": "command", "index": 11, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[11]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | resetting rabbitmq app", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": "rabbitmqctl reset", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | resetting rabbitmq app\n  command: rabbitmqctl reset\n  become: true\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [7, 11], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_erlang_cookie", "cluster_master"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[12]", "name": "rabbitmq_clustering | joining rabbitmq cluster", "module": "command", "index": 12, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[12]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"cluster_joined": "task taskfile:tasks/rabbitmq_clustering.yml#task:[12]"}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | joining rabbitmq cluster", "register": "cluster_joined", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": "rabbitmqctl join_cluster \"rabbit@{{ hostvars[rabbitmq_master]['ansible_hostname'] }}\"", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | joining rabbitmq cluster\n  command: rabbitmqctl join_cluster \"rabbit@{{ hostvars[rabbitmq_master]['ansible_hostname'] }}\"\n  register: cluster_joined\n  become: true\n  when: inventory_hostname != rabbitmq_master\n", "line_num_in_file": [76, 81], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']"], "vars_defined_in_previous_tasks": ["rabbitmq_erlang_cookie", "cluster_master", "cluster_joined"], "vars_used_in_target_task": ["hostvars[rabbitmq_master]['ansible_hostname']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[13]", "name": "rabbitmq_clustering | starting rabbitmq app", "module": "command", "index": 13, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[13]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | starting rabbitmq app", "become": true, "when": "inventory_hostname != rabbitmq_master"}, "module_options": "rabbitmqctl start_app", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | starting rabbitmq app on master\n  command: rabbitmqctl start_app\n  register: cluster_master\n  become: true\n  when: inventory_hostname == rabbitmq_master\n", "line_num_in_file": [48, 53], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']"], "vars_defined_in_previous_tasks": ["rabbitmq_erlang_cookie", "cluster_master", "cluster_joined"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[14]", "name": "rabbitmq_clustering | marking as clustered", "module": "file", "index": 14, "play_index": -1, "defined_in": "tasks/rabbitmq_clustering.yml", "local_key": "task taskfile:tasks/rabbitmq_clustering.yml#task:[14]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_clustering | marking as clustered", "become": true, "when": "cluster_master['changed'] or cluster_joined['changed']\n"}, "module_options": {"path": "/etc/rabbitmq/clustered", "state": "touch"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_clustering | marking as clustered # noqa 503\n  file:\n    path: /etc/rabbitmq/clustered\n    state: touch\n  become: true\n  when: >\n    cluster_master['changed'] or\n    cluster_joined['changed']", "line_num_in_file": [87, 95], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "access_time", "type": "str", "elements": "", "default": null, "required": false, "description": ["This parameter indicates the time the file's access time should be set to.", "Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now).", "Default is C(None) meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "access_time_format", "type": "str", "elements": "", "default": "%Y%m%d%H%M.%S", "required": false, "description": ["When used with C(access_time), indicates the time format that must be used.", "Based on default Python format (see time.strftime doc)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": true, "required": false, "description": ["This flag indicates that filesystem links, if they exist, should be followed.", "I(follow=yes) and I(state=link) can modify I(src) when combined with parameters such as I(mode).", "Previous to Ansible 2.5, this was C(false) by default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and is a file (so, we need to unlink the C(path) file and create symlink to the C(src) file in place of it).\n"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "modification_time", "type": "str", "elements": "", "default": null, "required": false, "description": ["This parameter indicates the time the file's modification time should be set to.", "Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now).", "Default is None meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "modification_time_format", "type": "str", "elements": "", "default": "%Y%m%d%H%M.%S", "required": false, "description": ["When used with C(modification_time), indicates the time format that must be used.", "Based on default Python format (see time.strftime doc)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "path", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path to the file being managed."], "choices": null, "aliases": ["dest", "name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "recurse", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Recursively set the specified file attributes on directory contents.", "This applies only when C(state) is set to C(directory)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": false, "description": ["Path of the file to link to.", "This applies only to C(state=link) and C(state=hard).", "For C(state=link), this will also accept a non-existing path.", "Relative paths are relative to the file being created (C(path)) which is how the Unix command C(ln -s SRC DEST) treats relative paths."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["If C(absent), directories will be recursively deleted, and files or symlinks will be unlinked. In the case of a directory, if C(diff) is declared, you will see the files and folders deleted listed under C(path_contents). Note that C(absent) will not cause C(file) to fail if the C(path) does not exist as the state did not change.", "If C(directory), all intermediate subdirectories will be created if they do not exist. Since Ansible 1.7 they will be created with the supplied permissions.", "If C(file), with no other options, returns the current state of C(path).", "If C(file), even with other options (such as C(mode)), the file will be modified if it exists but will NOT be created if it does not exist. Set to C(touch) or use the M(ansible.builtin.copy) or M(ansible.builtin.template) module if you want to create the file if it does not exist.", "If C(hard), the hard link will be created or changed.", "If C(link), the symbolic link will be created or changed.", "If C(touch) (new in 1.4), an empty file will be created if the file does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way C(touch) works from the command line).", "Default is the current state of the file if it exists, C(directory) if C(recurse=yes), or C(file) otherwise."], "choices": ["absent", "directory", "file", "hard", "link", "touch"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "access_time", "type": "str", "elements": "", "default": null, "required": false, "description": ["This parameter indicates the time the file's access time should be set to.", "Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now).", "Default is C(None) meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "access_time_format", "type": "str", "elements": "", "default": "%Y%m%d%H%M.%S", "required": false, "description": ["When used with C(access_time), indicates the time format that must be used.", "Based on default Python format (see time.strftime doc)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": true, "required": false, "description": ["This flag indicates that filesystem links, if they exist, should be followed.", "I(follow=yes) and I(state=link) can modify I(src) when combined with parameters such as I(mode).", "Previous to Ansible 2.5, this was C(false) by default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and is a file (so, we need to unlink the C(path) file and create symlink to the C(src) file in place of it).\n"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "modification_time", "type": "str", "elements": "", "default": null, "required": false, "description": ["This parameter indicates the time the file's modification time should be set to.", "Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now).", "Default is None meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "modification_time_format", "type": "str", "elements": "", "default": "%Y%m%d%H%M.%S", "required": false, "description": ["When used with C(modification_time), indicates the time format that must be used.", "Based on default Python format (see time.strftime doc)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "path", "type": "str", "elements": "", "default": null, "required": true, "description": ["Path to the file being managed."], "choices": null, "aliases": ["dest", "name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "recurse", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Recursively set the specified file attributes on directory contents.", "This applies only when C(state) is set to C(directory)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "src", "type": "str", "elements": "", "default": null, "required": false, "description": ["Path of the file to link to.", "This applies only to C(state=link) and C(state=hard).", "For C(state=link), this will also accept a non-existing path.", "Relative paths are relative to the file being created (C(path)) which is how the Unix command C(ln -s SRC DEST) treats relative paths."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["If C(absent), directories will be recursively deleted, and files or symlinks will be unlinked. In the case of a directory, if C(diff) is declared, you will see the files and folders deleted listed under C(path_contents). Note that C(absent) will not cause C(file) to fail if the C(path) does not exist as the state did not change.", "If C(directory), all intermediate subdirectories will be created if they do not exist. Since Ansible 1.7 they will be created with the supplied permissions.", "If C(file), with no other options, returns the current state of C(path).", "If C(file), even with other options (such as C(mode)), the file will be modified if it exists but will NOT be created if it does not exist. Set to C(touch) or use the M(ansible.builtin.copy) or M(ansible.builtin.template) module if you want to create the file if it does not exist.", "If C(hard), the hard link will be created or changed.", "If C(link), the symbolic link will be created or changed.", "If C(touch) (new in 1.4), an empty file will be created if the file does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way C(touch) works from the command line).", "Default is the current state of the file if it exists, C(directory) if C(recurse=yes), or C(file) otherwise."], "choices": ["absent", "directory", "file", "hard", "link", "touch"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_erlang_cookie_file", "hostvars[rabbitmq_master]['rabbitmq_erlang_cookie']['stdout']", "hostvars[rabbitmq_master]['ansible_hostname']"], "vars_defined_in_previous_tasks": ["rabbitmq_erlang_cookie", "cluster_master", "cluster_joined"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[0]", "name": "rabbitmq_ha_config | checking if rabbitmqadmin is installed", "module": "stat", "index": 0, "play_index": -1, "defined_in": "tasks/rabbitmq_ha_config.yml", "local_key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"rabbitmqadmin_check": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_ha_config | checking if rabbitmqadmin is installed", "register": "rabbitmqadmin_check"}, "module_options": {"path": "/usr/sbin/rabbitmqadmin"}, "executable": "stat", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_ha_config | checking if rabbitmqadmin is installed\n  stat:\n    path: /usr/sbin/rabbitmqadmin\n  register: rabbitmqadmin_check\n", "line_num_in_file": [2, 6], "resolved_name": "ansible.builtin.stat", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.stat", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.stat", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["checksum_algorithm", "checksum", "checksum_algo", "follow", "get_attributes", "attr", "attributes", "get_checksum", "get_mime", "mime", "mime_type", "mime-type", "path", "dest", "name"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum_algorithm", "type": "str", "elements": "", "default": "sha1", "required": false, "description": ["Algorithm to determine checksum of file.", "Will throw an error if the host is unable to use specified algorithm.", "The remote host has to support the hashing method specified, C(md5) can be unavailable if the host is FIPS-140 compliant."], "choices": ["md5", "sha1", "sha224", "sha256", "sha384", "sha512"], "aliases": ["checksum", "checksum_algo"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Whether to follow symlinks."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_attributes", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Get file attributes using lsattr tool if present."], "choices": null, "aliases": ["attr", "attributes"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_checksum", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to return a checksum of the file."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_mime", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Use file magic and return data about the nature of the file. this uses the 'file' utility found on most Linux/Unix systems.", "This will add both C(mime_type) and C(charset) fields to the return, if possible.", "In Ansible 2.3 this option changed from I(mime) to I(get_mime) and the default changed to C(true)."], "choices": null, "aliases": ["mime", "mime_type", "mime-type"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "path", "type": "str", "elements": "", "default": null, "required": true, "description": ["The full path of the file/object to get the facts of."], "choices": null, "aliases": ["dest", "name"]}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum_algorithm", "type": "str", "elements": "", "default": "sha1", "required": false, "description": ["Algorithm to determine checksum of file.", "Will throw an error if the host is unable to use specified algorithm.", "The remote host has to support the hashing method specified, C(md5) can be unavailable if the host is FIPS-140 compliant."], "choices": ["md5", "sha1", "sha224", "sha256", "sha384", "sha512"], "aliases": ["checksum", "checksum_algo"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "follow", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Whether to follow symlinks."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_attributes", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Get file attributes using lsattr tool if present."], "choices": null, "aliases": ["attr", "attributes"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_checksum", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to return a checksum of the file."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "get_mime", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Use file magic and return data about the nature of the file. this uses the 'file' utility found on most Linux/Unix systems.", "This will add both C(mime_type) and C(charset) fields to the return, if possible.", "In Ansible 2.3 this option changed from I(mime) to I(get_mime) and the default changed to C(true)."], "choices": null, "aliases": ["mime", "mime_type", "mime-type"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "path", "type": "str", "elements": "", "default": null, "required": true, "description": ["The full path of the file/object to get the facts of."], "choices": null, "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["rabbitmqadmin_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[1]", "name": "rabbit_ha_config | Installing rabbitMQ admin", "module": "get_url", "index": 1, "play_index": -1, "defined_in": "tasks/rabbitmq_ha_config.yml", "local_key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[1]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "rabbit_ha_config | Installing rabbitMQ admin", "become": true, "notify": "restart rabbitmq-server", "when": "not rabbitmqadmin_check['stat']['exists']"}, "module_options": {"url": "http://guest:guest@localhost:15672/cli/rabbitmqadmin", "dest": "/usr/sbin/rabbitmqadmin", "mode": "u=rwx,g=rw,o=rw"}, "executable": "get_url", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbit_ha_config | Installing rabbitMQ admin\n  get_url:\n    url: http://guest:guest@localhost:15672/cli/rabbitmqadmin\n    dest: /usr/sbin/rabbitmqadmin\n    mode: u=rwx,g=rw,o=rw\n  become: true\n  notify: restart rabbitmq-server\n  when: not rabbitmqadmin_check['stat']['exists']\n", "line_num_in_file": [7, 15], "resolved_name": "ansible.builtin.get_url", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.get_url", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.get_url", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "ciphers", "client_cert", "client_key", "decompress", "dest", "force", "force_basic_auth", "group", "headers", "http_agent", "mode", "owner", "selevel", "serole", "setype", "seuser", "timeout", "tmp_dest", "unredirected_headers", "unsafe_writes", "url", "url_password", "password", "url_username", "username", "use_gssapi", "use_netrc", "use_proxy", "validate_certs"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "url", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum", "type": "str", "elements": "", "default": "", "required": false, "description": ["If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum|url>, e.g. checksum=\"sha256:D98291AC[...]B6DC7B97\", checksum=\"sha256:http://example.com/path/sha256sum.txt\"", "If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.", "The third party hashlib library can be installed for access to additional algorithms.", "Additionally, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the I(destination_checksum) would be calculated, and if checksum equals I(destination_checksum), the file download would be skipped (unless C(force) is true). If the checksum does not equal I(destination_checksum), the destination file is deleted."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "ciphers", "type": "list", "elements": "str", "default": null, "required": false, "description": ["SSL/TLS Ciphers to use for the request", "When a list is provided, all ciphers are joined in order with C(:)", "See the L(OpenSSL Cipher List Format,https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT) for more details.", "The available ciphers is dependent on the Python and OpenSSL/LibreSSL versions"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_cert", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted certificate chain file to be used for SSL client authentication.", "This file can also include the key as well, and if the key is included, C(client_key) is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_key", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted file that contains your private key to be used for SSL client authentication.", "If C(client_cert) contains both the certificate and key, this option is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "decompress", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to attempt to decompress gzip content-encoded responses"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Absolute path of where to download the file to.", "If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect.", "If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) and C(checksum) option), but replaced only if the contents changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["If C(true) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(false), the file will only be downloaded if the destination does not exist. Generally should be C(true) only for small local files.", "Prior to 0.6, this module behaved as if C(true) was the default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_basic_auth", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the sending of the Basic authentication header upon initial request.", "httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "headers", "type": "dict", "elements": "", "default": null, "required": false, "description": ["Add custom HTTP headers to a request in hash/dict format.", "The hash/dict format was added in Ansible 2.6.", "Previous versions used a C(\"key:value,key:value\") string format.", "The C(\"key:value,key:value\") string format is deprecated and has been removed in version 2.10."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "http_agent", "type": "str", "elements": "", "default": "ansible-httpget", "required": false, "description": ["Header to identify as, generally appears in web server logs."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "timeout", "type": "int", "elements": "", "default": 10, "required": false, "description": ["Timeout in seconds for URL request."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tmp_dest", "type": "str", "elements": "", "default": null, "required": false, "description": ["Absolute path of where temporary file is downloaded to.", "When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting", "When run on Ansible prior to 2.5, it defaults to C(TMPDIR), C(TEMP) or C(TMP) env variables or a platform specific value.", "U(https://docs.python.org/3/library/tempfile.html#tempfile.tempdir)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unredirected_headers", "type": "list", "elements": "str", "default": [], "required": false, "description": ["A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": true, "description": ["HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_password", "type": "str", "elements": "", "default": null, "required": false, "description": ["The password for use in HTTP basic authentication.", "If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.", "Since version 2.8 you can also use the 'password' alias for this option."], "choices": null, "aliases": ["password"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_username", "type": "str", "elements": "", "default": null, "required": false, "description": ["The username for use in HTTP basic authentication.", "This parameter can be used without C(url_password) for sites that allow empty passwords.", "Since version 2.8 you can also use the C(username) alias for this option."], "choices": null, "aliases": ["username"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_gssapi", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.", "Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.", "Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.", "NTLM authentication is I(not) supported even if the GSSAPI mech for NTLM has been installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_netrc", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determining whether to use credentials from ``~/.netrc`` file", "By default .netrc is used with Basic authentication headers", "When set to False, .netrc credentials are ignored"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_proxy", "type": "bool", "elements": "", "default": true, "required": false, "description": ["if C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If C(false), SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum", "type": "str", "elements": "", "default": "", "required": false, "description": ["If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum|url>, e.g. checksum=\"sha256:D98291AC[...]B6DC7B97\", checksum=\"sha256:http://example.com/path/sha256sum.txt\"", "If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.", "The third party hashlib library can be installed for access to additional algorithms.", "Additionally, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the I(destination_checksum) would be calculated, and if checksum equals I(destination_checksum), the file download would be skipped (unless C(force) is true). If the checksum does not equal I(destination_checksum), the destination file is deleted."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "ciphers", "type": "list", "elements": "str", "default": null, "required": false, "description": ["SSL/TLS Ciphers to use for the request", "When a list is provided, all ciphers are joined in order with C(:)", "See the L(OpenSSL Cipher List Format,https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT) for more details.", "The available ciphers is dependent on the Python and OpenSSL/LibreSSL versions"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_cert", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted certificate chain file to be used for SSL client authentication.", "This file can also include the key as well, and if the key is included, C(client_key) is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_key", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted file that contains your private key to be used for SSL client authentication.", "If C(client_cert) contains both the certificate and key, this option is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "decompress", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to attempt to decompress gzip content-encoded responses"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Absolute path of where to download the file to.", "If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect.", "If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) and C(checksum) option), but replaced only if the contents changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["If C(true) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(false), the file will only be downloaded if the destination does not exist. Generally should be C(true) only for small local files.", "Prior to 0.6, this module behaved as if C(true) was the default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_basic_auth", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the sending of the Basic authentication header upon initial request.", "httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "headers", "type": "dict", "elements": "", "default": null, "required": false, "description": ["Add custom HTTP headers to a request in hash/dict format.", "The hash/dict format was added in Ansible 2.6.", "Previous versions used a C(\"key:value,key:value\") string format.", "The C(\"key:value,key:value\") string format is deprecated and has been removed in version 2.10."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "http_agent", "type": "str", "elements": "", "default": "ansible-httpget", "required": false, "description": ["Header to identify as, generally appears in web server logs."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "timeout", "type": "int", "elements": "", "default": 10, "required": false, "description": ["Timeout in seconds for URL request."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tmp_dest", "type": "str", "elements": "", "default": null, "required": false, "description": ["Absolute path of where temporary file is downloaded to.", "When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting", "When run on Ansible prior to 2.5, it defaults to C(TMPDIR), C(TEMP) or C(TMP) env variables or a platform specific value.", "U(https://docs.python.org/3/library/tempfile.html#tempfile.tempdir)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unredirected_headers", "type": "list", "elements": "str", "default": [], "required": false, "description": ["A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": true, "description": ["HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_password", "type": "str", "elements": "", "default": null, "required": false, "description": ["The password for use in HTTP basic authentication.", "If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.", "Since version 2.8 you can also use the 'password' alias for this option."], "choices": null, "aliases": ["password"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_username", "type": "str", "elements": "", "default": null, "required": false, "description": ["The username for use in HTTP basic authentication.", "This parameter can be used without C(url_password) for sites that allow empty passwords.", "Since version 2.8 you can also use the C(username) alias for this option."], "choices": null, "aliases": ["username"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_gssapi", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.", "Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.", "Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.", "NTLM authentication is I(not) supported even if the GSSAPI mech for NTLM has been installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_netrc", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determining whether to use credentials from ``~/.netrc`` file", "By default .netrc is used with Basic authentication headers", "When set to False, .netrc credentials are ignored"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_proxy", "type": "bool", "elements": "", "default": true, "required": false, "description": ["if C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If C(false), SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["rabbitmqadmin_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[2]", "name": "rabbitmq_ha_config | creating exchange(s)", "module": "command", "index": 2, "play_index": -1, "defined_in": "tasks/rabbitmq_ha_config.yml", "local_key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[2]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_config }}"}, "options": {"name": "rabbitmq_ha_config | creating exchange(s)", "run_once": true, "delegate_to": "{{ rabbitmq_master }}", "become": true, "with_items": "{{ rabbitmq_config }}", "when": "item['exchange_name'] is defined"}, "module_options": "rabbitmqadmin declare exchange name={{ item['exchange_name'] }} type={{ item['type'] }} --vhost={{ item['vhost'] | default('/') }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_ha_config | creating exchange(s)\n  command: rabbitmqadmin declare exchange name={{ item['exchange_name'] }} type={{ item['type'] }} --vhost={{ item['vhost'] | default('/') }}\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  with_items: \"{{ rabbitmq_config }}\"\n  when: item['exchange_name'] is defined\n", "line_num_in_file": [16, 23], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["rabbitmqadmin_check"], "vars_used_in_target_task": ["item", "rabbitmq_config", "item['exchange_name']", "item['type']", "item['vhost']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[3]", "name": "rabbitmq_ha_config | creating queue(s)", "module": "command", "index": 3, "play_index": -1, "defined_in": "tasks/rabbitmq_ha_config.yml", "local_key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[3]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_config }}"}, "options": {"name": "rabbitmq_ha_config | creating queue(s)", "run_once": true, "delegate_to": "{{ rabbitmq_master }}", "become": true, "when": ["item['queue_name'] is defined"], "with_items": "{{ rabbitmq_config }}"}, "module_options": "rabbitmqadmin declare queue name={{ item['queue_name'] }} durable={{ item['durable']|lower }} --vhost={{ item['vhost'] | default('/') }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_ha_config | creating queue(s)\n  command: rabbitmqadmin declare queue name={{ item['queue_name'] }} durable={{ item['durable']|lower }} --vhost={{ item['vhost'] | default('/') }}\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  when:\n    - item['queue_name'] is defined\n  with_items: \"{{ rabbitmq_config }}\"\n", "line_num_in_file": [24, 32], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "rabbitmq_config", "item['exchange_name']", "item['type']", "item['vhost']"], "vars_defined_in_previous_tasks": ["rabbitmqadmin_check"], "vars_used_in_target_task": ["item", "rabbitmq_config", "item['queue_name']", "item['durable']", "item['vhost']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[4]", "name": "rabbitmq_ha_config | setting up ha on queue(s)", "module": "rabbitmq_policy", "index": 4, "play_index": -1, "defined_in": "tasks/rabbitmq_ha_config.yml", "local_key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[4]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {"policy_vhost": "{{ item.vhost | default('/') }}", "policy_name": "{{ item.policy_pattern is defined | ternary(policy_vhost + item.policy_pattern|default(''),item.queue_name|default('')) }}"}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_config }}"}, "options": {"name": "rabbitmq_ha_config | setting up ha on queue(s)", "vars": {"policy_vhost": "{{ item.vhost | default('/') }}", "policy_name": "{{ item.policy_pattern is defined | ternary(policy_vhost + item.policy_pattern|default(''),item.queue_name|default('')) }}"}, "run_once": true, "delegate_to": "{{ rabbitmq_master }}", "become": true, "when": "item.queue_name is defined or item.policy_pattern is defined", "with_items": "{{ rabbitmq_config }}"}, "module_options": {"name": "ha-all{{ policy_name }}", "pattern": "{{ item.queue_name | default(item.policy_pattern) }}", "vhost": "{{ item.vhost | default('/') }}", "tags": "{{ item.tags }}", "state": "present"}, "executable": "rabbitmq_policy", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_ha_config | setting up ha on queue(s)\n  rabbitmq_policy:\n    name: \"ha-all{{ policy_name }}\"\n    pattern: \"{{ item.queue_name | default(item.policy_pattern) }}\"\n    vhost: \"{{ item.vhost | default('/') }}\"\n    tags: \"{{ item.tags }}\"\n    state: present\n  vars:\n    policy_vhost: \"{{ item.vhost | default('/') }}\"\n    policy_name: \"{{ item.policy_pattern is defined | ternary(policy_vhost + item.policy_pattern|default(''),item.queue_name|default('')) }}\"\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  when: item.queue_name is defined or item.policy_pattern is defined\n  with_items: \"{{ rabbitmq_config }}\"\n", "line_num_in_file": [33, 48], "resolved_name": "", "possible_candidates": [{"py/tuple": ["community.rabbitmq.rabbitmq_policy", {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}]}], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "community.rabbitmq.rabbitmq_policy", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": ["community.rabbitmq.rabbitmq_policy"], "suggested_dependency": [{"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["apply_to", "name", "node", "pattern", "priority", "state", "tags", "vhost"], "required_arg_keys": [{"key": "name", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "apply_to", "type": "str", "elements": "", "default": "all", "required": false, "description": ["What the policy applies to. Requires RabbitMQ 3.2.0 or later."], "choices": ["all", "exchanges", "queues"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["The name of the policy to manage."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["Erlang node name of the rabbit we wish to configure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["A regex of queues to apply the policy to. Required when C(state=present). This option is no longer required as of Ansible 2.9."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "priority", "type": "str", "elements": "", "default": "0", "required": false, "description": ["The priority of the policy."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["The state of the policy."], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tags", "type": "dict", "elements": "", "default": null, "required": false, "description": ["A dict or string describing the policy. Required when C(state=present). This option is no longer required as of Ansible 2.9."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "vhost", "type": "str", "elements": "", "default": "/", "required": false, "description": ["The name of the vhost to apply to."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "apply_to", "type": "str", "elements": "", "default": "all", "required": false, "description": ["What the policy applies to. Requires RabbitMQ 3.2.0 or later."], "choices": ["all", "exchanges", "queues"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["The name of the policy to manage."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["Erlang node name of the rabbit we wish to configure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["A regex of queues to apply the policy to. Required when C(state=present). This option is no longer required as of Ansible 2.9."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "priority", "type": "str", "elements": "", "default": "0", "required": false, "description": ["The priority of the policy."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["The state of the policy."], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tags", "type": "dict", "elements": "", "default": null, "required": false, "description": ["A dict or string describing the policy. Required when C(state=present). This option is no longer required as of Ansible 2.9."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "vhost", "type": "str", "elements": "", "default": "/", "required": false, "description": ["The name of the vhost to apply to."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "pattern", "value": "{{ item.queue_name | default(item.policy_pattern) }}", "undefined_variables": ["item.queue_name"]}, {"key": "vhost", "value": "{{ item.vhost | default('/') }}", "undefined_variables": ["item.vhost"]}, {"key": "tags", "value": "{{ item.tags }}", "undefined_variables": ["item.tags"]}], "unknown_type_values": [{"key": "name", "expected_type": "str", "unknown_type_value": "ha-all{{ item.policy_pattern is defined | ternary(policy_vhost + item.policy_pattern|default(''),item.queue_name|default('')) }}"}, {"key": "pattern", "expected_type": "str", "unknown_type_value": "{{ item.queue_name | default(item.policy_pattern) }}"}, {"key": "vhost", "expected_type": "str", "unknown_type_value": "{{ item.vhost | default('/') }}"}, {"key": "tags", "expected_type": "dict", "unknown_type_value": "{{ item.tags }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "rabbitmq_config", "item['exchange_name']", "item['type']", "item['vhost']", "item['queue_name']", "item['durable']"], "vars_defined_in_previous_tasks": ["rabbitmqadmin_check", "policy_vhost", "policy_name"], "vars_used_in_target_task": ["item", "rabbitmq_config", "policy_name", "item.queue_name", "item.vhost", "item.tags"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[5]", "name": "rabbitmq_ha_config | creating binding(s)", "module": "command", "index": 5, "play_index": -1, "defined_in": "tasks/rabbitmq_ha_config.yml", "local_key": "task taskfile:tasks/rabbitmq_ha_config.yml#task:[5]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_config }}"}, "options": {"name": "rabbitmq_ha_config | creating binding(s)", "run_once": true, "delegate_to": "{{ rabbitmq_master }}", "become": true, "with_items": "{{ rabbitmq_config }}", "when": "item['exchange_name'] is defined"}, "module_options": "rabbitmqadmin declare binding source={{ item['exchange_name'] }} destination_type=\"queue\" destination={{ item['queue_name'] }} routing_key={{ item['routing_key'] }} --vhost={{ item['vhost'] | default('/') }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_ha_config | creating binding(s)\n  command: rabbitmqadmin declare binding source={{ item['exchange_name'] }} destination_type=\"queue\" destination={{ item['queue_name'] }} routing_key={{ item['routing_key'] }} --vhost={{ item['vhost'] | default('/') }} # noqa 204\n  run_once: true\n  delegate_to: \"{{ rabbitmq_master }}\"\n  become: true\n  with_items: \"{{ rabbitmq_config }}\"\n  when: item['exchange_name'] is defined", "line_num_in_file": [49, 56], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "rabbitmq_config", "item['exchange_name']", "item['type']", "item['vhost']", "item['queue_name']", "item['durable']", "policy_name", "item.queue_name", "item.vhost", "item.tags"], "vars_defined_in_previous_tasks": ["rabbitmqadmin_check", "policy_vhost", "policy_name"], "vars_used_in_target_task": ["item", "rabbitmq_config", "item['exchange_name']", "item['queue_name']", "item['routing_key']", "item['vhost']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_users.yml#task:[0]", "name": "rabbitmq_users | creating rabbitmq users", "module": "rabbitmq_user", "index": 0, "play_index": -1, "defined_in": "tasks/rabbitmq_users.yml", "local_key": "task taskfile:tasks/rabbitmq_users.yml#task:[0]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_users }}"}, "options": {"name": "rabbitmq_users | creating rabbitmq users", "become": true, "with_items": "{{ rabbitmq_users }}", "when": "(rabbitmq_enable_clustering is defined and\n  not rabbitmq_enable_clustering) or\n  rabbitmq_enable_clustering is not defined\n"}, "module_options": {"name": "{{ item['name'] }}", "password": "{{ item['password'] }}", "vhost": "{{ item['vhost']|default(omit) }}", "configure_priv": "{{ item['configure_priv']|default(omit) }}", "read_priv": "{{ item['read_priv']|default(omit) }}", "write_priv": "{{ item['write_priv']|default(omit) }}", "tags": "{{ item['tags']|default(omit) }}", "permissions": "{{ item['permissions']|default(omit) }}", "state": "present"}, "executable": "rabbitmq_user", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_users | creating rabbitmq users\n  rabbitmq_user:\n    name: \"{{ item['name'] }}\"\n    password: \"{{ item['password'] }}\"\n    vhost: \"{{ item['vhost']|default(omit) }}\"\n    configure_priv: \"{{ item['configure_priv']|default(omit) }}\"\n    read_priv: \"{{ item['read_priv']|default(omit) }}\"\n    write_priv: \"{{ item['write_priv']|default(omit) }}\"\n    tags: \"{{ item['tags']|default(omit) }}\"\n    permissions: \"{{ item['permissions']|default(omit) }}\"\n    state: present\n  become: true\n  with_items: \"{{ rabbitmq_users }}\"\n  when: >\n        (rabbitmq_enable_clustering is defined and\n          not rabbitmq_enable_clustering) or\n          rabbitmq_enable_clustering is not defined\n", "line_num_in_file": [2, 19], "resolved_name": "", "possible_candidates": [{"py/tuple": ["community.rabbitmq.rabbitmq_user", {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}]}], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "community.rabbitmq.rabbitmq_user", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": ["community.rabbitmq.rabbitmq_user"], "suggested_dependency": [{"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["configure_priv", "force", "node", "password", "permissions", "read_priv", "state", "tags", "topic_permissions", "update_password", "user", "username", "name", "vhost", "write_priv"], "required_arg_keys": [{"key": "user", "aliases": ["username", "name"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "configure_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Deletes and recreates the user."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["erlang node name of the rabbit we wish to configure"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "password", "type": "str", "elements": "", "default": null, "required": false, "description": ["Password of user to add.", "To change the password of an existing user, you must also specify C(update_password=always)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["a list of dicts, each dict contains vhost, configure_priv, write_priv, and read_priv, and represents a permission rule for that vhost.", "This option should be preferable when you care about all permissions of the user.", "You should use vhost, configure_priv, write_priv, and read_priv options instead if you care about permissions for just some vhosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "read_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Specify if user is to be added or removed"], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tags", "type": "str", "elements": "", "default": null, "required": false, "description": ["User tags specified as comma delimited"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "topic_permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["A list of dicts, each dict contains vhost, exchange, read_priv and write_priv, and represents a topic permission rule for that vhost.", "By default vhost is C(/) and exchange is C(amq.topic).", "Supported since RabbitMQ 3.7.0. If RabbitMQ is older and topic_permissions are set, the module will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_password", "type": "str", "elements": "", "default": "on_create", "required": false, "description": ["C(on_create) will only set the password for newly created users.  C(always) will update passwords if they differ."], "choices": ["on_create", "always"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "user", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of user to add"], "choices": null, "aliases": ["username", "name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "vhost", "type": "str", "elements": "", "default": "/", "required": false, "description": ["vhost to apply access privileges.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "write_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "configure_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Deletes and recreates the user."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["erlang node name of the rabbit we wish to configure"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "password", "type": "str", "elements": "", "default": null, "required": false, "description": ["Password of user to add.", "To change the password of an existing user, you must also specify C(update_password=always)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["a list of dicts, each dict contains vhost, configure_priv, write_priv, and read_priv, and represents a permission rule for that vhost.", "This option should be preferable when you care about all permissions of the user.", "You should use vhost, configure_priv, write_priv, and read_priv options instead if you care about permissions for just some vhosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "read_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Specify if user is to be added or removed"], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tags", "type": "str", "elements": "", "default": null, "required": false, "description": ["User tags specified as comma delimited"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "topic_permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["A list of dicts, each dict contains vhost, exchange, read_priv and write_priv, and represents a topic permission rule for that vhost.", "By default vhost is C(/) and exchange is C(amq.topic).", "Supported since RabbitMQ 3.7.0. If RabbitMQ is older and topic_permissions are set, the module will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_password", "type": "str", "elements": "", "default": "on_create", "required": false, "description": ["C(on_create) will only set the password for newly created users.  C(always) will update passwords if they differ."], "choices": ["on_create", "always"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "user", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of user to add"], "choices": null, "aliases": ["username", "name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "vhost", "type": "str", "elements": "", "default": "/", "required": false, "description": ["vhost to apply access privileges.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "write_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [{"used_alias": "name", "real_key": "user"}], "wrong_arg_values": [], "undefined_values": [{"key": "name", "value": "{{ item['name'] }}", "undefined_variables": ["item['name']"]}, {"key": "password", "value": "{{ item['password'] }}", "undefined_variables": ["item['password']"]}], "unknown_type_values": [{"key": "name", "expected_type": "str", "unknown_type_value": "{{ item['name'] }}"}, {"key": "password", "expected_type": "str", "unknown_type_value": "{{ item['password'] }}"}, {"key": "vhost", "expected_type": "str", "unknown_type_value": "{{ item['vhost']|default(omit) }}"}, {"key": "configure_priv", "expected_type": "str", "unknown_type_value": "{{ item['configure_priv']|default(omit) }}"}, {"key": "read_priv", "expected_type": "str", "unknown_type_value": "{{ item['read_priv']|default(omit) }}"}, {"key": "write_priv", "expected_type": "str", "unknown_type_value": "{{ item['write_priv']|default(omit) }}"}, {"key": "tags", "expected_type": "str", "unknown_type_value": "{{ item['tags']|default(omit) }}"}, {"key": "permissions", "expected_type": "list", "unknown_type_value": "{{ item['permissions']|default(omit) }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "rabbitmq_users", "item['name']", "item['password']", "item['vhost']", "item['configure_priv']", "item['read_priv']", "item['write_priv']", "item['tags']", "item['permissions']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_users.yml#task:[1]", "name": "rabbitmq_users | creating rabbitmq users", "module": "rabbitmq_user", "index": 1, "play_index": -1, "defined_in": "tasks/rabbitmq_users.yml", "local_key": "task taskfile:tasks/rabbitmq_users.yml#task:[1]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_users }}"}, "options": {"name": "rabbitmq_users | creating rabbitmq users", "run_once": true, "delegate_to": "{{ rabbitmq_master }}", "become": true, "with_items": "{{ rabbitmq_users }}", "when": "rabbitmq_enable_clustering is defined and\n  rabbitmq_enable_clustering\n"}, "module_options": {"name": "{{ item['name'] }}", "password": "{{ item['password'] }}", "vhost": "{{ item['vhost']|default(omit) }}", "configure_priv": "{{ item['configure_priv']|default(omit) }}", "read_priv": "{{ item['read_priv']|default(omit) }}", "write_priv": "{{ item['write_priv']|default(omit) }}", "tags": "{{ item['tags']|default(omit) }}", "permissions": "{{ item['permissions']|default(omit) }}", "state": "present"}, "executable": "rabbitmq_user", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_users | creating rabbitmq users\n  rabbitmq_user:\n    name: \"{{ item['name'] }}\"\n    password: \"{{ item['password'] }}\"\n    vhost: \"{{ item['vhost']|default(omit) }}\"\n    configure_priv: \"{{ item['configure_priv']|default(omit) }}\"\n    read_priv: \"{{ item['read_priv']|default(omit) }}\"\n    write_priv: \"{{ item['write_priv']|default(omit) }}\"\n    tags: \"{{ item['tags']|default(omit) }}\"\n    permissions: \"{{ item['permissions']|default(omit) }}\"\n    state: present\n  become: true\n  with_items: \"{{ rabbitmq_users }}\"\n  when: >\n        (rabbitmq_enable_clustering is defined and\n          not rabbitmq_enable_clustering) or\n          rabbitmq_enable_clustering is not defined\n", "line_num_in_file": [2, 19], "resolved_name": "", "possible_candidates": [{"py/tuple": ["community.rabbitmq.rabbitmq_user", {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}]}], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "community.rabbitmq.rabbitmq_user", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": ["community.rabbitmq.rabbitmq_user"], "suggested_dependency": [{"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["configure_priv", "force", "node", "password", "permissions", "read_priv", "state", "tags", "topic_permissions", "update_password", "user", "username", "name", "vhost", "write_priv"], "required_arg_keys": [{"key": "user", "aliases": ["username", "name"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "configure_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Deletes and recreates the user."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["erlang node name of the rabbit we wish to configure"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "password", "type": "str", "elements": "", "default": null, "required": false, "description": ["Password of user to add.", "To change the password of an existing user, you must also specify C(update_password=always)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["a list of dicts, each dict contains vhost, configure_priv, write_priv, and read_priv, and represents a permission rule for that vhost.", "This option should be preferable when you care about all permissions of the user.", "You should use vhost, configure_priv, write_priv, and read_priv options instead if you care about permissions for just some vhosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "read_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Specify if user is to be added or removed"], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tags", "type": "str", "elements": "", "default": null, "required": false, "description": ["User tags specified as comma delimited"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "topic_permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["A list of dicts, each dict contains vhost, exchange, read_priv and write_priv, and represents a topic permission rule for that vhost.", "By default vhost is C(/) and exchange is C(amq.topic).", "Supported since RabbitMQ 3.7.0. If RabbitMQ is older and topic_permissions are set, the module will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_password", "type": "str", "elements": "", "default": "on_create", "required": false, "description": ["C(on_create) will only set the password for newly created users.  C(always) will update passwords if they differ."], "choices": ["on_create", "always"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "user", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of user to add"], "choices": null, "aliases": ["username", "name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "vhost", "type": "str", "elements": "", "default": "/", "required": false, "description": ["vhost to apply access privileges.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "write_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "configure_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Deletes and recreates the user."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["erlang node name of the rabbit we wish to configure"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "password", "type": "str", "elements": "", "default": null, "required": false, "description": ["Password of user to add.", "To change the password of an existing user, you must also specify C(update_password=always)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["a list of dicts, each dict contains vhost, configure_priv, write_priv, and read_priv, and represents a permission rule for that vhost.", "This option should be preferable when you care about all permissions of the user.", "You should use vhost, configure_priv, write_priv, and read_priv options instead if you care about permissions for just some vhosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "read_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["Specify if user is to be added or removed"], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tags", "type": "str", "elements": "", "default": null, "required": false, "description": ["User tags specified as comma delimited"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "topic_permissions", "type": "list", "elements": "dict", "default": [], "required": false, "description": ["A list of dicts, each dict contains vhost, exchange, read_priv and write_priv, and represents a topic permission rule for that vhost.", "By default vhost is C(/) and exchange is C(amq.topic).", "Supported since RabbitMQ 3.7.0. If RabbitMQ is older and topic_permissions are set, the module will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_password", "type": "str", "elements": "", "default": "on_create", "required": false, "description": ["C(on_create) will only set the password for newly created users.  C(always) will update passwords if they differ."], "choices": ["on_create", "always"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "user", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of user to add"], "choices": null, "aliases": ["username", "name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "vhost", "type": "str", "elements": "", "default": "/", "required": false, "description": ["vhost to apply access privileges.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "write_priv", "type": "str", "elements": "", "default": "^$", "required": false, "description": ["Regular expression to restrict configure actions on a resource for the specified vhost.", "By default all actions are restricted.", "This option will be ignored when permissions option is used."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [{"used_alias": "name", "real_key": "user"}], "wrong_arg_values": [], "undefined_values": [{"key": "name", "value": "{{ item['name'] }}", "undefined_variables": ["item['name']"]}, {"key": "password", "value": "{{ item['password'] }}", "undefined_variables": ["item['password']"]}], "unknown_type_values": [{"key": "name", "expected_type": "str", "unknown_type_value": "{{ item['name'] }}"}, {"key": "password", "expected_type": "str", "unknown_type_value": "{{ item['password'] }}"}, {"key": "vhost", "expected_type": "str", "unknown_type_value": "{{ item['vhost']|default(omit) }}"}, {"key": "configure_priv", "expected_type": "str", "unknown_type_value": "{{ item['configure_priv']|default(omit) }}"}, {"key": "read_priv", "expected_type": "str", "unknown_type_value": "{{ item['read_priv']|default(omit) }}"}, {"key": "write_priv", "expected_type": "str", "unknown_type_value": "{{ item['write_priv']|default(omit) }}"}, {"key": "tags", "expected_type": "str", "unknown_type_value": "{{ item['tags']|default(omit) }}"}, {"key": "permissions", "expected_type": "list", "unknown_type_value": "{{ item['permissions']|default(omit) }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "rabbitmq_users", "item['name']", "item['password']", "item['vhost']", "item['configure_priv']", "item['read_priv']", "item['write_priv']", "item['tags']", "item['permissions']"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "rabbitmq_users", "item['name']", "item['password']", "item['vhost']", "item['configure_priv']", "item['read_priv']", "item['write_priv']", "item['tags']", "item['permissions']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_vhosts.yml#task:[0]", "name": "rabbitmq_extra_vhosts | Create vhosts", "module": "rabbitmq_vhost", "index": 0, "play_index": -1, "defined_in": "tasks/rabbitmq_vhosts.yml", "local_key": "task taskfile:tasks/rabbitmq_vhosts.yml#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"rabbitmq_created_vhosts": "task taskfile:tasks/rabbitmq_vhosts.yml#task:[0]"}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_extra_vhosts }}"}, "options": {"name": "rabbitmq_extra_vhosts | Create vhosts", "with_items": "{{ rabbitmq_extra_vhosts }}", "run_once": "{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}", "register": "rabbitmq_created_vhosts"}, "module_options": {"name": "{{ item['name'] }}", "state": "{{ item['state'] }}"}, "executable": "rabbitmq_vhost", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_extra_vhosts | Create vhosts\n  rabbitmq_vhost:\n    name: \"{{ item['name'] }}\"\n    state: \"{{ item['state'] }}\"\n  with_items: \"{{ rabbitmq_extra_vhosts }}\"\n  run_once: \"{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}\"\n  register: rabbitmq_created_vhosts\n", "line_num_in_file": [2, 9], "resolved_name": "", "possible_candidates": [{"py/tuple": ["community.rabbitmq.rabbitmq_vhost", {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}]}], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "community.rabbitmq.rabbitmq_vhost", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": ["community.rabbitmq.rabbitmq_vhost"], "suggested_dependency": [{"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["name", "vhost", "node", "state", "tracing", "trace"], "required_arg_keys": [{"key": "name", "aliases": ["vhost"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["The name of the vhost to manage"], "choices": null, "aliases": ["vhost"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["erlang node name of the rabbit we wish to configure"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["The state of vhost"], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tracing", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Enable/disable tracing for a vhost"], "choices": null, "aliases": ["trace"]}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["The name of the vhost to manage"], "choices": null, "aliases": ["vhost"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "node", "type": "str", "elements": "", "default": "rabbit", "required": false, "description": ["erlang node name of the rabbit we wish to configure"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["The state of vhost"], "choices": ["present", "absent"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tracing", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Enable/disable tracing for a vhost"], "choices": null, "aliases": ["trace"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "name", "value": "{{ item['name'] }}", "undefined_variables": ["item['name']"]}, {"key": "state", "value": "{{ item['state'] }}", "undefined_variables": ["item['state']"]}], "unknown_type_values": [{"key": "name", "expected_type": "str", "unknown_type_value": "{{ item['name'] }}"}, {"key": "state", "expected_type": "str", "unknown_type_value": "{{ item['state'] }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["rabbitmq_created_vhosts"], "vars_used_in_target_task": ["item", "rabbitmq_extra_vhosts", "item['name']", "item['state']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_vhosts.yml#task:[1]", "name": "rabbitmq_extra_vhosts | Check guest administrator is present", "module": "command", "index": 1, "play_index": -1, "defined_in": "tasks/rabbitmq_vhosts.yml", "local_key": "task taskfile:tasks/rabbitmq_vhosts.yml#task:[1]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"rabbitmq_existing_users": "task taskfile:tasks/rabbitmq_vhosts.yml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "rabbitmq_extra_vhosts | Check guest administrator is present", "become": true, "run_once": "{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}", "when": "rabbitmq_created_vhosts.changed", "changed_when": false, "register": "rabbitmq_existing_users"}, "module_options": "rabbitmqctl -q list_users", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_extra_vhosts | Check guest administrator is present # noqa 503\n  command: rabbitmqctl -q list_users\n  become: true\n  run_once: \"{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}\"\n  when: rabbitmq_created_vhosts.changed\n  changed_when: false\n  register: rabbitmq_existing_users\n", "line_num_in_file": [10, 17], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "rabbitmq_extra_vhosts", "item['name']", "item['state']"], "vars_defined_in_previous_tasks": ["rabbitmq_created_vhosts", "rabbitmq_existing_users"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/rabbitmq_vhosts.yml#task:[2]", "name": "rabbitmq_extra_vhosts | Give access to new vhosts to guest administrator", "module": "command", "index": 2, "play_index": -1, "defined_in": "tasks/rabbitmq_vhosts.yml", "local_key": "task taskfile:tasks/rabbitmq_vhosts.yml#task:[2]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ rabbitmq_created_vhosts.results|selectattr('changed')|list }}"}, "options": {"name": "rabbitmq_extra_vhosts | Give access to new vhosts to guest administrator", "become": true, "run_once": "{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}", "with_items": "{{ rabbitmq_created_vhosts.results|selectattr('changed')|list }}", "when": ["item['state'] == 'present'", "rabbitmq_existing_users.stdout_lines | map('regex_search', '^guest\\\\s\\\\[.*administrator.*\\\\]$') | list | difference([None]) | length > 0"]}, "module_options": "rabbitmqctl -q set_permissions -p {{ item['name'] }} guest '.*' '.*' '.*'", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: rabbitmq_extra_vhosts | Give access to new vhosts to guest administrator\n  command: \"rabbitmqctl -q set_permissions -p {{ item['name'] }} guest '.*' '.*' '.*'\"\n  become: true\n  run_once: \"{{ rabbitmq_enable_clustering is defined and rabbitmq_enable_clustering }}\"\n  with_items: \"{{ rabbitmq_created_vhosts.results|selectattr('changed')|list }}\"\n  when:\n    - item['state'] == 'present'\n    - rabbitmq_existing_users.stdout_lines | map('regex_search', '^guest\\\\s\\\\[.*administrator.*\\\\]$') | list | difference([None]) | length > 0", "line_num_in_file": [18, 26], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "argv", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Passes the command as a list rather than a string.", "Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").", "Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "chdir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Change into this directory before running the command."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cmd", "type": "str", "elements": "", "default": null, "required": false, "description": ["The command to run."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "creates", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.", "This is checked before I(removes) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "free_form", "type": "", "elements": "", "default": null, "required": false, "description": ["The command module takes a free form string as a command to run.", "There is no actual parameter named 'free form'."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "removes", "type": "str", "elements": "", "default": null, "required": false, "description": ["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.", "This is checked after I(creates) is checked."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin", "type": "str", "elements": "", "default": null, "required": false, "description": ["Set the stdin of the command directly to the specified value."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "stdin_add_newline", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If set to C(true), append a newline to stdin data."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "strip_empty_ends", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Strip empty lines from the end of stdout/stderr in result."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "rabbitmq_extra_vhosts", "item['name']", "item['state']"], "vars_defined_in_previous_tasks": ["rabbitmq_created_vhosts", "rabbitmq_existing_users"], "vars_used_in_target_task": ["item", "rabbitmq_created_vhosts.results", "item['name']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/redhat.yml#task:[0]", "name": "redhat | installing pre-reqs", "module": "yum", "index": 0, "play_index": -1, "defined_in": "tasks/redhat.yml", "local_key": "task taskfile:tasks/redhat.yml#task:[0]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task taskfile:tasks/redhat.yml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "redhat | installing pre-reqs", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": ["epel-release", "wget"], "state": "present"}, "executable": "yum", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: redhat | installing pre-reqs\n  yum:\n    name: ['epel-release', 'wget']\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [2, 9], "resolved_name": "ansible.builtin.yum", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.yum", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.yum", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_downgrade", "autoremove", "bugfix", "cacheonly", "conf_file", "disable_excludes", "disable_gpg_check", "disable_plugin", "disablerepo", "download_dir", "download_only", "enable_plugin", "enablerepo", "exclude", "install_repoquery", "install_weak_deps", "installroot", "list", "lock_timeout", "name", "pkg", "releasever", "security", "skip_broken", "sslverify", "state", "update_cache", "expire-cache", "update_only", "use_backend", "validate_certs"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)", "NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells yum to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote yum configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in YUM config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in yum.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If repoquery is not available, install yum-utils. If the system is registered to RHN or an RHN Satellite, repoquery allows for querying all channels assigned to the system. It is also required to use the 'list' parameter.", "NOTE: This will run and be logged as a separate yum transation which takes place before any other installation or removal.", "NOTE: This will use the system's default enabled repositories without regard for disablerepo/enablerepo given to the module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation.", "NOTE: This feature requires yum >= 4 (RHEL/CentOS 8+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Package name to run the equivalent of C(yum list --show-duplicates <package>) against. In addition to listing packages, use can also list the following: C(installed), C(updates), C(available) and C(repos).", "This parameter is mutually exclusive with I(name)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the yum lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A package name or package specifier with version, like C(name-1.0).", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name>=1.0)", "If a previous version is specified, the task also needs to turn C(allow_downgrade) on. See the C(allow_downgrade) documentation for caveats with downgrading packages.", "When using state=latest, this can be C('*') which means run C(yum -y update).", "You can also pass a url or a local path to a rpm file (using state=present). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.", "C(present) and C(installed) will simply ensure that a desired package is installed.", "C(latest) will update the specified package if it's not of the latest available version.", "C(absent) and C(removed) will remove the specified package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "installed", "latest", "present", "removed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_backend", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the \"new yum\" and it has an C(dnf) backend.", "By default, this module will select the backend based on the C(ansible_pkg_mgr) fact."], "choices": ["auto", "yum", "yum4", "dnf"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.", "Prior to 2.1 the code worked as if this was set to C(true)."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)", "NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells yum to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote yum configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in YUM config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in yum.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If repoquery is not available, install yum-utils. If the system is registered to RHN or an RHN Satellite, repoquery allows for querying all channels assigned to the system. It is also required to use the 'list' parameter.", "NOTE: This will run and be logged as a separate yum transation which takes place before any other installation or removal.", "NOTE: This will use the system's default enabled repositories without regard for disablerepo/enablerepo given to the module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation.", "NOTE: This feature requires yum >= 4 (RHEL/CentOS 8+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Package name to run the equivalent of C(yum list --show-duplicates <package>) against. In addition to listing packages, use can also list the following: C(installed), C(updates), C(available) and C(repos).", "This parameter is mutually exclusive with I(name)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the yum lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A package name or package specifier with version, like C(name-1.0).", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name>=1.0)", "If a previous version is specified, the task also needs to turn C(allow_downgrade) on. See the C(allow_downgrade) documentation for caveats with downgrading packages.", "When using state=latest, this can be C('*') which means run C(yum -y update).", "You can also pass a url or a local path to a rpm file (using state=present). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.", "C(present) and C(installed) will simply ensure that a desired package is installed.", "C(latest) will update the specified package if it's not of the latest available version.", "C(absent) and C(removed) will remove the specified package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "installed", "latest", "present", "removed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_backend", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the \"new yum\" and it has an C(dnf) backend.", "By default, this module will select the backend based on the C(ansible_pkg_mgr) fact."], "choices": ["auto", "yum", "yum4", "dnf"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.", "Prior to 2.1 the code worked as if this was set to C(true)."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/redhat.yml#task:[1]", "name": "redhat | installing erlang", "module": "yum", "index": 1, "play_index": -1, "defined_in": "tasks/redhat.yml", "local_key": "task taskfile:tasks/redhat.yml#task:[1]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task taskfile:tasks/redhat.yml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "redhat | installing erlang", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": "erlang", "state": "present"}, "executable": "yum", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: redhat | installing erlang\n  yum:\n    name: erlang\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [10, 17], "resolved_name": "ansible.builtin.yum", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.yum", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.yum", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_downgrade", "autoremove", "bugfix", "cacheonly", "conf_file", "disable_excludes", "disable_gpg_check", "disable_plugin", "disablerepo", "download_dir", "download_only", "enable_plugin", "enablerepo", "exclude", "install_repoquery", "install_weak_deps", "installroot", "list", "lock_timeout", "name", "pkg", "releasever", "security", "skip_broken", "sslverify", "state", "update_cache", "expire-cache", "update_only", "use_backend", "validate_certs"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)", "NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells yum to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote yum configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in YUM config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in yum.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If repoquery is not available, install yum-utils. If the system is registered to RHN or an RHN Satellite, repoquery allows for querying all channels assigned to the system. It is also required to use the 'list' parameter.", "NOTE: This will run and be logged as a separate yum transation which takes place before any other installation or removal.", "NOTE: This will use the system's default enabled repositories without regard for disablerepo/enablerepo given to the module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation.", "NOTE: This feature requires yum >= 4 (RHEL/CentOS 8+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Package name to run the equivalent of C(yum list --show-duplicates <package>) against. In addition to listing packages, use can also list the following: C(installed), C(updates), C(available) and C(repos).", "This parameter is mutually exclusive with I(name)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the yum lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A package name or package specifier with version, like C(name-1.0).", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name>=1.0)", "If a previous version is specified, the task also needs to turn C(allow_downgrade) on. See the C(allow_downgrade) documentation for caveats with downgrading packages.", "When using state=latest, this can be C('*') which means run C(yum -y update).", "You can also pass a url or a local path to a rpm file (using state=present). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.", "C(present) and C(installed) will simply ensure that a desired package is installed.", "C(latest) will update the specified package if it's not of the latest available version.", "C(absent) and C(removed) will remove the specified package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "installed", "latest", "present", "removed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_backend", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the \"new yum\" and it has an C(dnf) backend.", "By default, this module will select the backend based on the C(ansible_pkg_mgr) fact."], "choices": ["auto", "yum", "yum4", "dnf"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.", "Prior to 2.1 the code worked as if this was set to C(true)."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)", "NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells yum to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote yum configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in YUM config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in yum.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If repoquery is not available, install yum-utils. If the system is registered to RHN or an RHN Satellite, repoquery allows for querying all channels assigned to the system. It is also required to use the 'list' parameter.", "NOTE: This will run and be logged as a separate yum transation which takes place before any other installation or removal.", "NOTE: This will use the system's default enabled repositories without regard for disablerepo/enablerepo given to the module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation.", "NOTE: This feature requires yum >= 4 (RHEL/CentOS 8+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Package name to run the equivalent of C(yum list --show-duplicates <package>) against. In addition to listing packages, use can also list the following: C(installed), C(updates), C(available) and C(repos).", "This parameter is mutually exclusive with I(name)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the yum lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A package name or package specifier with version, like C(name-1.0).", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name>=1.0)", "If a previous version is specified, the task also needs to turn C(allow_downgrade) on. See the C(allow_downgrade) documentation for caveats with downgrading packages.", "When using state=latest, this can be C('*') which means run C(yum -y update).", "You can also pass a url or a local path to a rpm file (using state=present). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.", "C(present) and C(installed) will simply ensure that a desired package is installed.", "C(latest) will update the specified package if it's not of the latest available version.", "C(absent) and C(removed) will remove the specified package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "installed", "latest", "present", "removed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_backend", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the \"new yum\" and it has an C(dnf) backend.", "By default, this module will select the backend based on the C(ansible_pkg_mgr) fact."], "choices": ["auto", "yum", "yum4", "dnf"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.", "Prior to 2.1 the code worked as if this was set to C(true)."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/redhat.yml#task:[2]", "name": "redhat | adding RabbitMQ public GPG key", "module": "rpm_key", "index": 2, "play_index": -1, "defined_in": "tasks/redhat.yml", "local_key": "task taskfile:tasks/redhat.yml#task:[2]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task taskfile:tasks/redhat.yml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "redhat | adding RabbitMQ public GPG key", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"key": "{{ rabbitmq_redhat_repo_key }}", "state": "present"}, "executable": "rpm_key", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: redhat | adding RabbitMQ public GPG key\n  rpm_key:\n    key: \"{{ rabbitmq_redhat_repo_key }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [18, 25], "resolved_name": "ansible.builtin.rpm_key", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.rpm_key", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.rpm_key", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["fingerprint", "key", "state", "validate_certs"], "required_arg_keys": [{"key": "key", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fingerprint", "type": "str", "elements": "", "default": null, "required": false, "description": ["The long-form fingerprint of the key being imported.", "This will be used to verify the specified key."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "key", "type": "str", "elements": "", "default": null, "required": true, "description": ["Key that will be modified. Can be a url, a file on the managed node, or a keyid if the key already exists in the database."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["If the key will be imported or removed from the rpm db."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false) and the C(key) is a url starting with https, SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "fingerprint", "type": "str", "elements": "", "default": null, "required": false, "description": ["The long-form fingerprint of the key being imported.", "This will be used to verify the specified key."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "key", "type": "str", "elements": "", "default": null, "required": true, "description": ["Key that will be modified. Can be a url, a file on the managed node, or a keyid if the key already exists in the database."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "present", "required": false, "description": ["If the key will be imported or removed from the rpm db."], "choices": ["absent", "present"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If C(false) and the C(key) is a url starting with https, SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "key", "value": "{{ rabbitmq_redhat_repo_key }}", "undefined_variables": ["rabbitmq_redhat_repo_key"]}], "unknown_type_values": [{"key": "key", "expected_type": "str", "unknown_type_value": "{{ rabbitmq_redhat_repo_key }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": ["rabbitmq_redhat_repo_key"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/redhat.yml#task:[3]", "name": "redhat | downloading RabbitMQ", "module": "get_url", "index": 3, "play_index": -1, "defined_in": "tasks/redhat.yml", "local_key": "task taskfile:tasks/redhat.yml#task:[3]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "redhat | downloading RabbitMQ", "become": true}, "module_options": {"url": "{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}", "dest": "/opt/{{ rabbitmq_redhat_package }}"}, "executable": "get_url", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: redhat | downloading RabbitMQ\n  get_url:\n    url: \"{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}\"\n    dest: \"/opt/{{ rabbitmq_redhat_package }}\"\n  become: true\n", "line_num_in_file": [26, 31], "resolved_name": "ansible.builtin.get_url", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.get_url", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.get_url", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "ciphers", "client_cert", "client_key", "decompress", "dest", "force", "force_basic_auth", "group", "headers", "http_agent", "mode", "owner", "selevel", "serole", "setype", "seuser", "timeout", "tmp_dest", "unredirected_headers", "unsafe_writes", "url", "url_password", "password", "url_username", "username", "use_gssapi", "use_netrc", "use_proxy", "validate_certs"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "url", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum", "type": "str", "elements": "", "default": "", "required": false, "description": ["If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum|url>, e.g. checksum=\"sha256:D98291AC[...]B6DC7B97\", checksum=\"sha256:http://example.com/path/sha256sum.txt\"", "If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.", "The third party hashlib library can be installed for access to additional algorithms.", "Additionally, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the I(destination_checksum) would be calculated, and if checksum equals I(destination_checksum), the file download would be skipped (unless C(force) is true). If the checksum does not equal I(destination_checksum), the destination file is deleted."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "ciphers", "type": "list", "elements": "str", "default": null, "required": false, "description": ["SSL/TLS Ciphers to use for the request", "When a list is provided, all ciphers are joined in order with C(:)", "See the L(OpenSSL Cipher List Format,https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT) for more details.", "The available ciphers is dependent on the Python and OpenSSL/LibreSSL versions"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_cert", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted certificate chain file to be used for SSL client authentication.", "This file can also include the key as well, and if the key is included, C(client_key) is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_key", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted file that contains your private key to be used for SSL client authentication.", "If C(client_cert) contains both the certificate and key, this option is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "decompress", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to attempt to decompress gzip content-encoded responses"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Absolute path of where to download the file to.", "If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect.", "If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) and C(checksum) option), but replaced only if the contents changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["If C(true) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(false), the file will only be downloaded if the destination does not exist. Generally should be C(true) only for small local files.", "Prior to 0.6, this module behaved as if C(true) was the default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_basic_auth", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the sending of the Basic authentication header upon initial request.", "httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "headers", "type": "dict", "elements": "", "default": null, "required": false, "description": ["Add custom HTTP headers to a request in hash/dict format.", "The hash/dict format was added in Ansible 2.6.", "Previous versions used a C(\"key:value,key:value\") string format.", "The C(\"key:value,key:value\") string format is deprecated and has been removed in version 2.10."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "http_agent", "type": "str", "elements": "", "default": "ansible-httpget", "required": false, "description": ["Header to identify as, generally appears in web server logs."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "timeout", "type": "int", "elements": "", "default": 10, "required": false, "description": ["Timeout in seconds for URL request."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tmp_dest", "type": "str", "elements": "", "default": null, "required": false, "description": ["Absolute path of where temporary file is downloaded to.", "When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting", "When run on Ansible prior to 2.5, it defaults to C(TMPDIR), C(TEMP) or C(TMP) env variables or a platform specific value.", "U(https://docs.python.org/3/library/tempfile.html#tempfile.tempdir)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unredirected_headers", "type": "list", "elements": "str", "default": [], "required": false, "description": ["A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": true, "description": ["HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_password", "type": "str", "elements": "", "default": null, "required": false, "description": ["The password for use in HTTP basic authentication.", "If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.", "Since version 2.8 you can also use the 'password' alias for this option."], "choices": null, "aliases": ["password"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_username", "type": "str", "elements": "", "default": null, "required": false, "description": ["The username for use in HTTP basic authentication.", "This parameter can be used without C(url_password) for sites that allow empty passwords.", "Since version 2.8 you can also use the C(username) alias for this option."], "choices": null, "aliases": ["username"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_gssapi", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.", "Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.", "Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.", "NTLM authentication is I(not) supported even if the GSSAPI mech for NTLM has been installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_netrc", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determining whether to use credentials from ``~/.netrc`` file", "By default .netrc is used with Basic authentication headers", "When set to False, .netrc credentials are ignored"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_proxy", "type": "bool", "elements": "", "default": true, "required": false, "description": ["if C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If C(false), SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "attributes", "type": "str", "elements": "", "default": null, "required": false, "description": ["The attributes the resulting filesystem object should have.", "To get supported flags look at the man page for I(chattr) on the target system.", "This string should contain the attributes in the same order as the one displayed by I(lsattr).", "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."], "choices": null, "aliases": ["attr"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "backup", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "checksum", "type": "str", "elements": "", "default": "", "required": false, "description": ["If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum|url>, e.g. checksum=\"sha256:D98291AC[...]B6DC7B97\", checksum=\"sha256:http://example.com/path/sha256sum.txt\"", "If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.", "The third party hashlib library can be installed for access to additional algorithms.", "Additionally, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the I(destination_checksum) would be calculated, and if checksum equals I(destination_checksum), the file download would be skipped (unless C(force) is true). If the checksum does not equal I(destination_checksum), the destination file is deleted."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "ciphers", "type": "list", "elements": "str", "default": null, "required": false, "description": ["SSL/TLS Ciphers to use for the request", "When a list is provided, all ciphers are joined in order with C(:)", "See the L(OpenSSL Cipher List Format,https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT) for more details.", "The available ciphers is dependent on the Python and OpenSSL/LibreSSL versions"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_cert", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted certificate chain file to be used for SSL client authentication.", "This file can also include the key as well, and if the key is included, C(client_key) is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "client_key", "type": "str", "elements": "", "default": null, "required": false, "description": ["PEM formatted file that contains your private key to be used for SSL client authentication.", "If C(client_cert) contains both the certificate and key, this option is not required."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "decompress", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Whether to attempt to decompress gzip content-encoded responses"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "dest", "type": "str", "elements": "", "default": null, "required": true, "description": ["Absolute path of where to download the file to.", "If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect.", "If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) and C(checksum) option), but replaced only if the contents changed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force", "type": "bool", "elements": "", "default": false, "required": false, "description": ["If C(true) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(false), the file will only be downloaded if the destination does not exist. Generally should be C(true) only for small local files.", "Prior to 0.6, this module behaved as if C(true) was the default."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "force_basic_auth", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Force the sending of the Basic authentication header upon initial request.", "httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "group", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the group that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current group of the current user unless you are root, in which case it can preserve the previous ownership."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "headers", "type": "dict", "elements": "", "default": null, "required": false, "description": ["Add custom HTTP headers to a request in hash/dict format.", "The hash/dict format was added in Ansible 2.6.", "Previous versions used a C(\"key:value,key:value\") string format.", "The C(\"key:value,key:value\") string format is deprecated and has been removed in version 2.10."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "http_agent", "type": "str", "elements": "", "default": "ansible-httpget", "required": false, "description": ["Header to identify as, generally appears in web server logs."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "mode", "type": "any", "elements": "", "default": null, "required": false, "description": ["The permissions the resulting filesystem object should have.", "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.", "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.", "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).", "If C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.", "If C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.", "Specifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "owner", "type": "str", "elements": "", "default": null, "required": false, "description": ["Name of the user that should own the filesystem object, as would be fed to I(chown).", "When left unspecified, it uses the current user unless you are root, in which case it can preserve the previous ownership.", "Specifying a numeric username will be assumed to be a user ID and not a username. Avoid numeric usernames to avoid this confusion."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "selevel", "type": "str", "elements": "", "default": null, "required": false, "description": ["The level part of the SELinux filesystem object context.", "This is the MLS/MCS attribute, sometimes known as the C(range).", "When set to C(_default), it will use the C(level) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "serole", "type": "str", "elements": "", "default": null, "required": false, "description": ["The role part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(role) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "setype", "type": "str", "elements": "", "default": null, "required": false, "description": ["The type part of the SELinux filesystem object context.", "When set to C(_default), it will use the C(type) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "seuser", "type": "str", "elements": "", "default": null, "required": false, "description": ["The user part of the SELinux filesystem object context.", "By default it uses the C(system) policy, where applicable.", "When set to C(_default), it will use the C(user) portion of the policy if available."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "timeout", "type": "int", "elements": "", "default": 10, "required": false, "description": ["Timeout in seconds for URL request."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "tmp_dest", "type": "str", "elements": "", "default": null, "required": false, "description": ["Absolute path of where temporary file is downloaded to.", "When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting", "When run on Ansible prior to 2.5, it defaults to C(TMPDIR), C(TEMP) or C(TMP) env variables or a platform specific value.", "U(https://docs.python.org/3/library/tempfile.html#tempfile.tempdir)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unredirected_headers", "type": "list", "elements": "str", "default": [], "required": false, "description": ["A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "unsafe_writes", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.", "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objects, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.", "This option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).", "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url", "type": "str", "elements": "", "default": null, "required": true, "description": ["HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_password", "type": "str", "elements": "", "default": null, "required": false, "description": ["The password for use in HTTP basic authentication.", "If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.", "Since version 2.8 you can also use the 'password' alias for this option."], "choices": null, "aliases": ["password"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "url_username", "type": "str", "elements": "", "default": null, "required": false, "description": ["The username for use in HTTP basic authentication.", "This parameter can be used without C(url_password) for sites that allow empty passwords.", "Since version 2.8 you can also use the C(username) alias for this option."], "choices": null, "aliases": ["username"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_gssapi", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.", "Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.", "Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.", "NTLM authentication is I(not) supported even if the GSSAPI mech for NTLM has been installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_netrc", "type": "bool", "elements": "", "default": true, "required": false, "description": ["Determining whether to use credentials from ``~/.netrc`` file", "By default .netrc is used with Basic authentication headers", "When set to False, .netrc credentials are ignored"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_proxy", "type": "bool", "elements": "", "default": true, "required": false, "description": ["if C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": true, "required": false, "description": ["If C(false), SSL certificates will not be validated.", "This should only be used on personally controlled sites using self-signed certificates."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "url", "value": "{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}", "undefined_variables": ["rabbitmq_redhat_url", "rabbitmq_redhat_package"]}, {"key": "dest", "value": "/opt/{{ rabbitmq_redhat_package }}", "undefined_variables": ["rabbitmq_redhat_package"]}], "unknown_type_values": [{"key": "url", "expected_type": "str", "unknown_type_value": "{{ rabbitmq_redhat_url }}/{{ rabbitmq_redhat_package }}"}, {"key": "dest", "expected_type": "str", "unknown_type_value": "/opt/{{ rabbitmq_redhat_package }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_redhat_repo_key"], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": ["rabbitmq_redhat_url", "rabbitmq_redhat_package"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/redhat.yml#task:[4]", "name": "redhat | installing RabbitMQ", "module": "yum", "index": 4, "play_index": -1, "defined_in": "tasks/redhat.yml", "local_key": "task taskfile:tasks/redhat.yml#task:[4]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"result": "task taskfile:tasks/redhat.yml#task:[4]"}, "set_facts": {}, "loop": {}, "options": {"name": "redhat | installing RabbitMQ", "become": true, "register": "result", "until": "result is successful"}, "module_options": {"name": "/opt/{{ rabbitmq_redhat_package }}", "state": "present"}, "executable": "yum", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: redhat | installing RabbitMQ\n  yum:\n    name: \"/opt/{{ rabbitmq_redhat_package }}\"\n    state: present\n  become: true\n  register: result\n  until: result is successful\n", "line_num_in_file": [32, 39], "resolved_name": "ansible.builtin.yum", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.yum", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.yum", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_downgrade", "autoremove", "bugfix", "cacheonly", "conf_file", "disable_excludes", "disable_gpg_check", "disable_plugin", "disablerepo", "download_dir", "download_only", "enable_plugin", "enablerepo", "exclude", "install_repoquery", "install_weak_deps", "installroot", "list", "lock_timeout", "name", "pkg", "releasever", "security", "skip_broken", "sslverify", "state", "update_cache", "expire-cache", "update_only", "use_backend", "validate_certs"], "required_arg_keys": [], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)", "NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells yum to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote yum configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in YUM config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in yum.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If repoquery is not available, install yum-utils. If the system is registered to RHN or an RHN Satellite, repoquery allows for querying all channels assigned to the system. It is also required to use the 'list' parameter.", "NOTE: This will run and be logged as a separate yum transation which takes place before any other installation or removal.", "NOTE: This will use the system's default enabled repositories without regard for disablerepo/enablerepo given to the module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation.", "NOTE: This feature requires yum >= 4 (RHEL/CentOS 8+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Package name to run the equivalent of C(yum list --show-duplicates <package>) against. In addition to listing packages, use can also list the following: C(installed), C(updates), C(available) and C(repos).", "This parameter is mutually exclusive with I(name)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the yum lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A package name or package specifier with version, like C(name-1.0).", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name>=1.0)", "If a previous version is specified, the task also needs to turn C(allow_downgrade) on. See the C(allow_downgrade) documentation for caveats with downgrading packages.", "When using state=latest, this can be C('*') which means run C(yum -y update).", "You can also pass a url or a local path to a rpm file (using state=present). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.", "C(present) and C(installed) will simply ensure that a desired package is installed.", "C(latest) will update the specified package if it's not of the latest available version.", "C(absent) and C(removed) will remove the specified package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "installed", "latest", "present", "removed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_backend", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the \"new yum\" and it has an C(dnf) backend.", "By default, this module will select the backend based on the C(ansible_pkg_mgr) fact."], "choices": ["auto", "yum", "yum4", "dnf"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.", "Prior to 2.1 the code worked as if this was set to C(true)."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "allow_downgrade", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "autoremove", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If C(true), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)", "NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "bugfix", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked bugfix related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "cacheonly", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Tells yum to run entirely from system cache; does not download or update metadata."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "conf_file", "type": "str", "elements": "", "default": null, "required": false, "description": ["The remote yum configuration file to use for the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_excludes", "type": "str", "elements": "", "default": null, "required": false, "description": ["Disable the excludes defined in YUM config files.", "If set to C(all), disables all excludes.", "If set to C(main), disable excludes defined in [main] in yum.conf.", "If set to C(repoid), disable excludes defined for given repo id."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_gpg_check", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "disablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_dir", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternate directory to store packages.", "Has an effect only if I(download_only) is specified."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "download_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Only download the packages, do not install them."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enable_plugin", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enablerepo", "type": "list", "elements": "str", "default": null, "required": false, "description": ["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").", "As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "exclude", "type": "list", "elements": "str", "default": null, "required": false, "description": ["Package name(s) to exclude when state=present, or latest"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_repoquery", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["If repoquery is not available, install yum-utils. If the system is registered to RHN or an RHN Satellite, repoquery allows for querying all channels assigned to the system. It is also required to use the 'list' parameter.", "NOTE: This will run and be logged as a separate yum transation which takes place before any other installation or removal.", "NOTE: This will use the system's default enabled repositories without regard for disablerepo/enablerepo given to the module."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "install_weak_deps", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Will also install all packages linked by a weak dependency relation.", "NOTE: This feature requires yum >= 4 (RHEL/CentOS 8+)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "installroot", "type": "str", "elements": "", "default": "/", "required": false, "description": ["Specifies an alternative installroot, relative to which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "list", "type": "str", "elements": "", "default": null, "required": false, "description": ["Package name to run the equivalent of C(yum list --show-duplicates <package>) against. In addition to listing packages, use can also list the following: C(installed), C(updates), C(available) and C(repos).", "This parameter is mutually exclusive with I(name)."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "lock_timeout", "type": "int", "elements": "", "default": 30, "required": false, "description": ["Amount of time to wait for the yum lockfile to be freed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "list", "elements": "str", "default": null, "required": false, "description": ["A package name or package specifier with version, like C(name-1.0).", "Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name>=1.0)", "If a previous version is specified, the task also needs to turn C(allow_downgrade) on. See the C(allow_downgrade) documentation for caveats with downgrading packages.", "When using state=latest, this can be C('*') which means run C(yum -y update).", "You can also pass a url or a local path to a rpm file (using state=present). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages."], "choices": null, "aliases": ["pkg"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "releasever", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specifies an alternative release from which all packages will be installed."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "security", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["If set to C(true), and C(state=latest) then only installs updates that have been marked security related."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "skip_broken", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sslverify", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["Disables SSL validation of the repository server for this transaction.", "This should be set to C(false) if one of the configured repositories is using an untrusted or self-signed certificate."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.", "C(present) and C(installed) will simply ensure that a desired package is installed.", "C(latest) will update the specified package if it's not of the latest available version.", "C(absent) and C(removed) will remove the specified package.", "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."], "choices": ["absent", "installed", "latest", "present", "removed"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_cache", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."], "choices": null, "aliases": ["expire-cache"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "update_only", "type": "bool", "elements": "", "default": "no", "required": false, "description": ["When using latest, only update installed packages. Do not install packages.", "Has an effect only if state is I(latest)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use_backend", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the \"new yum\" and it has an C(dnf) backend.", "By default, this module will select the backend based on the C(ansible_pkg_mgr) fact."], "choices": ["auto", "yum", "yum4", "dnf"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "validate_certs", "type": "bool", "elements": "", "default": "yes", "required": false, "description": ["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(false), the SSL certificates will not be validated.", "This should only set to C(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.", "Prior to 2.1 the code worked as if this was set to C(true)."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "name", "value": "/opt/{{ rabbitmq_redhat_package }}", "undefined_variables": ["rabbitmq_redhat_package"]}], "unknown_type_values": [{"key": "name", "expected_type": "list", "unknown_type_value": "/opt/{{ rabbitmq_redhat_package }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": ["rabbitmq_redhat_package"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/redhat.yml#task:[5]", "name": "redhat | starting and enabling RabbitMQ service", "module": "service", "index": 5, "play_index": -1, "defined_in": "tasks/redhat.yml", "local_key": "task taskfile:tasks/redhat.yml#task:[5]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "redhat | starting and enabling RabbitMQ service", "become": true}, "module_options": {"name": "rabbitmq-server", "state": "started", "enabled": true}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: redhat | starting and enabling RabbitMQ service\n  service:\n    name: rabbitmq-server\n    state: started\n    enabled: yes\n  become: true\n", "line_num_in_file": [40, 46], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:tasks/redhat.yml#task:[6]", "name": "redhat | enabling the RabbitMQ Management Console", "module": "rabbitmq_plugin", "index": 6, "play_index": -1, "defined_in": "tasks/redhat.yml", "local_key": "task taskfile:tasks/redhat.yml#task:[6]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "redhat | enabling the RabbitMQ Management Console", "notify": "restart rabbitmq-server", "become": true}, "module_options": {"names": "rabbitmq_management", "state": "enabled"}, "executable": "rabbitmq_plugin", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: redhat | enabling the RabbitMQ Management Console\n  rabbitmq_plugin:\n    names: rabbitmq_management\n    state: enabled\n  notify: restart rabbitmq-server\n  become: true", "line_num_in_file": [47, 53], "resolved_name": "", "possible_candidates": [{"py/tuple": ["community.rabbitmq.rabbitmq_plugin", {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}]}], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "community.rabbitmq.rabbitmq_plugin", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": ["community.rabbitmq.rabbitmq_plugin"], "suggested_dependency": [{"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["broker_state", "names", "name", "new_only", "prefix", "state"], "required_arg_keys": [{"key": "names", "aliases": ["name"]}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "broker_state", "type": "str", "elements": "", "default": "online", "required": false, "description": ["Specify whether the broker should be online or offline for the plugin change."], "choices": ["online", "offline"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "names", "type": "str", "elements": "", "default": null, "required": true, "description": ["Comma-separated list of plugin names. Also, accepts plugin name."], "choices": null, "aliases": ["name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "new_only", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Only enable missing plugins.", "Does not disable plugins that are not in the names list."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "prefix", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specify a custom install prefix to a Rabbit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "enabled", "required": false, "description": ["Specify if plugins are to be enabled or disabled."], "choices": ["enabled", "disabled"], "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "broker_state", "type": "str", "elements": "", "default": "online", "required": false, "description": ["Specify whether the broker should be online or offline for the plugin change."], "choices": ["online", "offline"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "names", "type": "str", "elements": "", "default": null, "required": true, "description": ["Comma-separated list of plugin names. Also, accepts plugin name."], "choices": null, "aliases": ["name"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "new_only", "type": "bool", "elements": "", "default": false, "required": false, "description": ["Only enable missing plugins.", "Does not disable plugins that are not in the names list."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "prefix", "type": "str", "elements": "", "default": null, "required": false, "description": ["Specify a custom install prefix to a Rabbit."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": "enabled", "required": false, "description": ["Specify if plugins are to be enabled or disabled."], "choices": ["enabled", "disabled"], "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rabbitmq_redhat_repo_key", "rabbitmq_redhat_url", "rabbitmq_redhat_package"], "vars_defined_in_previous_tasks": ["result"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbook.yml#play:[0]#task:[0]", "name": "Include ansible-rabbitmq", "module": "include_role", "index": 0, "play_index": 0, "defined_in": "playbook.yml", "local_key": "task playbook:playbook.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include ansible-rabbitmq"}, "module_options": {"name": "ansible-rabbitmq"}, "executable": "ansible-rabbitmq", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Include ansible-rabbitmq\n      include_role:\n        name: ansible-rabbitmq", "line_num_in_file": [5, 8], "resolved_name": "", "possible_candidates": []}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:molecule/ubuntu1804/verify.yml#play:[0]#task:[0]", "name": "Example assertion", "module": "assert", "index": 0, "play_index": 0, "defined_in": "molecule/ubuntu1804/verify.yml", "local_key": "task playbook:molecule/ubuntu1804/verify.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Example assertion"}, "module_options": {"that": true}, "executable": "assert", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "  - name: Example assertion\n    assert:\n      that: true", "line_num_in_file": [7, 10], "resolved_name": "", "possible_candidates": []}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:molecule/ubuntu1604/verify.yml#play:[0]#task:[0]", "name": "Example assertion", "module": "assert", "index": 0, "play_index": 0, "defined_in": "molecule/ubuntu1604/verify.yml", "local_key": "task playbook:molecule/ubuntu1604/verify.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Example assertion"}, "module_options": {"that": true}, "executable": "assert", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "  - name: Example assertion\n    assert:\n      that: true", "line_num_in_file": [7, 10], "resolved_name": "", "possible_candidates": []}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:molecule/ubuntu2004/verify.yml#play:[0]#task:[0]", "name": "Example assertion", "module": "assert", "index": 0, "play_index": 0, "defined_in": "molecule/ubuntu2004/verify.yml", "local_key": "task playbook:molecule/ubuntu2004/verify.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Example assertion"}, "module_options": {"that": true}, "executable": "assert", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "  - name: Example assertion\n    assert:\n      that: true", "line_num_in_file": [7, 10], "resolved_name": "", "possible_candidates": []}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:molecule/ubuntu2004/converge.yml#play:[0]#task:[0]", "name": "Include ansible-rabbitmq", "module": "include_role", "index": 0, "play_index": 0, "defined_in": "molecule/ubuntu2004/converge.yml", "local_key": "task playbook:molecule/ubuntu2004/converge.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include ansible-rabbitmq"}, "module_options": {"name": "ansible-rabbitmq"}, "executable": "ansible-rabbitmq", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Include ansible-rabbitmq\n      include_role:\n        name: ansible-rabbitmq", "line_num_in_file": [8, 11], "resolved_name": "", "possible_candidates": []}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:molecule/debian10/verify.yml#play:[0]#task:[0]", "name": "Example assertion", "module": "assert", "index": 0, "play_index": 0, "defined_in": "molecule/debian10/verify.yml", "local_key": "task playbook:molecule/debian10/verify.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Example assertion"}, "module_options": {"that": true}, "executable": "assert", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "  - name: Example assertion\n    assert:\n      that: true", "line_num_in_file": [7, 10], "resolved_name": "", "possible_candidates": []}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:molecule/shared/verify.yml#play:[0]#task:[0]", "name": "Example assertion", "module": "assert", "index": 0, "play_index": 0, "defined_in": "molecule/shared/verify.yml", "local_key": "task playbook:molecule/shared/verify.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Example assertion"}, "module_options": {"that": true}, "executable": "assert", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "  - name: Example assertion\n    assert:\n      that: true", "line_num_in_file": [7, 10], "resolved_name": "", "possible_candidates": []}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:molecule/shared/converge.yml#play:[0]#task:[0]", "name": "Include ansible-rabbitmq", "module": "include_role", "index": 0, "play_index": 0, "defined_in": "molecule/shared/converge.yml", "local_key": "task playbook:molecule/shared/converge.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include ansible-rabbitmq"}, "module_options": {"name": "ansible-rabbitmq"}, "executable": "ansible-rabbitmq", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Include ansible-rabbitmq\n      include_role:\n        name: ansible-rabbitmq", "line_num_in_file": [5, 8], "resolved_name": "", "possible_candidates": []}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:molecule/fedora/verify.yml#play:[0]#task:[0]", "name": "Example assertion", "module": "assert", "index": 0, "play_index": 0, "defined_in": "molecule/fedora/verify.yml", "local_key": "task playbook:molecule/fedora/verify.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Example assertion"}, "module_options": {"that": true}, "executable": "assert", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "  - name: Example assertion\n    assert:\n      that: true", "line_num_in_file": [7, 10], "resolved_name": "", "possible_candidates": []}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:molecule/debian9/verify.yml#play:[0]#task:[0]", "name": "Example assertion", "module": "assert", "index": 0, "play_index": 0, "defined_in": "molecule/debian9/verify.yml", "local_key": "task playbook:molecule/debian9/verify.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Example assertion"}, "module_options": {"that": true}, "executable": "assert", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "  - name: Example assertion\n    assert:\n      that: true", "line_num_in_file": [7, 10], "resolved_name": "", "possible_candidates": []}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:molecule/centos7/verify.yml#play:[0]#task:[0]", "name": "Example assertion", "module": "assert", "index": 0, "play_index": 0, "defined_in": "molecule/centos7/verify.yml", "local_key": "task playbook:molecule/centos7/verify.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Example assertion"}, "module_options": {"that": true}, "executable": "assert", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "  - name: Example assertion\n    assert:\n      that: true", "line_num_in_file": [7, 10], "resolved_name": "", "possible_candidates": []}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:molecule/debian8/verify.yml#play:[0]#task:[0]", "name": "Example assertion", "module": "assert", "index": 0, "play_index": 0, "defined_in": "molecule/debian8/verify.yml", "local_key": "task playbook:molecule/debian8/verify.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Example assertion"}, "module_options": {"that": true}, "executable": "assert", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "  - name: Example assertion\n    assert:\n      that: true", "line_num_in_file": [7, 10], "resolved_name": "", "possible_candidates": []}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:molecule/centos8/verify.yml#play:[0]#task:[0]", "name": "Example assertion", "module": "assert", "index": 0, "play_index": 0, "defined_in": "molecule/centos8/verify.yml", "local_key": "task playbook:molecule/centos8/verify.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Example assertion"}, "module_options": {"that": true}, "executable": "assert", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "  - name: Example assertion\n    assert:\n      that: true", "line_num_in_file": [7, 10], "resolved_name": "", "possible_candidates": []}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbook.yml#play:[0]#task:[0]", "name": "Include ansible-rabbitmq", "module": "include_role", "index": 0, "play_index": 0, "defined_in": "playbook.yml", "local_key": "task playbook:playbook.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include ansible-rabbitmq"}, "module_options": {"name": "ansible-rabbitmq"}, "executable": "ansible-rabbitmq", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Include ansible-rabbitmq\n      include_role:\n        name: ansible-rabbitmq", "line_num_in_file": [5, 8], "resolved_name": "ansible-rabbitmq", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq", "annotations": {"correct_fqcn": "ansible.builtin.include_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "available_args": null, "default_args": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}]}, "mappings": {"py/object": "ansible_risk_insight.models.Load", "target_name": "/tmp/ansible-rabbitmq", "target_type": "project", "path": "/tmp/ansible-rabbitmq", "loader_version": "0.1.7", "playbook_yaml": "", "playbook_only": false, "taskfile_yaml": "", "taskfile_only": false, "include_test_contents": true, "timestamp": "2023-07-18T08:17:16.774353", "roles": [["", "role role:ansible-rabbitmq"]], "playbooks": [["playbook.yml", "playbook playbook:playbook.yml"]], "taskfiles": [["tasks/config.yml", "taskfile taskfile:tasks/config.yml"], ["tasks/debian.yml", "taskfile taskfile:tasks/debian.yml"], ["tasks/fedora.yml", "taskfile taskfile:tasks/fedora.yml"], ["tasks/rabbitmq_clustering.yml", "taskfile taskfile:tasks/rabbitmq_clustering.yml"], ["tasks/rabbitmq_ha_config.yml", "taskfile taskfile:tasks/rabbitmq_ha_config.yml"], ["tasks/rabbitmq_users.yml", "taskfile taskfile:tasks/rabbitmq_users.yml"], ["tasks/rabbitmq_vhosts.yml", "taskfile taskfile:tasks/rabbitmq_vhosts.yml"], ["tasks/redhat.yml", "taskfile taskfile:tasks/redhat.yml"]], "modules": []}}, "ext_definitions": {}, "extra_requirements": [{"type": "module", "name": "community.rabbitmq.rabbitmq_plugin", "defined_in": {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}, "used_in": "tasks/debian.yml"}, {"type": "module", "name": "community.rabbitmq.rabbitmq_vhost", "defined_in": {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}, "used_in": "tasks/rabbitmq_vhosts.yml"}, {"type": "module", "name": "community.rabbitmq.rabbitmq_policy", "defined_in": {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}, "used_in": "tasks/rabbitmq_ha_config.yml"}, {"type": "module", "name": "community.rabbitmq.rabbitmq_user", "defined_in": {"type": "collection", "name": "community.rabbitmq", "version": "1.2.3", "hash": "90a8b715a793b83a17fde50fcb15aa791cb95a22fbf6d066bb3d53c7102e9ab5"}, "used_in": "tasks/rabbitmq_users.yml"}], "resolve_failures": {"module": {}, "taskfile": {}, "role": {}}, "prm": {}, "report": {}, "summary_txt": "", "scan_time": "2023-07-18T08:17:18.162965"}
{"py/object": "ansible_risk_insight.findings.Findings", "metadata": {"type": "taskfile", "name": "/tmp/ansible-rabbitmq/handlers/main.yml", "version": "", "source": "", "download_url": "", "hash": "", "time_records": {"scandata_init": {"begin": "2023-07-18T08:17:18.163831", "end": "2023-07-18T08:17:18.163970", "elapsed": 0.000139}, "metadata_load": {"begin": "2023-07-18T08:17:18.163976", "end": "2023-07-18T08:17:18.164355", "elapsed": 0.000379}, "dependency_load": {"begin": "2023-07-18T08:17:18.164366", "end": "2023-07-18T08:17:18.164368", "elapsed": 2e-06}, "prm_load": {"begin": "2023-07-18T08:17:18.164371", "end": "2023-07-18T08:17:18.164373", "elapsed": 2e-06}, "target_load": {"begin": "2023-07-18T08:17:18.164375", "end": "2023-07-18T08:17:18.164376", "elapsed": 1e-06}, "apply_spec_rules": {"begin": "2023-07-18T08:17:18.167564", "end": "2023-07-18T08:17:18.167569", "elapsed": 5e-06}, "tree_construction": {"begin": "2023-07-18T08:17:18.167575", "end": "2023-07-18T08:17:18.167799", "elapsed": 0.000224}, "variable_resolution": {"begin": "2023-07-18T08:17:18.167804", "end": "2023-07-18T08:17:18.167845", "elapsed": 4.1e-05}, "module_annotators": {"begin": "2023-07-18T08:17:18.167848", "end": "2023-07-18T08:17:18.167872", "elapsed": 2.4e-05}, "apply_rules": {"begin": "2023-07-18T08:17:18.167875", "end": "2023-07-18T08:17:18.169295", "elapsed": 0.00142}}}, "dependencies": [], "root_definitions": {"definitions": {"collections": [], "projects": [], "roles": [], "taskfiles": [{"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile taskfile:main.yml", "name": "main.yml", "defined_in": "main.yml", "local_key": "taskfile taskfile:main.yml", "tasks": ["task taskfile:main.yml#task:[0]"], "role": "", "collection": "", "yaml_lines": "---\n# handlers file for ansible-rabbitmq\n- name: restart rabbitmq-server\n  service:\n    name: rabbitmq-server\n    state: restarted\n  become: true\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}}], "modules": [], "playbooks": [], "plays": [], "tasks": [{"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task taskfile:main.yml#task:[0]", "name": "restart rabbitmq-server", "module": "service", "index": 0, "play_index": -1, "defined_in": "main.yml", "local_key": "task taskfile:main.yml#task:[0]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "restart rabbitmq-server", "become": true}, "module_options": {"name": "rabbitmq-server", "state": "restarted"}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: restart rabbitmq-server\n  service:\n    name: rabbitmq-server\n    state: restarted\n  become: true", "line_num_in_file": [3, 8], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "scan_path": "/tmp/ansible-rabbitmq/handlers/main.yml", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "available_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "default_args": [{"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "arguments", "type": "str", "elements": "", "default": null, "required": false, "description": ["Additional arguments provided on the command line.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": ["args"]}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "enabled", "type": "bool", "elements": "", "default": null, "required": false, "description": ["Whether the service should start on boot.", "B(At least one of state and enabled are required.)"], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "name", "type": "str", "elements": "", "default": null, "required": true, "description": ["Name of the service."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "pattern", "type": "str", "elements": "", "default": null, "required": false, "description": ["If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.", "If the string is found, the service will be assumed to be started.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "runlevel", "type": "str", "elements": "", "default": "default", "required": false, "description": ["For OpenRC init scripts (e.g. Gentoo) only.", "The runlevel that this service belongs to.", "While using remote hosts with systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "sleep", "type": "int", "elements": "", "default": null, "required": false, "description": ["If the service is being C(restarted) then sleep this many seconds between the stop and start command.", "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.", "Not all service managers support sleep, i.e when using systemd this setting will be ignored."], "choices": null, "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "state", "type": "str", "elements": "", "default": null, "required": false, "description": ["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.", "C(restarted) will always bounce the service.", "C(reloaded) will always reload.", "B(At least one of state and enabled are required.)", "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."], "choices": ["reloaded", "restarted", "started", "stopped"], "aliases": null}, {"py/object": "ansible_risk_insight.models.ModuleArgument", "name": "use", "type": "str", "elements": "", "default": "auto", "required": false, "description": ["The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.", "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."], "choices": null, "aliases": null}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}]}, "mappings": {"py/object": "ansible_risk_insight.models.Load", "target_name": "/tmp/ansible-rabbitmq/handlers/main.yml", "target_type": "taskfile", "path": "/tmp/ansible-rabbitmq/handlers/main.yml", "loader_version": "0.1.7", "playbook_yaml": "", "playbook_only": true, "taskfile_yaml": "", "taskfile_only": true, "include_test_contents": true, "timestamp": "2023-07-18T08:17:18.167003", "roles": [], "playbooks": [], "taskfiles": [["main.yml", "taskfile taskfile:main.yml"]], "modules": []}}, "ext_definitions": {}, "extra_requirements": [], "resolve_failures": {"module": {}, "taskfile": {}, "role": {}}, "prm": {}, "report": {}, "summary_txt": "", "scan_time": "2023-07-18T08:17:18.169286"}
